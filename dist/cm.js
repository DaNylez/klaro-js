!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.cm=e():t.cm=e()}(self,(()=>(()=>{"use strict";var t={5482:(t,e,r)=>{function n(t){for(var e={},r=0;r<t.attributes.length;r++){var n=t.attributes[r];n.name.startsWith("data-")&&(e[n.name.slice(5)]=n.value)}return e}function o(t,e){for(var r=Object.keys(t),n=0;n<r.length;n++){var o=r[n],i=t[o];e[o]!==i&&e.setAttribute("data-"+o,i)}}r.d(e,{RT:()=>n,X7:()=>o}),r(9305),r(2733),r(4701),r(4776),r(9892),r(6281),r(4962),r(9336),r(1908),r(7132),r(3810),r(8557),r(646),r(5021),r(3687),r(9425),r(3994),r(3062),r(4062),r(2367)},8120:(t,e,r)=>{var n=r(1483),o=r(8761),i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not a function")}},2374:(t,e,r)=>{var n=r(943),o=r(8761),i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not a constructor")}},3852:(t,e,r)=>{var n=r(735),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw new i("Can't set "+o(t)+" as a prototype")}},7095:(t,e,r)=>{var n=r(1),o=r(5290),i=r(5835).f,a=n("unscopables"),u=Array.prototype;void 0===u[a]&&i(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},4419:(t,e,r)=>{var n=r(9105).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},6021:(t,e,r)=>{var n=r(4815),o=TypeError;t.exports=function(t,e){if(n(e,t))return t;throw new o("Incorrect invocation")}},2293:(t,e,r)=>{var n=r(1704),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not an object")}},9214:(t,e,r)=>{var n=r(8473);t.exports=n((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}))},4793:(t,e,r)=>{var n=r(2867).forEach,o=r(3152)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},6142:(t,e,r)=>{var n=r(2914),o=r(1807),i=r(2347),a=r(8901),u=r(5299),c=r(943),s=r(6960),f=r(670),l=r(4887),v=r(6665),p=Array;t.exports=function(t){var e=i(t),r=c(this),h=arguments.length,y=h>1?arguments[1]:void 0,d=void 0!==y;d&&(y=n(y,h>2?arguments[2]:void 0));var g,b,m,x,w,S,O=v(e),E=0;if(!O||this===p&&u(O))for(g=s(e),b=r?new this(g):p(g);g>E;E++)S=d?y(e[E],E):e[E],f(b,E,S);else for(w=(x=l(e,O)).next,b=r?new this:[];!(m=o(w,x)).done;E++)S=d?a(x,y,[m.value,E],!0):m.value,f(b,E,S);return b.length=E,b}},6651:(t,e,r)=>{var n=r(5599),o=r(3392),i=r(6960),a=function(t){return function(e,r,a){var u=n(e),c=i(u);if(0===c)return!t&&-1;var s,f=o(a,c);if(t&&r!=r){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2867:(t,e,r)=>{var n=r(2914),o=r(4762),i=r(2121),a=r(2347),u=r(6960),c=r(4551),s=o([].push),f=function(t){var e=1===t,r=2===t,o=3===t,f=4===t,l=6===t,v=7===t,p=5===t||l;return function(h,y,d,g){for(var b,m,x=a(h),w=i(x),S=u(w),O=n(y,d),E=0,k=g||c,j=e?k(h,S):r||v?k(h,0):void 0;S>E;E++)if((p||E in w)&&(m=O(b=w[E],E,x),t))if(e)j[E]=m;else if(m)switch(t){case 3:return!0;case 5:return b;case 6:return E;case 2:s(j,b)}else switch(t){case 4:return!1;case 7:s(j,b)}return l?-1:o||f?f:j}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},4595:(t,e,r)=>{var n=r(8473),o=r(1),i=r(6170),a=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},3152:(t,e,r)=>{var n=r(8473);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){return 1},1)}))}},1698:(t,e,r)=>{var n=r(4762);t.exports=n([].slice)},9703:(t,e,r)=>{var n=r(4914),o=r(943),i=r(1704),a=r(1)("species"),u=Array;t.exports=function(t){var e;return n(t)&&(e=t.constructor,(o(e)&&(e===u||n(e.prototype))||i(e)&&null===(e=e[a]))&&(e=void 0)),void 0===e?u:e}},4551:(t,e,r)=>{var n=r(9703);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},8901:(t,e,r)=>{var n=r(2293),o=r(6721);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},1554:(t,e,r)=>{var n=r(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){try{if(!e&&!o)return!1}catch(t){return!1}var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},1278:(t,e,r)=>{var n=r(4762),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},6145:(t,e,r)=>{var n=r(4338),o=r(1483),i=r(1278),a=r(1)("toStringTag"),u=Object,c="Arguments"===i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=u(t),a))?r:c?i(e):"Object"===(n=i(e))&&o(e.callee)?"Arguments":n}},4092:(t,e,r)=>{var n=r(5290),o=r(3864),i=r(2313),a=r(2914),u=r(6021),c=r(5983),s=r(1506),f=r(5662),l=r(5247),v=r(240),p=r(382),h=r(8041).fastKey,y=r(4483),d=y.set,g=y.getterFor;t.exports={getConstructor:function(t,e,r,f){var l=t((function(t,o){u(t,v),d(t,{type:e,index:n(null),first:void 0,last:void 0,size:0}),p||(t.size=0),c(o)||s(o,t[f],{that:t,AS_ENTRIES:r})})),v=l.prototype,y=g(e),b=function(t,e,r){var n,o,i=y(t),a=m(t,e);return a?a.value=r:(i.last=a={index:o=h(e,!0),key:e,value:r,previous:n=i.last,next:void 0,removed:!1},i.first||(i.first=a),n&&(n.next=a),p?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},m=function(t,e){var r,n=y(t),o=h(e);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key===e)return r};return i(v,{clear:function(){for(var t=y(this),e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=void 0),e=e.next;t.first=t.last=void 0,t.index=n(null),p?t.size=0:this.size=0},delete:function(t){var e=this,r=y(e),n=m(e,t);if(n){var o=n.next,i=n.previous;delete r.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),r.first===n&&(r.first=o),r.last===n&&(r.last=i),p?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=y(this),n=a(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!m(this,t)}}),i(v,r?{get:function(t){var e=m(this,t);return e&&e.value},set:function(t,e){return b(this,0===t?0:t,e)}}:{add:function(t){return b(this,t=0===t?0:t,t)}}),p&&o(v,"size",{configurable:!0,get:function(){return y(this).size}}),l},setStrong:function(t,e,r){var n=e+" Iterator",o=g(e),i=g(n);f(t,e,(function(t,e){d(this,{type:n,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=i(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?l("keys"===e?r.key:"values"===e?r.value:[r.key,r.value],!1):(t.target=void 0,l(void 0,!0))}),r?"entries":"values",!r,!0),v(e)}}},7446:(t,e,r)=>{var n=r(8612),o=r(8389),i=r(4762),a=r(8730),u=r(7914),c=r(8041),s=r(1506),f=r(6021),l=r(1483),v=r(5983),p=r(1704),h=r(8473),y=r(1554),d=r(2277),g=r(2429);t.exports=function(t,e,r){var b=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),x=b?"set":"add",w=o[t],S=w&&w.prototype,O=w,E={},k=function(t){var e=i(S[t]);u(S,t,"add"===t?function(t){return e(this,0===t?0:t),this}:"delete"===t?function(t){return!(m&&!p(t))&&e(this,0===t?0:t)}:"get"===t?function(t){return m&&!p(t)?void 0:e(this,0===t?0:t)}:"has"===t?function(t){return!(m&&!p(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(a(t,!l(w)||!(m||S.forEach&&!h((function(){(new w).entries().next()})))))O=r.getConstructor(e,t,b,x),c.enable();else if(a(t,!0)){var j=new O,A=j[x](m?{}:-0,1)!==j,P=h((function(){j.has(1)})),I=y((function(t){new w(t)})),T=!m&&h((function(){for(var t=new w,e=5;e--;)t[x](e,e);return!t.has(-0)}));I||((O=e((function(t,e){f(t,S);var r=g(new w,t,O);return v(e)||s(e,r[x],{that:r,AS_ENTRIES:b}),r}))).prototype=S,S.constructor=O),(P||T)&&(k("delete"),k("has"),b&&k("get")),(T||A)&&k(x),m&&S.clear&&delete S.clear}return E[t]=O,n({global:!0,constructor:!0,forced:O!==w},E),d(O,t),m||r.setStrong(O,t,b),O}},6726:(t,e,r)=>{var n=r(5755),o=r(9497),i=r(4961),a=r(5835);t.exports=function(t,e,r){for(var u=o(e),c=a.f,s=i.f,f=0;f<u.length;f++){var l=u[f];n(t,l)||r&&n(r,l)||c(t,l,s(e,l))}}},4522:(t,e,r)=>{var n=r(1)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},9441:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},5247:t=>{t.exports=function(t,e){return{value:t,done:e}}},9037:(t,e,r)=>{var n=r(382),o=r(5835),i=r(7738);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},7738:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},670:(t,e,r)=>{var n=r(382),o=r(5835),i=r(7738);t.exports=function(t,e,r){n?o.f(t,e,i(0,r)):t[e]=r}},6446:(t,e,r)=>{var n=r(2293),o=r(348),i=TypeError;t.exports=function(t){if(n(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw new i("Incorrect hint");return o(this,t)}},3864:(t,e,r)=>{var n=r(169),o=r(5835);t.exports=function(t,e,r){return r.get&&n(r.get,e,{getter:!0}),r.set&&n(r.set,e,{setter:!0}),o.f(t,e,r)}},7914:(t,e,r)=>{var n=r(1483),o=r(5835),i=r(169),a=r(2095);t.exports=function(t,e,r,u){u||(u={});var c=u.enumerable,s=void 0!==u.name?u.name:e;if(n(r)&&i(r,s,u),u.global)c?t[e]=r:a(e,r);else{try{u.unsafe?t[e]&&(c=!0):delete t[e]}catch(t){}c?t[e]=r:o.f(t,e,{value:r,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return t}},2313:(t,e,r)=>{var n=r(7914);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},2095:(t,e,r)=>{var n=r(8389),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},382:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},3145:(t,e,r)=>{var n=r(8389),o=r(1704),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},1091:t=>{var e=TypeError;t.exports=function(t){if(t>9007199254740991)throw e("Maximum allowed index exceeded");return t}},4842:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},1902:(t,e,r)=>{var n=r(3145)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},9966:t=>{t.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},6170:(t,e,r)=>{var n,o,i=r(8389),a=r(9966),u=i.process,c=i.Deno,s=u&&u.versions||c&&c.version,f=s&&s.v8;f&&(o=(n=f.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},4741:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},8612:(t,e,r)=>{var n=r(8389),o=r(4961).f,i=r(9037),a=r(7914),u=r(2095),c=r(6726),s=r(8730);t.exports=function(t,e){var r,f,l,v,p,h=t.target,y=t.global,d=t.stat;if(r=y?n:d?n[h]||u(h,{}):n[h]&&n[h].prototype)for(f in e){if(v=e[f],l=t.dontCallGetSet?(p=o(r,f))&&p.value:r[f],!s(y?f:h+(d?".":"#")+f,t.forced)&&void 0!==l){if(typeof v==typeof l)continue;c(v,l)}(t.sham||l&&l.sham)&&i(v,"sham",!0),a(r,f,v,t)}}},8473:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},3358:(t,e,r)=>{r(5021);var n=r(1807),o=r(7914),i=r(8865),a=r(8473),u=r(1),c=r(9037),s=u("species"),f=RegExp.prototype;t.exports=function(t,e,r,l){var v=u(t),p=!a((function(){var e={};return e[v]=function(){return 7},7!==""[t](e)})),h=p&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[v]=/./[v]),r.exec=function(){return e=!0,null},r[v](""),!e}));if(!p||!h||r){var y=/./[v],d=e(v,""[t],(function(t,e,r,o,a){var u=e.exec;return u===i||u===f.exec?p&&!a?{done:!0,value:n(y,e,r,o)}:{done:!0,value:n(t,r,e,o)}:{done:!1}}));o(String.prototype,t,d[0]),o(f,v,d[1])}l&&c(f[v],"sham",!0)}},6530:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},3067:(t,e,r)=>{var n=r(274),o=Function.prototype,i=o.apply,a=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},2914:(t,e,r)=>{var n=r(3786),o=r(8120),i=r(274),a=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}}},274:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},2164:(t,e,r)=>{var n=r(4762),o=r(8120),i=r(1704),a=r(5755),u=r(1698),c=r(274),s=Function,f=n([].concat),l=n([].join),v={};t.exports=c?s.bind:function(t){var e=o(this),r=e.prototype,n=u(arguments,1),c=function(){var r=f(n,u(arguments));return this instanceof c?function(t,e,r){if(!a(v,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";v[e]=s("C,a","return new C("+l(n,",")+")")}return v[e](t,r)}(e,r.length,r):e.apply(t,r)};return i(r)&&(c.prototype=r),c}},1807:(t,e,r)=>{var n=r(274),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},2048:(t,e,r)=>{var n=r(382),o=r(5755),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,u=o(i,"name"),c=u&&"something"===function(){}.name,s=u&&(!n||n&&a(i,"name").configurable);t.exports={EXISTS:u,PROPER:c,CONFIGURABLE:s}},680:(t,e,r)=>{var n=r(4762),o=r(8120);t.exports=function(t,e,r){try{return n(o(Object.getOwnPropertyDescriptor(t,e)[r]))}catch(t){}}},3786:(t,e,r)=>{var n=r(1278),o=r(4762);t.exports=function(t){if("Function"===n(t))return o(t)}},4762:(t,e,r)=>{var n=r(274),o=Function.prototype,i=o.call,a=n&&o.bind.bind(i,i);t.exports=n?a:function(t){return function(){return i.apply(t,arguments)}}},1409:(t,e,r)=>{var n=r(8389),o=r(1483);t.exports=function(t,e){return arguments.length<2?(r=n[t],o(r)?r:void 0):n[t]&&n[t][e];var r}},6665:(t,e,r)=>{var n=r(6145),o=r(2564),i=r(5983),a=r(6775),u=r(1)("iterator");t.exports=function(t){if(!i(t))return o(t,u)||o(t,"@@iterator")||a[n(t)]}},4887:(t,e,r)=>{var n=r(1807),o=r(8120),i=r(2293),a=r(8761),u=r(6665),c=TypeError;t.exports=function(t,e){var r=arguments.length<2?u(t):e;if(o(r))return i(n(r,t));throw new c(a(t)+" is not iterable")}},5215:(t,e,r)=>{var n=r(4762),o=r(4914),i=r(1483),a=r(1278),u=r(6261),c=n([].push);t.exports=function(t){if(i(t))return t;if(o(t)){for(var e=t.length,r=[],n=0;n<e;n++){var s=t[n];"string"==typeof s?c(r,s):"number"!=typeof s&&"Number"!==a(s)&&"String"!==a(s)||c(r,u(s))}var f=r.length,l=!0;return function(t,e){if(l)return l=!1,e;if(o(this))return e;for(var n=0;n<f;n++)if(r[n]===t)return e}}}},2564:(t,e,r)=>{var n=r(8120),o=r(5983);t.exports=function(t,e){var r=t[e];return o(r)?void 0:n(r)}},708:(t,e,r)=>{var n=r(4762),o=r(2347),i=Math.floor,a=n("".charAt),u=n("".replace),c=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,f=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,n,l,v){var p=r+t.length,h=n.length,y=f;return void 0!==l&&(l=o(l),y=s),u(v,y,(function(o,u){var s;switch(a(u,0)){case"$":return"$";case"&":return t;case"`":return c(e,0,r);case"'":return c(e,p);case"<":s=l[c(u,1,-1)];break;default:var f=+u;if(0===f)return o;if(f>h){var v=i(f/10);return 0===v?o:v<=h?void 0===n[v-1]?a(u,1):n[v-1]+a(u,1):o}s=n[f-1]}return void 0===s?"":s}))}},8389:function(t,e,r){var n=function(t){return t&&t.Math===Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||n("object"==typeof this&&this)||function(){return this}()||Function("return this")()},5755:(t,e,r)=>{var n=r(4762),o=r(2347),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},1507:t=>{t.exports={}},2811:(t,e,r)=>{var n=r(1409);t.exports=n("document","documentElement")},1799:(t,e,r)=>{var n=r(382),o=r(8473),i=r(3145);t.exports=!n&&!o((function(){return 7!==Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},2121:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1278),a=Object,u=n("".split);t.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(t){return"String"===i(t)?u(t,""):a(t)}:a},2429:(t,e,r)=>{var n=r(1483),o=r(1704),i=r(1953);t.exports=function(t,e,r){var a,u;return i&&n(a=e.constructor)&&a!==r&&o(u=a.prototype)&&u!==r.prototype&&i(t,u),t}},7268:(t,e,r)=>{var n=r(4762),o=r(1483),i=r(1831),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},8041:(t,e,r)=>{var n=r(8612),o=r(4762),i=r(1507),a=r(1704),u=r(5755),c=r(5835).f,s=r(2278),f=r(2020),l=r(706),v=r(1866),p=r(6530),h=!1,y=v("meta"),d=0,g=function(t){c(t,y,{value:{objectID:"O"+d++,weakData:{}}})},b=t.exports={enable:function(){b.enable=function(){},h=!0;var t=s.f,e=o([].splice),r={};r[y]=1,t(r).length&&(s.f=function(r){for(var n=t(r),o=0,i=n.length;o<i;o++)if(n[o]===y){e(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:f.f}))},fastKey:function(t,e){if(!a(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,y)){if(!l(t))return"F";if(!e)return"E";g(t)}return t[y].objectID},getWeakData:function(t,e){if(!u(t,y)){if(!l(t))return!0;if(!e)return!1;g(t)}return t[y].weakData},onFreeze:function(t){return p&&h&&l(t)&&!u(t,y)&&g(t),t}};i[y]=!0},4483:(t,e,r)=>{var n,o,i,a=r(4644),u=r(8389),c=r(1704),s=r(9037),f=r(5755),l=r(1831),v=r(5409),p=r(1507),h="Object already initialized",y=u.TypeError,d=u.WeakMap;if(a||l.state){var g=l.state||(l.state=new d);g.get=g.get,g.has=g.has,g.set=g.set,n=function(t,e){if(g.has(t))throw new y(h);return e.facade=t,g.set(t,e),e},o=function(t){return g.get(t)||{}},i=function(t){return g.has(t)}}else{var b=v("state");p[b]=!0,n=function(t,e){if(f(t,b))throw new y(h);return e.facade=t,s(t,b,e),e},o=function(t){return f(t,b)?t[b]:{}},i=function(t){return f(t,b)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!c(e)||(r=o(e)).type!==t)throw new y("Incompatible receiver, "+t+" required");return r}}}},5299:(t,e,r)=>{var n=r(1),o=r(6775),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},4914:(t,e,r)=>{var n=r(1278);t.exports=Array.isArray||function(t){return"Array"===n(t)}},1483:t=>{var e="object"==typeof document&&document.all;t.exports=void 0===e&&void 0!==e?function(t){return"function"==typeof t||t===e}:function(t){return"function"==typeof t}},943:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1483),a=r(6145),u=r(1409),c=r(7268),s=function(){},f=u("Reflect","construct"),l=/^\s*(?:class|function)\b/,v=n(l.exec),p=!l.test(s),h=function(t){if(!i(t))return!1;try{return f(s,[],t),!0}catch(t){return!1}},y=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return p||!!v(l,c(t))}catch(t){return!0}};y.sham=!0,t.exports=!f||o((function(){var t;return h(h.call)||!h(Object)||!h((function(){t=!0}))||t}))?y:h},8730:(t,e,r)=>{var n=r(8473),o=r(1483),i=/#|\.prototype\./,a=function(t,e){var r=c[u(t)];return r===f||r!==s&&(o(e)?n(e):!!e)},u=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},c=a.data={},s=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},5983:t=>{t.exports=function(t){return null==t}},1704:(t,e,r)=>{var n=r(1483);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},735:(t,e,r)=>{var n=r(1704);t.exports=function(t){return n(t)||null===t}},9557:t=>{t.exports=!1},4786:(t,e,r)=>{var n=r(1704),o=r(1278),i=r(1)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"===o(t))}},1423:(t,e,r)=>{var n=r(1409),o=r(1483),i=r(4815),a=r(5022),u=Object;t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return o(e)&&i(e.prototype,u(t))}},1506:(t,e,r)=>{var n=r(2914),o=r(1807),i=r(2293),a=r(8761),u=r(5299),c=r(6960),s=r(4815),f=r(4887),l=r(6665),v=r(6721),p=TypeError,h=function(t,e){this.stopped=t,this.result=e},y=h.prototype;t.exports=function(t,e,r){var d,g,b,m,x,w,S,O=r&&r.that,E=!(!r||!r.AS_ENTRIES),k=!(!r||!r.IS_RECORD),j=!(!r||!r.IS_ITERATOR),A=!(!r||!r.INTERRUPTED),P=n(e,O),I=function(t){return d&&v(d,"normal",t),new h(!0,t)},T=function(t){return E?(i(t),A?P(t[0],t[1],I):P(t[0],t[1])):A?P(t,I):P(t)};if(k)d=t.iterator;else if(j)d=t;else{if(!(g=l(t)))throw new p(a(t)+" is not iterable");if(u(g)){for(b=0,m=c(t);m>b;b++)if((x=T(t[b]))&&s(y,x))return x;return new h(!1)}d=f(t,g)}for(w=k?t.next:d.next;!(S=o(w,d)).done;){try{x=T(S.value)}catch(t){v(d,"throw",t)}if("object"==typeof x&&x&&s(y,x))return x}return new h(!1)}},6721:(t,e,r)=>{var n=r(1807),o=r(2293),i=r(2564);t.exports=function(t,e,r){var a,u;o(t);try{if(!(a=i(t,"return"))){if("throw"===e)throw r;return r}a=n(a,t)}catch(t){u=!0,a=t}if("throw"===e)throw r;if(u)throw a;return o(a),r}},1040:(t,e,r)=>{var n=r(1851).IteratorPrototype,o=r(5290),i=r(7738),a=r(2277),u=r(6775),c=function(){return this};t.exports=function(t,e,r,s){var f=e+" Iterator";return t.prototype=o(n,{next:i(+!s,r)}),a(t,f,!1,!0),u[f]=c,t}},5662:(t,e,r)=>{var n=r(8612),o=r(1807),i=r(9557),a=r(2048),u=r(1483),c=r(1040),s=r(3181),f=r(1953),l=r(2277),v=r(9037),p=r(7914),h=r(1),y=r(6775),d=r(1851),g=a.PROPER,b=a.CONFIGURABLE,m=d.IteratorPrototype,x=d.BUGGY_SAFARI_ITERATORS,w=h("iterator"),S="keys",O="values",E="entries",k=function(){return this};t.exports=function(t,e,r,a,h,d,j){c(r,e,a);var A,P,I,T=function(t){if(t===h&&D)return D;if(!x&&t&&t in N)return N[t];switch(t){case S:case O:case E:return function(){return new r(this,t)}}return function(){return new r(this)}},C=e+" Iterator",R=!1,N=t.prototype,_=N[w]||N["@@iterator"]||h&&N[h],D=!x&&_||T(h),F="Array"===e&&N.entries||_;if(F&&(A=s(F.call(new t)))!==Object.prototype&&A.next&&(i||s(A)===m||(f?f(A,m):u(A[w])||p(A,w,k)),l(A,C,!0,!0),i&&(y[C]=k)),g&&h===O&&_&&_.name!==O&&(!i&&b?v(N,"name",O):(R=!0,D=function(){return o(_,this)})),h)if(P={values:T(O),keys:d?D:T(S),entries:T(E)},j)for(I in P)(x||R||!(I in N))&&p(N,I,P[I]);else n({target:e,proto:!0,forced:x||R},P);return i&&!j||N[w]===D||p(N,w,D,{name:h}),y[e]=D,P}},1851:(t,e,r)=>{var n,o,i,a=r(8473),u=r(1483),c=r(1704),s=r(5290),f=r(3181),l=r(7914),v=r(1),p=r(9557),h=v("iterator"),y=!1;[].keys&&("next"in(i=[].keys())?(o=f(f(i)))!==Object.prototype&&(n=o):y=!0),!c(n)||a((function(){var t={};return n[h].call(t)!==t}))?n={}:p&&(n=s(n)),u(n[h])||l(n,h,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:y}},6775:t=>{t.exports={}},6960:(t,e,r)=>{var n=r(8324);t.exports=function(t){return n(t.length)}},169:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1483),a=r(5755),u=r(382),c=r(2048).CONFIGURABLE,s=r(7268),f=r(4483),l=f.enforce,v=f.get,p=String,h=Object.defineProperty,y=n("".slice),d=n("".replace),g=n([].join),b=u&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),m=String(String).split("String"),x=t.exports=function(t,e,r){"Symbol("===y(p(e),0,7)&&(e="["+d(p(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),r&&r.getter&&(e="get "+e),r&&r.setter&&(e="set "+e),(!a(t,"name")||c&&t.name!==e)&&(u?h(t,"name",{value:e,configurable:!0}):t.name=e),b&&r&&a(r,"arity")&&t.length!==r.arity&&h(t,"length",{value:r.arity});try{r&&a(r,"constructor")&&r.constructor?u&&h(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var n=l(t);return a(n,"source")||(n.source=g(m,"string"==typeof e?e:"")),t};Function.prototype.toString=x((function(){return i(this)&&v(this).source||s(this)}),"toString")},1703:t=>{var e=Math.ceil,r=Math.floor;t.exports=Math.trunc||function(t){var n=+t;return(n>0?r:e)(n)}},4989:(t,e,r)=>{var n=r(4786),o=TypeError;t.exports=function(t){if(n(t))throw new o("The method doesn't accept regular expressions");return t}},5290:(t,e,r)=>{var n,o=r(2293),i=r(5799),a=r(4741),u=r(1507),c=r(2811),s=r(3145),f=r(5409),l="prototype",v="script",p=f("IE_PROTO"),h=function(){},y=function(t){return"<"+v+">"+t+"</"+v+">"},d=function(t){t.write(y("")),t.close();var e=t.parentWindow.Object;return t=null,e},g=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e,r;g="undefined"!=typeof document?document.domain&&n?d(n):(e=s("iframe"),r="java"+v+":",e.style.display="none",c.appendChild(e),e.src=String(r),(t=e.contentWindow.document).open(),t.write(y("document.F=Object")),t.close(),t.F):d(n);for(var o=a.length;o--;)delete g[l][a[o]];return g()};u[p]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h[l]=o(t),r=new h,h[l]=null,r[p]=t):r=g(),void 0===e?r:i.f(r,e)}},5799:(t,e,r)=>{var n=r(382),o=r(3896),i=r(5835),a=r(2293),u=r(5599),c=r(3658);e.f=n&&!o?Object.defineProperties:function(t,e){a(t);for(var r,n=u(e),o=c(e),s=o.length,f=0;s>f;)i.f(t,r=o[f++],n[r]);return t}},5835:(t,e,r)=>{var n=r(382),o=r(1799),i=r(3896),a=r(2293),u=r(3815),c=TypeError,s=Object.defineProperty,f=Object.getOwnPropertyDescriptor,l="enumerable",v="configurable",p="writable";e.f=n?i?function(t,e,r){if(a(t),e=u(e),a(r),"function"==typeof t&&"prototype"===e&&"value"in r&&p in r&&!r[p]){var n=f(t,e);n&&n[p]&&(t[e]=r.value,r={configurable:v in r?r[v]:n[v],enumerable:l in r?r[l]:n[l],writable:!1})}return s(t,e,r)}:s:function(t,e,r){if(a(t),e=u(e),a(r),o)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw new c("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},4961:(t,e,r)=>{var n=r(382),o=r(1807),i=r(7611),a=r(7738),u=r(5599),c=r(3815),s=r(5755),f=r(1799),l=Object.getOwnPropertyDescriptor;e.f=n?l:function(t,e){if(t=u(t),e=c(e),f)try{return l(t,e)}catch(t){}if(s(t,e))return a(!o(i.f,t,e),t[e])}},2020:(t,e,r)=>{var n=r(1278),o=r(5599),i=r(2278).f,a=r(1698),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"Window"===n(t)?function(t){try{return i(t)}catch(t){return a(u)}}(t):i(o(t))}},2278:(t,e,r)=>{var n=r(6742),o=r(4741).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},4347:(t,e)=>{e.f=Object.getOwnPropertySymbols},3181:(t,e,r)=>{var n=r(5755),o=r(1483),i=r(2347),a=r(5409),u=r(9441),c=a("IE_PROTO"),s=Object,f=s.prototype;t.exports=u?s.getPrototypeOf:function(t){var e=i(t);if(n(e,c))return e[c];var r=e.constructor;return o(r)&&e instanceof r?r.prototype:e instanceof s?f:null}},706:(t,e,r)=>{var n=r(8473),o=r(1704),i=r(1278),a=r(9214),u=Object.isExtensible,c=n((function(){u(1)}));t.exports=c||a?function(t){return!!o(t)&&(!a||"ArrayBuffer"!==i(t))&&(!u||u(t))}:u},4815:(t,e,r)=>{var n=r(4762);t.exports=n({}.isPrototypeOf)},6742:(t,e,r)=>{var n=r(4762),o=r(5755),i=r(5599),a=r(6651).indexOf,u=r(1507),c=n([].push);t.exports=function(t,e){var r,n=i(t),s=0,f=[];for(r in n)!o(u,r)&&o(n,r)&&c(f,r);for(;e.length>s;)o(n,r=e[s++])&&(~a(f,r)||c(f,r));return f}},3658:(t,e,r)=>{var n=r(6742),o=r(4741);t.exports=Object.keys||function(t){return n(t,o)}},7611:(t,e)=>{var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},1953:(t,e,r)=>{var n=r(680),o=r(2293),i=r(3852);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.prototype,"__proto__","set"))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),i(n),e?t(r,n):r.__proto__=n,r}}():void 0)},5627:(t,e,r)=>{var n=r(382),o=r(8473),i=r(4762),a=r(3181),u=r(3658),c=r(5599),s=i(r(7611).f),f=i([].push),l=n&&o((function(){var t=Object.create(null);return t[2]=2,!s(t,2)})),v=function(t){return function(e){for(var r,o=c(e),i=u(o),v=l&&null===a(o),p=i.length,h=0,y=[];p>h;)r=i[h++],n&&!(v?r in o:s(o,r))||f(y,t?[r,o[r]]:o[r]);return y}};t.exports={entries:v(!0),values:v(!1)}},5685:(t,e,r)=>{var n=r(4338),o=r(6145);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},348:(t,e,r)=>{var n=r(1807),o=r(1483),i=r(1704),a=TypeError;t.exports=function(t,e){var r,u;if("string"===e&&o(r=t.toString)&&!i(u=n(r,t)))return u;if(o(r=t.valueOf)&&!i(u=n(r,t)))return u;if("string"!==e&&o(r=t.toString)&&!i(u=n(r,t)))return u;throw new a("Can't convert object to primitive value")}},9497:(t,e,r)=>{var n=r(1409),o=r(4762),i=r(2278),a=r(4347),u=r(2293),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(u(t)),r=a.f;return r?c(e,r(t)):e}},6589:(t,e,r)=>{var n=r(8389);t.exports=n},7150:(t,e,r)=>{var n=r(5835).f;t.exports=function(t,e,r){r in t||n(t,r,{configurable:!0,get:function(){return e[r]},set:function(t){e[r]=t}})}},2428:(t,e,r)=>{var n=r(1807),o=r(2293),i=r(1483),a=r(1278),u=r(8865),c=TypeError;t.exports=function(t,e){var r=t.exec;if(i(r)){var s=n(r,t,e);return null!==s&&o(s),s}if("RegExp"===a(t))return n(u,t,e);throw new c("RegExp#exec called on incompatible receiver")}},8865:(t,e,r)=>{var n,o,i=r(1807),a=r(4762),u=r(6261),c=r(6653),s=r(7435),f=r(7255),l=r(5290),v=r(4483).get,p=r(3933),h=r(4528),y=f("native-string-replace",String.prototype.replace),d=RegExp.prototype.exec,g=d,b=a("".charAt),m=a("".indexOf),x=a("".replace),w=a("".slice),S=(o=/b*/g,i(d,n=/a/,"a"),i(d,o,"a"),0!==n.lastIndex||0!==o.lastIndex),O=s.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(S||E||O||p||h)&&(g=function(t){var e,r,n,o,a,s,f,p=this,h=v(p),k=u(t),j=h.raw;if(j)return j.lastIndex=p.lastIndex,e=i(g,j,k),p.lastIndex=j.lastIndex,e;var A=h.groups,P=O&&p.sticky,I=i(c,p),T=p.source,C=0,R=k;if(P&&(I=x(I,"y",""),-1===m(I,"g")&&(I+="g"),R=w(k,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==b(k,p.lastIndex-1))&&(T="(?: "+T+")",R=" "+R,C++),r=new RegExp("^(?:"+T+")",I)),E&&(r=new RegExp("^"+T+"$(?!\\s)",I)),S&&(n=p.lastIndex),o=i(d,P?r:p,R),P?o?(o.input=w(o.input,C),o[0]=w(o[0],C),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:S&&o&&(p.lastIndex=p.global?o.index+o[0].length:n),E&&o&&o.length>1&&i(y,o[0],r,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&A)for(o.groups=s=l(null),a=0;a<A.length;a++)s[(f=A[a])[0]]=o[f[1]];return o}),t.exports=g},6653:(t,e,r)=>{var n=r(2293);t.exports=function(){var t=n(this),e="";return t.hasIndices&&(e+="d"),t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.unicodeSets&&(e+="v"),t.sticky&&(e+="y"),e}},9736:(t,e,r)=>{var n=r(1807),o=r(5755),i=r(4815),a=r(6653),u=RegExp.prototype;t.exports=function(t){var e=t.flags;return void 0!==e||"flags"in u||o(t,"flags")||!i(u,t)?e:n(a,t)}},7435:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp,i=n((function(){var t=o("a","y");return t.lastIndex=2,null!==t.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),u=i||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!==t.exec("str")}));t.exports={BROKEN_CARET:u,MISSED_STICKY:a,UNSUPPORTED_Y:i}},3933:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.test("\n")&&"s"===t.flags)}))},4528:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},3312:(t,e,r)=>{var n=r(5983),o=TypeError;t.exports=function(t){if(n(t))throw new o("Can't call method on "+t);return t}},240:(t,e,r)=>{var n=r(1409),o=r(3864),i=r(1),a=r(382),u=i("species");t.exports=function(t){var e=n(t);a&&e&&!e[u]&&o(e,u,{configurable:!0,get:function(){return this}})}},2277:(t,e,r)=>{var n=r(5835).f,o=r(5755),i=r(1)("toStringTag");t.exports=function(t,e,r){t&&!r&&(t=t.prototype),t&&!o(t,i)&&n(t,i,{configurable:!0,value:e})}},5409:(t,e,r)=>{var n=r(7255),o=r(1866),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},1831:(t,e,r)=>{var n=r(9557),o=r(8389),i=r(2095),a="__core-js_shared__",u=t.exports=o[a]||i(a,{});(u.versions||(u.versions=[])).push({version:"3.36.0",mode:n?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.0/LICENSE",source:"https://github.com/zloirock/core-js"})},7255:(t,e,r)=>{var n=r(1831);t.exports=function(t,e){return n[t]||(n[t]=e||{})}},9105:(t,e,r)=>{var n=r(4762),o=r(3005),i=r(6261),a=r(3312),u=n("".charAt),c=n("".charCodeAt),s=n("".slice),f=function(t){return function(e,r){var n,f,l=i(a(e)),v=o(r),p=l.length;return v<0||v>=p?t?"":void 0:(n=c(l,v))<55296||n>56319||v+1===p||(f=c(l,v+1))<56320||f>57343?t?u(l,v):n:t?s(l,v,v+2):f-56320+(n-55296<<10)+65536}};t.exports={codeAt:f(!1),charAt:f(!0)}},4544:(t,e,r)=>{var n=r(4762),o=r(3312),i=r(6261),a=r(5870),u=n("".replace),c=RegExp("^["+a+"]+"),s=RegExp("(^|[^"+a+"])["+a+"]+$"),f=function(t){return function(e){var r=i(o(e));return 1&t&&(r=u(r,c,"")),2&t&&(r=u(r,s,"$1")),r}};t.exports={start:f(1),end:f(2),trim:f(3)}},6029:(t,e,r)=>{var n=r(6170),o=r(8473),i=r(8389).String;t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol("symbol detection");return!i(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},8192:(t,e,r)=>{var n=r(1807),o=r(1409),i=r(1),a=r(7914);t.exports=function(){var t=o("Symbol"),e=t&&t.prototype,r=e&&e.valueOf,u=i("toPrimitive");e&&!e[u]&&a(e,u,(function(t){return n(r,this)}),{arity:1})}},3218:(t,e,r)=>{var n=r(6029);t.exports=n&&!!Symbol.for&&!!Symbol.keyFor},2430:(t,e,r)=>{var n=r(4762);t.exports=n(1..valueOf)},3392:(t,e,r)=>{var n=r(3005),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},5599:(t,e,r)=>{var n=r(2121),o=r(3312);t.exports=function(t){return n(o(t))}},3005:(t,e,r)=>{var n=r(1703);t.exports=function(t){var e=+t;return e!=e||0===e?0:n(e)}},8324:(t,e,r)=>{var n=r(3005),o=Math.min;t.exports=function(t){var e=n(t);return e>0?o(e,9007199254740991):0}},2347:(t,e,r)=>{var n=r(3312),o=Object;t.exports=function(t){return o(n(t))}},2355:(t,e,r)=>{var n=r(1807),o=r(1704),i=r(1423),a=r(2564),u=r(348),c=r(1),s=TypeError,f=c("toPrimitive");t.exports=function(t,e){if(!o(t)||i(t))return t;var r,c=a(t,f);if(c){if(void 0===e&&(e="default"),r=n(c,t,e),!o(r)||i(r))return r;throw new s("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},3815:(t,e,r)=>{var n=r(2355),o=r(1423);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},4338:(t,e,r)=>{var n={};n[r(1)("toStringTag")]="z",t.exports="[object z]"===String(n)},6261:(t,e,r)=>{var n=r(6145),o=String;t.exports=function(t){if("Symbol"===n(t))throw new TypeError("Cannot convert a Symbol value to a string");return o(t)}},8761:t=>{var e=String;t.exports=function(t){try{return e(t)}catch(t){return"Object"}}},1866:(t,e,r)=>{var n=r(4762),o=0,i=Math.random(),a=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},5022:(t,e,r)=>{var n=r(6029);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3896:(t,e,r)=>{var n=r(382),o=r(8473);t.exports=n&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4644:(t,e,r)=>{var n=r(8389),o=r(1483),i=n.WeakMap;t.exports=o(i)&&/native code/.test(String(i))},7849:(t,e,r)=>{var n=r(6589),o=r(5755),i=r(5373),a=r(5835).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},5373:(t,e,r)=>{var n=r(1);e.f=n},1:(t,e,r)=>{var n=r(8389),o=r(7255),i=r(5755),a=r(1866),u=r(6029),c=r(5022),s=n.Symbol,f=o("wks"),l=c?s.for||s:s&&s.withoutSetter||a;t.exports=function(t){return i(f,t)||(f[t]=u&&i(s,t)?s[t]:l("Symbol."+t)),f[t]}},5870:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},4776:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(4914),a=r(1704),u=r(2347),c=r(6960),s=r(1091),f=r(670),l=r(4551),v=r(4595),p=r(1),h=r(6170),y=p("isConcatSpreadable"),d=h>=51||!o((function(){var t=[];return t[y]=!1,t.concat()[0]!==t})),g=function(t){if(!a(t))return!1;var e=t[y];return void 0!==e?!!e:i(t)};n({target:"Array",proto:!0,arity:1,forced:!d||!v("concat")},{concat:function(t){var e,r,n,o,i,a=u(this),v=l(a,0),p=0;for(e=-1,n=arguments.length;e<n;e++)if(g(i=-1===e?a:arguments[e]))for(o=c(i),s(p+o),r=0;r<o;r++,p++)r in i&&f(v,p,i[r]);else s(p+1),f(v,p++,i);return v.length=p,v}})},4382:(t,e,r)=>{var n=r(8612),o=r(2867).filter;n({target:"Array",proto:!0,forced:!r(4595)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9892:(t,e,r)=>{var n=r(8612),o=r(6142);n({target:"Array",stat:!0,forced:!r(1554)((function(t){Array.from(t)}))},{from:o})},6281:(t,e,r)=>{var n=r(8612),o=r(6651).includes,i=r(8473),a=r(7095);n({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a("includes")},4962:(t,e,r)=>{var n=r(5599),o=r(7095),i=r(6775),a=r(4483),u=r(5835).f,c=r(5662),s=r(5247),f=r(9557),l=r(382),v="Array Iterator",p=a.set,h=a.getterFor(v);t.exports=c(Array,"Array",(function(t,e){p(this,{type:v,target:n(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=void 0,s(void 0,!0);switch(t.kind){case"keys":return s(r,!1);case"values":return s(e[r],!1)}return s([r,e[r]],!1)}),"values");var y=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!f&&l&&"values"!==y.name)try{u(y,"name",{value:"values"})}catch(t){}},6584:(t,e,r)=>{var n=r(8612),o=r(2867).map;n({target:"Array",proto:!0,forced:!r(4595)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9336:(t,e,r)=>{var n=r(8612),o=r(4914),i=r(943),a=r(1704),u=r(3392),c=r(6960),s=r(5599),f=r(670),l=r(1),v=r(4595),p=r(1698),h=v("slice"),y=l("species"),d=Array,g=Math.max;n({target:"Array",proto:!0,forced:!h},{slice:function(t,e){var r,n,l,v=s(this),h=c(v),b=u(t,h),m=u(void 0===e?h:e,h);if(o(v)&&(r=v.constructor,(i(r)&&(r===d||o(r.prototype))||a(r)&&null===(r=r[y]))&&(r=void 0),r===d||void 0===r))return p(v,b,m);for(n=new(void 0===r?d:r)(g(m-b,0)),l=0;b<m;b++,l++)b in v&&f(n,l,v[b]);return n.length=l,n}})},4754:(t,e,r)=>{var n=r(5755),o=r(7914),i=r(6446),a=r(1)("toPrimitive"),u=Date.prototype;n(u,a)||o(u,a,i)},1908:(t,e,r)=>{var n=r(382),o=r(2048).EXISTS,i=r(4762),a=r(3864),u=Function.prototype,c=i(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,f=i(s.exec);n&&!o&&a(u,"name",{configurable:!0,get:function(){try{return f(s,c(this))[1]}catch(t){return""}}})},6184:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(3067),a=r(1807),u=r(4762),c=r(8473),s=r(1483),f=r(1423),l=r(1698),v=r(5215),p=r(6029),h=String,y=o("JSON","stringify"),d=u(/./.exec),g=u("".charAt),b=u("".charCodeAt),m=u("".replace),x=u(1..toString),w=/[\uD800-\uDFFF]/g,S=/^[\uD800-\uDBFF]$/,O=/^[\uDC00-\uDFFF]$/,E=!p||c((function(){var t=o("Symbol")("stringify detection");return"[null]"!==y([t])||"{}"!==y({a:t})||"{}"!==y(Object(t))})),k=c((function(){return'"\\udf06\\ud834"'!==y("\udf06\ud834")||'"\\udead"'!==y("\udead")})),j=function(t,e){var r=l(arguments),n=v(e);if(s(n)||void 0!==t&&!f(t))return r[1]=function(t,e){if(s(n)&&(e=a(n,this,h(t),e)),!f(e))return e},i(y,null,r)},A=function(t,e,r){var n=g(r,e-1),o=g(r,e+1);return d(S,t)&&!d(O,o)||d(O,t)&&!d(S,n)?"\\u"+x(b(t,0),16):t};y&&n({target:"JSON",stat:!0,arity:3,forced:E||k},{stringify:function(t,e,r){var n=l(arguments),o=i(E?j:y,null,n);return k&&"string"==typeof o?m(o,w,A):o}})},94:(t,e,r)=>{var n=r(8612),o=r(9557),i=r(382),a=r(8389),u=r(6589),c=r(4762),s=r(8730),f=r(5755),l=r(2429),v=r(4815),p=r(1423),h=r(2355),y=r(8473),d=r(2278).f,g=r(4961).f,b=r(5835).f,m=r(2430),x=r(4544).trim,w="Number",S=a[w],O=u[w],E=S.prototype,k=a.TypeError,j=c("".slice),A=c("".charCodeAt),P=s(w,!S(" 0o1")||!S("0b1")||S("+0x1")),I=function(t){var e,r=arguments.length<1?0:S(function(t){var e=h(t,"number");return"bigint"==typeof e?e:function(t){var e,r,n,o,i,a,u,c,s=h(t,"number");if(p(s))throw new k("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=x(s),43===(e=A(s,0))||45===e){if(88===(r=A(s,2))||120===r)return NaN}else if(48===e){switch(A(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(a=(i=j(s,2)).length,u=0;u<a;u++)if((c=A(i,u))<48||c>o)return NaN;return parseInt(i,n)}return+s}(e)}(t));return v(E,e=this)&&y((function(){m(e)}))?l(Object(r),this,I):r};I.prototype=E,P&&!o&&(E.constructor=I),n({global:!0,constructor:!0,wrap:!0,forced:P},{Number:I});var T=function(t,e){for(var r,n=i?d(e):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;n.length>o;o++)f(e,r=n[o])&&!f(t,r)&&b(t,r,g(e,r))};o&&O&&T(u[w],O),(P||o)&&T(u[w],S)},7132:(t,e,r)=>{var n=r(8612),o=r(5627).entries;n({target:"Object",stat:!0},{entries:function(t){return o(t)}})},6457:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(5599),a=r(4961).f,u=r(382);n({target:"Object",stat:!0,forced:!u||o((function(){a(1)})),sham:!u},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},8908:(t,e,r)=>{var n=r(8612),o=r(382),i=r(9497),a=r(5599),u=r(4961),c=r(670);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),o=u.f,s=i(n),f={},l=0;s.length>l;)void 0!==(r=o(n,e=s[l++]))&&c(f,e,r);return f}})},7859:(t,e,r)=>{var n=r(8612),o=r(6029),i=r(8473),a=r(4347),u=r(2347);n({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(t){var e=a.f;return e?e(u(t)):[]}})},6437:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(2347),a=r(3181),u=r(9441);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!u},{getPrototypeOf:function(t){return a(i(t))}})},3810:(t,e,r)=>{var n=r(8612),o=r(2347),i=r(3658);n({target:"Object",stat:!0,forced:r(8473)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},2697:(t,e,r)=>{r(8612)({target:"Object",stat:!0},{setPrototypeOf:r(1953)})},8557:(t,e,r)=>{var n=r(4338),o=r(7914),i=r(5685);n||o(Object.prototype,"toString",i,{unsafe:!0})},1359:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(3067),a=r(2164),u=r(2374),c=r(2293),s=r(1704),f=r(5290),l=r(8473),v=o("Reflect","construct"),p=Object.prototype,h=[].push,y=l((function(){function t(){}return!(v((function(){}),[],t)instanceof t)})),d=!l((function(){v((function(){}))})),g=y||d;n({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(t,e){u(t),c(e);var r=arguments.length<3?t:u(arguments[2]);if(d&&!y)return v(t,e,r);if(t===r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return i(h,n,e),new(i(a,t,n))}var o=r.prototype,l=f(s(o)?o:p),g=i(t,l,e);return s(g)?g:l}})},646:(t,e,r)=>{var n=r(382),o=r(8389),i=r(4762),a=r(8730),u=r(2429),c=r(9037),s=r(5290),f=r(2278).f,l=r(4815),v=r(4786),p=r(6261),h=r(9736),y=r(7435),d=r(7150),g=r(7914),b=r(8473),m=r(5755),x=r(4483).enforce,w=r(240),S=r(1),O=r(3933),E=r(4528),k=S("match"),j=o.RegExp,A=j.prototype,P=o.SyntaxError,I=i(A.exec),T=i("".charAt),C=i("".replace),R=i("".indexOf),N=i("".slice),_=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,D=/a/g,F=/a/g,M=new j(D)!==D,L=y.MISSED_STICKY,$=y.UNSUPPORTED_Y;if(a("RegExp",n&&(!M||L||O||E||b((function(){return F[k]=!1,j(D)!==D||j(F)===F||"/a/i"!==String(j(D,"i"))}))))){for(var z=function(t,e){var r,n,o,i,a,f,y=l(A,this),d=v(t),g=void 0===e,b=[],w=t;if(!y&&d&&g&&t.constructor===z)return t;if((d||l(A,t))&&(t=t.source,g&&(e=h(w))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),w=t,O&&"dotAll"in D&&(n=!!e&&R(e,"s")>-1)&&(e=C(e,/s/g,"")),r=e,L&&"sticky"in D&&(o=!!e&&R(e,"y")>-1)&&$&&(e=C(e,/y/g,"")),E&&(i=function(t){for(var e,r=t.length,n=0,o="",i=[],a=s(null),u=!1,c=!1,f=0,l="";n<=r;n++){if("\\"===(e=T(t,n)))e+=T(t,++n);else if("]"===e)u=!1;else if(!u)switch(!0){case"["===e:u=!0;break;case"("===e:I(_,N(t,n+1))&&(n+=2,c=!0),o+=e,f++;continue;case">"===e&&c:if(""===l||m(a,l))throw new P("Invalid capture group name");a[l]=!0,i[i.length]=[l,f],c=!1,l="";continue}c?l+=e:o+=e}return[o,i]}(t),t=i[0],b=i[1]),a=u(j(t,e),y?this:A,z),(n||o||b.length)&&(f=x(a),n&&(f.dotAll=!0,f.raw=z(function(t){for(var e,r=t.length,n=0,o="",i=!1;n<=r;n++)"\\"!==(e=T(t,n))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+T(t,++n);return o}(t),r)),o&&(f.sticky=!0),b.length&&(f.groups=b)),t!==w)try{c(a,"source",""===w?"(?:)":w)}catch(t){}return a},G=f(j),B=0;G.length>B;)d(z,j,G[B++]);A.constructor=z,z.prototype=A,g(o,"RegExp",z,{constructor:!0})}w("RegExp")},5021:(t,e,r)=>{var n=r(8612),o=r(8865);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},3687:(t,e,r)=>{var n=r(2048).PROPER,o=r(7914),i=r(2293),a=r(6261),u=r(8473),c=r(9736),s="toString",f=RegExp.prototype,l=f[s],v=u((function(){return"/a/b"!==l.call({source:"a",flags:"b"})})),p=n&&l.name!==s;(v||p)&&o(f,s,(function(){var t=i(this);return"/"+a(t.source)+"/"+a(c(t))}),{unsafe:!0})},9203:(t,e,r)=>{r(7446)("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(4092))},2745:(t,e,r)=>{r(9203)},9425:(t,e,r)=>{var n=r(8612),o=r(4762),i=r(4989),a=r(3312),u=r(6261),c=r(4522),s=o("".indexOf);n({target:"String",proto:!0,forced:!c("includes")},{includes:function(t){return!!~s(u(a(this)),u(i(t)),arguments.length>1?arguments[1]:void 0)}})},3994:(t,e,r)=>{var n=r(9105).charAt,o=r(6261),i=r(4483),a=r(5662),u=r(5247),c="String Iterator",s=i.set,f=i.getterFor(c);a(String,"String",(function(t){s(this,{type:c,string:o(t),index:0})}),(function(){var t,e=f(this),r=e.string,o=e.index;return o>=r.length?u(void 0,!0):(t=n(r,o),e.index+=t.length,u(t,!1))}))},3062:(t,e,r)=>{var n=r(3067),o=r(1807),i=r(4762),a=r(3358),u=r(8473),c=r(2293),s=r(1483),f=r(5983),l=r(3005),v=r(8324),p=r(6261),h=r(3312),y=r(4419),d=r(2564),g=r(708),b=r(2428),m=r(1)("replace"),x=Math.max,w=Math.min,S=i([].concat),O=i([].push),E=i("".indexOf),k=i("".slice),j="$0"==="a".replace(/./,"$0"),A=!!/./[m]&&""===/./[m]("a","$0");a("replace",(function(t,e,r){var i=A?"$":"$0";return[function(t,r){var n=h(this),i=f(t)?void 0:d(t,m);return i?o(i,t,n,r):o(e,p(n),t,r)},function(t,o){var a=c(this),u=p(t);if("string"==typeof o&&-1===E(o,i)&&-1===E(o,"$<")){var f=r(e,a,u,o);if(f.done)return f.value}var h=s(o);h||(o=p(o));var d,m=a.global;m&&(d=a.unicode,a.lastIndex=0);for(var j,A=[];null!==(j=b(a,u))&&(O(A,j),m);)""===p(j[0])&&(a.lastIndex=y(u,v(a.lastIndex),d));for(var P,I="",T=0,C=0;C<A.length;C++){for(var R,N=p((j=A[C])[0]),_=x(w(l(j.index),u.length),0),D=[],F=1;F<j.length;F++)O(D,void 0===(P=j[F])?P:String(P));var M=j.groups;if(h){var L=S([N],D,_,u);void 0!==M&&O(L,M),R=p(n(o,void 0,L))}else R=g(N,u,_,D,M,o);_>=T&&(I+=k(u,T,_)+R,T=_+N.length)}return I+k(u,T)}]}),!!u((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!j||A)},4062:(t,e,r)=>{var n,o=r(8612),i=r(3786),a=r(4961).f,u=r(8324),c=r(6261),s=r(4989),f=r(3312),l=r(4522),v=r(9557),p=i("".slice),h=Math.min,y=l("startsWith");o({target:"String",proto:!0,forced:!(!v&&!y&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||y)},{startsWith:function(t){var e=c(f(this));s(t);var r=u(h(arguments.length>1?arguments[1]:void 0,e.length)),n=c(t);return p(e,r,r+n.length)===n}})},5443:(t,e,r)=>{var n=r(8612),o=r(8389),i=r(1807),a=r(4762),u=r(9557),c=r(382),s=r(6029),f=r(8473),l=r(5755),v=r(4815),p=r(2293),h=r(5599),y=r(3815),d=r(6261),g=r(7738),b=r(5290),m=r(3658),x=r(2278),w=r(2020),S=r(4347),O=r(4961),E=r(5835),k=r(5799),j=r(7611),A=r(7914),P=r(3864),I=r(7255),T=r(5409),C=r(1507),R=r(1866),N=r(1),_=r(5373),D=r(7849),F=r(8192),M=r(2277),L=r(4483),$=r(2867).forEach,z=T("hidden"),G="Symbol",B="prototype",U=L.set,W=L.getterFor(G),V=Object[B],K=o.Symbol,q=K&&K[B],Y=o.RangeError,X=o.TypeError,H=o.QObject,J=O.f,Q=E.f,Z=w.f,tt=j.f,et=a([].push),rt=I("symbols"),nt=I("op-symbols"),ot=I("wks"),it=!H||!H[B]||!H[B].findChild,at=function(t,e,r){var n=J(V,e);n&&delete V[e],Q(t,e,r),n&&t!==V&&Q(V,e,n)},ut=c&&f((function(){return 7!==b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?at:Q,ct=function(t,e){var r=rt[t]=b(q);return U(r,{type:G,tag:t,description:e}),c||(r.description=e),r},st=function(t,e,r){t===V&&st(nt,e,r),p(t);var n=y(e);return p(r),l(rt,n)?(r.enumerable?(l(t,z)&&t[z][n]&&(t[z][n]=!1),r=b(r,{enumerable:g(0,!1)})):(l(t,z)||Q(t,z,g(1,b(null))),t[z][n]=!0),ut(t,n,r)):Q(t,n,r)},ft=function(t,e){p(t);var r=h(e),n=m(r).concat(ht(r));return $(n,(function(e){c&&!i(lt,r,e)||st(t,e,r[e])})),t},lt=function(t){var e=y(t),r=i(tt,this,e);return!(this===V&&l(rt,e)&&!l(nt,e))&&(!(r||!l(this,e)||!l(rt,e)||l(this,z)&&this[z][e])||r)},vt=function(t,e){var r=h(t),n=y(e);if(r!==V||!l(rt,n)||l(nt,n)){var o=J(r,n);return!o||!l(rt,n)||l(r,z)&&r[z][n]||(o.enumerable=!0),o}},pt=function(t){var e=Z(h(t)),r=[];return $(e,(function(t){l(rt,t)||l(C,t)||et(r,t)})),r},ht=function(t){var e=t===V,r=Z(e?nt:h(t)),n=[];return $(r,(function(t){!l(rt,t)||e&&!l(V,t)||et(n,rt[t])})),n};s||(A(q=(K=function(){if(v(q,this))throw new X("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?d(arguments[0]):void 0,e=R(t),r=function(t){var n=void 0===this?o:this;n===V&&i(r,nt,t),l(n,z)&&l(n[z],e)&&(n[z][e]=!1);var a=g(1,t);try{ut(n,e,a)}catch(t){if(!(t instanceof Y))throw t;at(n,e,a)}};return c&&it&&ut(V,e,{configurable:!0,set:r}),ct(e,t)})[B],"toString",(function(){return W(this).tag})),A(K,"withoutSetter",(function(t){return ct(R(t),t)})),j.f=lt,E.f=st,k.f=ft,O.f=vt,x.f=w.f=pt,S.f=ht,_.f=function(t){return ct(N(t),t)},c&&(P(q,"description",{configurable:!0,get:function(){return W(this).description}}),u||A(V,"propertyIsEnumerable",lt,{unsafe:!0}))),n({global:!0,constructor:!0,wrap:!0,forced:!s,sham:!s},{Symbol:K}),$(m(ot),(function(t){D(t)})),n({target:G,stat:!0,forced:!s},{useSetter:function(){it=!0},useSimple:function(){it=!1}}),n({target:"Object",stat:!0,forced:!s,sham:!c},{create:function(t,e){return void 0===e?b(t):ft(b(t),e)},defineProperty:st,defineProperties:ft,getOwnPropertyDescriptor:vt}),n({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:pt}),F(),M(K,G),C[z]=!0},2733:(t,e,r)=>{var n=r(8612),o=r(382),i=r(8389),a=r(4762),u=r(5755),c=r(1483),s=r(4815),f=r(6261),l=r(3864),v=r(6726),p=i.Symbol,h=p&&p.prototype;if(o&&c(p)&&(!("description"in h)||void 0!==p().description)){var y={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:f(arguments[0]),e=s(h,this)?new p(t):void 0===t?p():p(t);return""===t&&(y[e]=!0),e};v(d,p),d.prototype=h,h.constructor=d;var g="Symbol(description detection)"===String(p("description detection")),b=a(h.valueOf),m=a(h.toString),x=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),S=a("".slice);l(h,"description",{configurable:!0,get:function(){var t=b(this);if(u(y,t))return"";var e=m(t),r=g?S(e,7,-1):w(e,x,"$1");return""===r?void 0:r}}),n({global:!0,constructor:!0,forced:!0},{Symbol:d})}},2484:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(5755),a=r(6261),u=r(7255),c=r(3218),s=u("string-to-symbol-registry"),f=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!c},{for:function(t){var e=a(t);if(i(s,e))return s[e];var r=o("Symbol")(e);return s[e]=r,f[r]=e,r}})},4701:(t,e,r)=>{r(7849)("iterator")},9305:(t,e,r)=>{r(5443),r(2484),r(1894),r(6184),r(7859)},1894:(t,e,r)=>{var n=r(8612),o=r(5755),i=r(1423),a=r(8761),u=r(7255),c=r(3218),s=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!c},{keyFor:function(t){if(!i(t))throw new TypeError(a(t)+" is not a symbol");if(o(s,t))return s[t]}})},1678:(t,e,r)=>{var n=r(7849),o=r(8192);n("toPrimitive"),o()},3630:(t,e,r)=>{var n=r(8389),o=r(4842),i=r(1902),a=r(4793),u=r(9037),c=function(t){if(t&&t.forEach!==a)try{u(t,"forEach",a)}catch(e){t.forEach=a}};for(var s in o)o[s]&&c(n[s]&&n[s].prototype);c(i)},2367:(t,e,r)=>{var n=r(8389),o=r(4842),i=r(1902),a=r(4962),u=r(9037),c=r(2277),s=r(1)("iterator"),f=a.values,l=function(t,e){if(t){if(t[s]!==f)try{u(t,s,f)}catch(e){t[s]=f}if(c(t,e,!0),o[e])for(var r in a)if(t[r]!==a[r])try{u(t,r,a[r])}catch(e){t[r]=a[r]}}};for(var v in o)l(n[v]&&n[v].prototype,v);l(i,"DOMTokenList")}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{function t(){for(var t=document.cookie.split(";"),e=[],r=new RegExp("^\\s*([^=]+)\\s*=\\s*(.*?)$"),n=0;n<t.length;n++){var o=t[n],i=r.exec(o);null!==i&&e.push({name:i[1],value:i[2]})}return e}function e(t,e,r){var n=t+"=; Max-Age=-99999999;";document.cookie=n,n+=" path="+(e||"/")+";",document.cookie=n,void 0!==r&&(n+=" domain="+r+";",document.cookie=n)}r.r(n),r.d(n,{default:()=>T}),r(9305),r(2733),r(4701),r(1678),r(4776),r(4382),r(9892),r(4962),r(6584),r(9336),r(4754),r(1908),r(94),r(7132),r(6457),r(8908),r(3810),r(8557),r(646),r(5021),r(3687),r(2745),r(3994),r(3062),r(4062),r(3630),r(2367);var o=r(5482);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,e,r){return e=c(e),function(t,e){if(e&&("object"===i(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,u()?Reflect.construct(e,r||[],c(t).constructor):e.apply(t,r))}function u(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(u=function(){return!!t})()}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},c(t)}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}function f(t,e){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},f(t,e)}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,h(n.key),n)}}function p(t,e,r){return e&&v(t.prototype,e),r&&v(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function h(t){var e=function(t,e){if("object"!=i(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==i(e)?e:String(e)}r(6437),r(2697),r(1359);var y=function(){function t(){l(this,t),this.value=null}return p(t,[{key:"get",value:function(){return this.value}},{key:"set",value:function(t){this.value=t}},{key:"delete",value:function(){this.value=null}}]),t}(),d=function(){function r(t){l(this,r),this.cookieName=t.storageName,this.cookieDomain=t.cookieDomain,this.cookiePath=t.cookiePath,this.cookieExpiresAfterDays=t.cookieExpiresAfterDays}return p(r,[{key:"get",value:function(){var e=function(e){for(var r=t(),n=0;n<r.length;n++)if(r[n].name===e)return r[n];return null}(this.cookieName);return e?e.value:null}},{key:"set",value:function(t){return function(t,e,r,n,o){var i="";if(r){var a=new Date;a.setTime(a.getTime()+24*r*60*60*1e3),i="; expires="+a.toUTCString()}void 0!==n&&(i+="; domain="+n),i+=void 0!==o?"; path="+o:"; path=/",document.cookie=t+"="+(e||"")+i+"; SameSite=Lax"}(this.cookieName,t,this.cookieExpiresAfterDays,this.cookieDomain,this.cookiePath)}},{key:"delete",value:function(){return e(this.cookieName)}}]),r}(),g=function(){function t(e,r){l(this,t),this.key=e.storageName,this.handle=r}return p(t,[{key:"get",value:function(){return this.handle.getItem(this.key)}},{key:"getWithKey",value:function(t){return this.handle.getItem(t)}},{key:"set",value:function(t){return this.handle.setItem(this.key,t)}},{key:"setWithKey",value:function(t,e){return this.handle.setItem(t,e)}},{key:"delete",value:function(){return this.handle.removeItem(this.key)}},{key:"deleteWithKey",value:function(t){return this.handle.removeItem(t)}}]),t}(),b=function(t){function e(t){return l(this,e),a(this,e,[t,localStorage])}return s(e,t),p(e)}(g),m=function(t){function e(t){return l(this,e),a(this,e,[t,sessionStorage])}return s(e,t),p(e)}(g);const x={cookie:d,test:y,localStorage:b,sessionStorage:m};function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function S(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=E(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function O(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,u=[],c=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(u.push(n.value),u.length!==e);c=!0);}catch(t){s=!0,o=t}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return u}}(t,e)||E(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(t,e){if(t){if("string"==typeof t)return k(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?k(t,e):void 0}}function k(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function j(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function A(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?j(Object(r),!0).forEach((function(e){var n,o,i;n=t,o=e,i=r[e],(o=I(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):j(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function P(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,I(n.key),n)}}function I(t){var e=function(t,e){if("object"!=w(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=w(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==w(e)?e:String(e)}var T=function(){function r(t,e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.config=t,this.store=void 0!==e?e:new x[this.storageMethod](this),void 0===this.store&&(this.store=x.cookie),this.auxiliaryStore=void 0!==n?n:new m(this),this.consents=this.defaultConsents,this.confirmed=!1,this.changed=!1,this.states={},this.initialized={},this.executedOnce={},this.watchers=new Set([]),this.loadConsents(),this.applyConsents(),this.savedConsents=A({},this.consents)}var n,i;return n=r,(i=[{key:"storageMethod",get:function(){return this.config.storageMethod||"cookie"}},{key:"storageName",get:function(){return this.config.storageName||this.config.cookieName||"klaro"}},{key:"cookieDomain",get:function(){return this.config.cookieDomain||void 0}},{key:"cookiePath",get:function(){return this.config.cookiePath||void 0}},{key:"cookieExpiresAfterDays",get:function(){return this.config.cookieExpiresAfterDays||120}},{key:"defaultConsents",get:function(){for(var t={},e=0;e<this.config.services.length;e++){var r=this.config.services[e];t[r.name]=this.getDefaultConsent(r)}return t}},{key:"watch",value:function(t){this.watchers.has(t)||this.watchers.add(t)}},{key:"unwatch",value:function(t){this.watchers.has(t)&&this.watchers.delete(t)}},{key:"notify",value:function(t,e){var r=this;this.watchers.forEach((function(n){n.update(r,t,e)}))}},{key:"getService",value:function(t){var e=this.config.services.filter((function(e){return e.name===t}));if(e.length>0)return e[0]}},{key:"getDefaultConsent",value:function(t){var e=t.default||t.required;return void 0===e&&(e=this.config.default),void 0===e&&(e=!1),e}},{key:"changeAll",value:function(t){var e=this,r=0;return this.config.services.filter((function(t){return!t.contextualConsentOnly})).map((function(n){n.required||e.config.required||t?e.updateConsent(n.name,!0)&&r++:e.updateConsent(n.name,!1)&&r++})),r}},{key:"updateConsent",value:function(t,e){var r=(this.consents[t]||!1)!==e;return this.consents[t]=e,this.notify("consents",this.consents),r}},{key:"resetConsents",value:function(){this.consents=this.defaultConsents,this.states={},this.confirmed=!1,this.applyConsents(),this.savedConsents=A({},this.consents),this.store.delete(),this.notify("consents",this.consents)}},{key:"getConsent",value:function(t){return this.consents[t]||!1}},{key:"loadConsents",value:function(){var t=this.store.get();return null!==t&&(this.consents=JSON.parse(decodeURIComponent(t)),this._checkConsents(),this.notify("consents",this.consents)),this.consents}},{key:"saveAndApplyConsents",value:function(t){this.saveConsents(t),this.applyConsents()}},{key:"changedConsents",value:function(){for(var t={},e=0,r=Object.entries(this.consents);e<r.length;e++){var n=O(r[e],2),o=n[0],i=n[1];this.savedConsents[o]!==i&&(t[o]=i)}return t}},{key:"saveConsents",value:function(t){var e=encodeURIComponent(JSON.stringify(this.consents));this.store.set(e),this.confirmed=!0,this.changed=!1;var r=this.changedConsents();this.savedConsents=A({},this.consents),this.notify("saveConsents",{changes:r,consents:this.consents,type:t||"script"})}},{key:"applyConsents",value:function(t,e,r){function n(t,e){if(void 0!==t)return("function"==typeof t?t:new Function("opts",t))(e)}for(var o=0,i=0;i<this.config.services.length;i++){var a=this.config.services[i];if(void 0===r||r===a.name){var u=a.vars||{},c={service:a,config:this.config,vars:u};this.initialized[a.name]||(this.initialized[a.name]=!0,n(a.onInit,c))}}for(var s=0;s<this.config.services.length;s++){var f=this.config.services[s];if(void 0===r||r===f.name){var l=this.states[f.name],v=f.vars||{},p=void 0!==f.optOut?f.optOut:this.config.optOut||!1,h=void 0!==f.required?f.required:this.config.required||!1,y=this.confirmed||p||t||e,d=this.getConsent(f.name)&&y||h,g={service:f,config:this.config,vars:v,consents:this.consents,confirmed:this.confirmed};l!==d&&o++,t||(n(d?f.onAccept:f.onDecline,g),this.updateServiceElements(f,d),this.updateServiceStorage(f,d),void 0!==f.callback&&f.callback(d,f),void 0!==this.config.callback&&this.config.callback(d,f),this.states[f.name]=d)}}return this.notify("applyConsents",o,r),o}},{key:"updateServiceElements",value:function(t,e){if(e){if(t.onlyOnce&&this.executedOnce[t.name])return;this.executedOnce[t.name]=!0}for(var r=document.querySelectorAll("[data-name='"+t.name+"']"),n=0;n<r.length;n++){var i=r[n],a=i.parentElement,u=(0,o.RT)(i),c=u.type,s=u.src,f=u.href,l=["href","src","type"];if("placeholder"!==c)if("IFRAME"===i.tagName){if(e&&i.src===s){console.debug("Skipping ".concat(i.tagName," for service ").concat(t.name,", as it already has the correct type..."));continue}var v,p=document.createElement(i.tagName),h=S(i.attributes);try{for(h.s();!(v=h.n()).done;){var y=v.value;p.setAttribute(y.name,y.value)}}catch(t){h.e(t)}finally{h.f()}p.innerText=i.innerText,p.text=i.text,e?(void 0!==u["original-display"]&&(p.style.display=u["original-display"]),void 0!==u.src&&(p.src=u.src)):(p.src="",void 0!==u["modified-by-klaro"]&&void 0!==u["original-display"]?p.setAttribute("data-original-display",u["original-display"]):(void 0!==i.style.display&&p.setAttribute("data-original-display",i.style.display),p.setAttribute("data-modified-by-klaro","yes")),p.style.display="none"),a.insertBefore(p,i),a.removeChild(i)}else if("SCRIPT"===i.tagName||"LINK"===i.tagName){if(e&&i.type===(c||"")&&i.src===s){console.debug("Skipping ".concat(i.tagName," for service ").concat(t.name,", as it already has the correct type or src..."));continue}var d,g=document.createElement(i.tagName),b=S(i.attributes);try{for(b.s();!(d=b.n()).done;){var m=d.value;g.setAttribute(m.name,m.value)}}catch(t){b.e(t)}finally{b.f()}g.innerText=i.innerText,g.text=i.text,e?(g.type=c||"",void 0!==s&&(g.src=s),void 0!==f&&(g.href=f)):g.type="text/plain",a.insertBefore(g,i),a.removeChild(i)}else{if(e){var x,w=S(l);try{for(w.s();!(x=w.n()).done;){var O=x.value,E=u[O];void 0!==E&&(void 0===u["original-"+O]&&(u["original-"+O]=i[O]),i[O]=E)}}catch(t){w.e(t)}finally{w.f()}void 0!==u.title&&(i.title=u.title),void 0!==u["original-display"]?i.style.display=u["original-display"]:i.style.removeProperty("display")}else{void 0!==u.title&&i.removeAttribute("title"),void 0===u["original-display"]&&void 0!==i.style.display&&(u["original-display"]=i.style.display),i.style.display="none";var k,j=S(l);try{for(j.s();!(k=j.n()).done;){var A=k.value;void 0!==u[A]&&(void 0!==u["original-"+A]?i[A]=u["original-"+A]:i.removeAttribute(A))}}catch(t){j.e(t)}finally{j.f()}}(0,o.X7)(u,i)}else e?(i.style.display="none",u["original-display"]=i.style.display):i.style.display=u["original-display"]||"block"}}},{key:"updateServiceStorage",value:function(r,n){if(!n&&void 0!==r.cookies&&r.cookies.length>0)for(var o=t(),i=0;i<r.cookies.length;i++){var a=r.cookies[i],u=void 0,c=void 0;if(a instanceof Array){var s=O(a,3);a=s[0],u=s[1],c=s[2]}else if(a instanceof Object&&!(a instanceof RegExp)){var f=a;a=f.pattern,u=f.path,c=f.domain}if(void 0!==a){a instanceof RegExp||(a=a.startsWith("^")?new RegExp(a):new RegExp("^"+a.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")+"$"));for(var l=0;l<o.length;l++){var v=o[l];null!==a.exec(v.name)&&(console.debug("Deleting cookie:",v.name,"Matched pattern:",a,"Path:",u,"Domain:",c),e(v.name,u,c),void 0===c&&e(v.name,u,"."+window.location.hostname))}}}}},{key:"_checkConsents",value:function(){for(var t=!0,e=new Set(this.config.services.map((function(t){return t.name}))),r=new Set(Object.keys(this.consents)),n=0,o=Object.keys(this.consents);n<o.length;n++){var i=o[n];e.has(i)||delete this.consents[i]}var a,u=S(this.config.services);try{for(u.s();!(a=u.n()).done;){var c=a.value;r.has(c.name)||(this.consents[c.name]=this.getDefaultConsent(c),t=!1)}}catch(t){u.e(t)}finally{u.f()}this.confirmed=t,t||(this.changed=!0)}}])&&P(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),r}()})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MndCLE9BQU9pQixVQUFRLElBQXpDLElBQUF3RixFQUFBMUIsTUFBQXlCLEVBQUFDLEVBQUF4akIsS0FBQXJTLE1BQTBDLEtBQWhDc3dCLEVBQU9zRixFQUFBNzVCLE1BQ1J5ekIsRUFBU2pwQixJQUFJK3BCLEVBQVExMEIsUUFDdEI2QyxLQUFLK3dCLFNBQVNjLEVBQVExMEIsTUFBUTZDLEtBQUs4eEIsa0JBQWtCRCxHQUNyRG1GLEdBQVcsRUFFbkIsQ0FBQyxPQUFBckIsR0FBQXlCLEVBQUFwSixFQUFBMkgsRUFBQSxTQUFBeUIsRUFBQTdzQixHQUFBLENBQ0R2SyxLQUFLaXhCLFVBQVkrRixFQUNaQSxJQUNEaDNCLEtBQUtreEIsU0FBVSxFQUN2QixNLG9FQUFDUixDQUFBLENBbmI4QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly8vLi91dGlscy9jb21wYXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtanNvbi1yZXBsYWNlci1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXRydW5jLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb3h5LWFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZm9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL3V0aWxzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3RvcmVzLmpzIiwid2VicGFjazovLy8uL2NvbnNlbnQtbWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJjbVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJjbVwiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsICgpID0+IHtcbnJldHVybiAiLCJleHBvcnQgZnVuY3Rpb24gY3VycmVudFNjcmlwdChuYW1lKSB7XG4gICAgLy8gbW9zdCBicm93c2VyIHN1cHBvcnQgdGhpcyAoYnV0IGFsYXMsIG5vdCBJRTExKVxuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICE9PSBudWxsICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQ7XG4gICAgY29uc3Qgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0c1tpXTtcbiAgICAgICAgLy8gaWYgdGhlIHNjcmlwdCBzcmMgaW5jbHVkZXMgdGhlIGdpdmVuIG5hbWUgKGtsYXJvKSB3ZSByZXR1cm5cbiAgICAgICAgLy8gdGhlIHNjcmlwdCBhbmQgaG9wZSBmb3IgdGhlIGJlc3RcbiAgICAgICAgaWYgKHNjcmlwdC5zcmMuaW5jbHVkZXMobmFtZSkpIHJldHVybiBzY3JpcHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhc2V0KGVsZW1lbnQpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZWxlbWVudC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUuc3RhcnRzV2l0aCgnZGF0YS0nKSkge1xuICAgICAgICAgICAgZGF0YXNldFthdHRyaWJ1dGUubmFtZS5zbGljZSg1KV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseURhdGFzZXQoZHMsIGVsZW1lbnQpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZHMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRzW2tleV07XG4gICAgICAgIGlmIChlbGVtZW50W2tleV0gPT09IHZhbHVlKSBjb250aW51ZTtcbiAgICAgICAgZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS0nICsga2V5LCB2YWx1ZSk7XG4gICAgfVxufVxuXG4vKlxuVGhpcyByZXBsYWNlcyBDU1MgdmFyaWFibGVzLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQ1NTVmFyaWFibGVzKHZhcmlhYmxlcyl7XG4gICAgY29uc3Qga2xhcm9TdHlsZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1jb250ZXh0PWtsYXJvLXN0eWxlc10nKVxuICAgIGZvcihjb25zdCBlbGVtZW50IG9mIGtsYXJvU3R5bGVFbGVtZW50cyl7XG4gICAgICAgIGxldCBjc3MgPSBlbGVtZW50LmlubmVyVGV4dFxuICAgICAgICBpZiAoZWxlbWVudC5zdHlsZVNoZWV0ICE9PSB1bmRlZmluZWQpIC8vIElFXG4gICAgICAgICAgICBjc3MgPSBlbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dFxuICAgICAgICBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHZhcmlhYmxlcykpe1xuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKFwiKFthLXowLTktXSspOlteO10rO1tcXFxcc1xcXFxuXSpcXFxcMTpcXFxccyp2YXJcXFxcKC0tXCIra2V5K1wiLFxcXFxzKlteXFxcXCldK1xcXFwpXCIsICdnJylcbiAgICAgICAgICAgIGNzcyA9IGNzcy5yZXBsYWNlKHJlZ2V4LCAoXywgbmFtZSkgPT4gYCR7bmFtZX06ICR7dmFsdWV9OyAke25hbWV9OiB2YXIoLS0ke2tleX0sICR7dmFsdWV9KWApXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKVxuICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKVxuICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY29udGV4dFwiLCBcImtsYXJvLXN0eWxlc1wiKVxuICAgICAgICBpZiAobmV3RWxlbWVudC5zdHlsZVNoZWV0ICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgbmV3RWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0VsZW1lbnQuaW5uZXJUZXh0ID0gY3NzXG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgcmVtb3ZlIHRoZSBvbGQgZWxlbWVudCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lXG4gICAgICAgIGVsZW1lbnQucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KVxuICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkgaXMgdHJ1ZWBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChpc1Bvc3NpYmxlUHJvdG90eXBlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5KEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBQcm90b3R5cGUpIHtcbiAgaWYgKGlzUHJvdG90eXBlT2YoUHJvdG90eXBlLCBpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBUeXBlKGFyZ3VtZW50KSBpcyBPYmplY3RgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNPYmplY3QoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRkYyNi0gYnVnOiBBcnJheUJ1ZmZlcnMgYXJlIG5vbi1leHRlbnNpYmxlLCBidXQgT2JqZWN0LmlzRXh0ZW5zaWJsZSBkb2VzIG5vdCByZXBvcnQgaXRcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZShidWZmZXIpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVmZmVyLCAnYScsIHsgdmFsdWU6IDggfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxubW9kdWxlLmV4cG9ydHMgPSAhU1RSSUNUX01FVEhPRCA/IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtZm9yZWFjaCAtLSBzYWZlXG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT09IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT09IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc2VsZik7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9SRUpFQ1QgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoKHRhcmdldCwgdmFsdWUpOyAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoKHRhcmdldCwgdmFsdWUpOyAgICAgIC8vIGZpbHRlclJlamVjdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyUmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlclJlamVjdDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoW10uc2xpY2UpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGEgcGFydCBvZiBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbEFycmF5KSkge1xuICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKGlzQ29uc3RydWN0b3IoQykgJiYgKEMgPT09ICRBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChhcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5KSkobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykge1xuICB0cnkge1xuICAgIHJldHVybiBFTlRSSUVTID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICB0cnkge1xuICAgIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIHdvcmthcm91bmQgb2Ygb2xkIFdlYktpdCArIGBldmFsYCBidWdcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoe30udG9TdHJpbmcpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gc3RyaW5nU2xpY2UodG9TdHJpbmcoaXQpLCA4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgZGVmaW5lQnVpbHRJbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICB2YXIgcHJldmlvdXMsIGluZGV4O1xuICAgICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3QgPSBlbnRyeSA9IHtcbiAgICAgICAgICBpbmRleDogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZXZpb3VzOiBwcmV2aW91cyA9IHN0YXRlLmxhc3QsXG4gICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlbW92ZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgIGlmIChwcmV2aW91cykgcHJldmlvdXMubmV4dCA9IGVudHJ5O1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUrKztcbiAgICAgICAgZWxzZSB0aGF0LnNpemUrKztcbiAgICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSBzdGF0ZS5pbmRleFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAvLyBmYXN0IGNhc2VcbiAgICAgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgICAgIHZhciBlbnRyeTtcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdO1xuICAgICAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtleSA9PT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmNsZWFyXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDtcbiAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnByZXZpb3VzKSBlbnRyeS5wcmV2aW91cyA9IGVudHJ5LnByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmZpcnN0ID0gc3RhdGUubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgc3RhdGUuaW5kZXggPSBjcmVhdGUobnVsbCk7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSA9IDA7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT09IGVudHJ5KSBzdGF0ZS5maXJzdCA9IG5leHQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3QgPT09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7XG4gICAgICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkgZW50cnkgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGB7IE1hcCwgU2V0fS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5oYXNcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lQnVpbHRJbnMoUHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgICAgfSxcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuc2V0XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5hZGRcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLnsga2V5cywgdmFsdWVzLCBlbnRyaWVzLCBAQGl0ZXJhdG9yIH0oKWAgbWV0aG9kc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgZGVmaW5lSXRlcmF0b3IoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT09ICdrZXlzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZW50cnkua2V5LCBmYWxzZSk7XG4gICAgICBpZiAoa2luZCA9PT0gJ3ZhbHVlcycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGVudHJ5LnZhbHVlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChbZW50cnkua2V5LCBlbnRyeS52YWx1ZV0sIGZhbHNlKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZVtAQHNwZWNpZXNdYCBhY2Nlc3NvcnNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1tYXAtQEBzcGVjaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMoTmF0aXZlUHJvdG90eXBlW0tFWV0pO1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAhaXNDYWxsYWJsZShOYXRpdmVDb25zdHJ1Y3RvcikgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLmVuYWJsZSgpO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT09IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihpdGVyYWJsZSk7IH0pO1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG5cbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UoZHVtbXksIE5hdGl2ZVByb3RvdHlwZSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCksIGR1bW15LCBDb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT09IE5hdGl2ZUNvbnN0cnVjdG9yIH0sIGV4cG9ydGVkKTtcblxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIGRvbmUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiBkb25lIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtrZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgJFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUodGhpcywgaGludCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5nZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3IuZ2V0LCBuYW1lLCB7IGdldHRlcjogdHJ1ZSB9KTtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLnNldCwgbmFtZSwgeyBzZXR0ZXI6IHRydWUgfSk7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eS5mKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghb3B0aW9ucy51bnNhZmUpIGRlbGV0ZSBPW2tleV07XG4gICAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiAhb3B0aW9ucy5ub25Db25maWd1cmFibGUsXG4gICAgICB3cml0YWJsZTogIW9wdGlvbnMubm9uV3JpdGFibGVcbiAgICB9KTtcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9PSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93ICRUeXBlRXJyb3IoJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCcpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBpbiBvbGQgV2ViS2l0IHZlcnNpb25zLCBgZWxlbWVudC5jbGFzc0xpc3RgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBnbG9iYWwgYERPTVRva2VuTGlzdGBcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxudmFyIGNsYXNzTGlzdCA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnc3BhbicpLmNsYXNzTGlzdDtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSBjbGFzc0xpc3QgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NVG9rZW5MaXN0UHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlID8gdW5kZWZpbmVkIDogRE9NVG9rZW5MaXN0UHJvdG90eXBlO1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgbmF2aWdhdG9yICE9ICd1bmRlZmluZWQnICYmIFN0cmluZyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbC5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTBcbiAgLy8gYnV0IHRoZWlyIGNvcnJlY3QgdmVyc2lvbnMgYXJlIG5vdCBpbnRlcmVzdGluZyBmb3IgdXNcbiAgdmVyc2lvbiA9IG1hdGNoWzBdID4gMCAmJiBtYXRjaFswXSA8IDQgPyAxIDogKyhtYXRjaFswXSArIG1hdGNoWzFdKTtcbn1cblxuLy8gQnJvd3NlckZTIE5vZGVKUyBgcHJvY2Vzc2AgcG9seWZpbGwgaW5jb3JyZWN0bHkgc2V0IGAudjhgIHRvIGAwLjBgXG4vLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcbmlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgICAgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5kb250Q2FsbEdldFNldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiAgb3B0aW9ucy5uYW1lICAgICAgICAgICAtIHRoZSAubmFtZSBvZiB0aGUgZnVuY3Rpb24gaWYgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGtleVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSAmJiBnbG9iYWxbVEFSR0VUXS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEZPUkNFRCwgU0hBTSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9PSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSByZWFsIHJlZ2V4IGhlcmUgc2luY2UgaXQgY2F1c2VzIGRlb3B0aW1pemF0aW9uXG4gICAgICAvLyBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbiBpbiBWOFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMwNlxuICAgICAgcmUgPSB7fTtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICAgIHJlLmZsYWdzID0gJyc7XG4gICAgICByZVtTWU1CT0xdID0gLy4vW1NZTUJPTF07XG4gICAgfVxuXG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGV4ZWNDYWxsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgRk9SQ0VEXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogY2FsbChuYXRpdmVSZWdFeHBNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBjYWxsKG5hdGl2ZU1ldGhvZCwgc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgZGVmaW5lQnVpbHRJbihTdHJpbmcucHJvdG90eXBlLCBLRVksIG1ldGhvZHNbMF0pO1xuICAgIGRlZmluZUJ1aWx0SW4oUmVnRXhwUHJvdG90eXBlLCBTWU1CT0wsIG1ldGhvZHNbMV0pO1xuICB9XG5cbiAgaWYgKFNIQU0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGFwcGx5ID0gRnVuY3Rpb25Qcm90b3R5cGUuYXBwbHk7XG52YXIgY2FsbCA9IEZ1bmN0aW9uUHJvdG90eXBlLmNhbGw7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFJlZmxlY3QgPT0gJ29iamVjdCcgJiYgUmVmbGVjdC5hcHBseSB8fCAoTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoYXBwbHkpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIHNhZmVcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEMsIGFyZ3NMZW5ndGgsIGFyZ3MpIHtcbiAgaWYgKCFoYXNPd24oZmFjdG9yaWVzLCBhcmdzTGVuZ3RoKSkge1xuICAgIHZhciBsaXN0ID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gJEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBqb2luKGxpc3QsICcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIGRldGVjdGlvblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/ICRGdW5jdGlvbi5iaW5kIDogZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCBtZXRob2QpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgcmV0dXJuIHVuY3VycnlUaGlzKGFDYWxsYWJsZShPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwga2V5KVttZXRob2RdKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbikge1xuICAvLyBOYXNob3JuIGJ1ZzpcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEyOFxuICAvLyAgIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xMTMwXG4gIGlmIChjbGFzc29mUmF3KGZuKSA9PT0gJ0Z1bmN0aW9uJykgcmV0dXJuIHVuY3VycnlUaGlzKGZuKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xudmFyIHVuY3VycnlUaGlzV2l0aEJpbmQgPSBOQVRJVkVfQklORCAmJiBGdW5jdGlvblByb3RvdHlwZS5iaW5kLmJpbmQoY2FsbCwgY2FsbCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyB1bmN1cnJ5VGhpc1dpdGhCaW5kIDogZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGwuYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoYXJndW1lbnQpID8gYXJndW1lbnQgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pIDogZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpXG4gICAgfHwgZ2V0TWV0aG9kKGl0LCAnQEBpdGVyYXRvcicpXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBnZXRJdGVyYXRvck1ldGhvZChhcmd1bWVudCkgOiB1c2luZ0l0ZXJhdG9yO1xuICBpZiAoYUNhbGxhYmxlKGl0ZXJhdG9yTWV0aG9kKSkgcmV0dXJuIGFuT2JqZWN0KGNhbGwoaXRlcmF0b3JNZXRob2QsIGFyZ3VtZW50KSk7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZXBsYWNlcikge1xuICBpZiAoaXNDYWxsYWJsZShyZXBsYWNlcikpIHJldHVybiByZXBsYWNlcjtcbiAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmV0dXJuO1xuICB2YXIgcmF3TGVuZ3RoID0gcmVwbGFjZXIubGVuZ3RoO1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0xlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGVsZW1lbnQgPSByZXBsYWNlcltpXTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT0gJ3N0cmluZycpIHB1c2goa2V5cywgZWxlbWVudCk7XG4gICAgZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT0gJ251bWJlcicgfHwgY2xhc3NvZihlbGVtZW50KSA9PT0gJ051bWJlcicgfHwgY2xhc3NvZihlbGVtZW50KSA9PT0gJ1N0cmluZycpIHB1c2goa2V5cywgdG9TdHJpbmcoZWxlbWVudCkpO1xuICB9XG4gIHZhciBrZXlzTGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciByb290ID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHJvb3QpIHtcbiAgICAgIHJvb3QgPSBmYWxzZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkodGhpcykpIHJldHVybiB2YWx1ZTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXNMZW5ndGg7IGorKykgaWYgKGtleXNbal0gPT09IGtleSkgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gaXNOdWxsT3JVbmRlZmluZWQoZnVuYykgPyB1bmRlZmluZWQgOiBhQ2FsbGFibGUoZnVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZG9zL25vLXZ1bG5lcmFibGUgLS0gc2FmZVxudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoYXJBdChjaCwgMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW3N0cmluZ1NsaWNlKGNoLCAxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoYXJBdChjaCwgMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaGFyQXQoY2gsIDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICBjaGVjayh0eXBlb2YgdGhpcyA9PSAnb2JqZWN0JyAmJiB0aGlzKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoe30uaGFzT3duUHJvcGVydHkpO1xuXG4vLyBgSGFzT3duUHJvcGVydHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1oYXNvd25wcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1oYXNvd24gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaGFzT3duIHx8IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eSh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gISRPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcblxudmFyIFJFUVVJUkVEID0gZmFsc2U7XG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgaWQrKywgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIFJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhc093bihpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBlbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIG1ldGEuZW5hYmxlID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICBSRVFVSVJFRCA9IHRydWU7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mO1xuICB2YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdGVzdFtNRVRBREFUQV0gPSAxO1xuXG4gIC8vIHByZXZlbnQgZXhwb3Npbmcgb2YgbWV0YWRhdGEga2V5XG4gIGlmIChnZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QpLmxlbmd0aCkge1xuICAgIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVzdWx0W2ldID09PSBNRVRBREFUQSkge1xuICAgICAgICAgIHNwbGljZShyZXN1bHQsIGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZ2V0T3duUHJvcGVydHlOYW1lczogZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlLmZcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5hYmxlOiBlbmFibGUsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWtEYXRhOiBnZXRXZWFrRGF0YSxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5oaWRkZW5LZXlzW01FVEFEQVRBXSA9IHRydWU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqL1xuICBzdG9yZS5nZXQgPSBzdG9yZS5nZXQ7XG4gIHN0b3JlLmhhcyA9IHN0b3JlLmhhcztcbiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBzdG9yZS5zZXQoaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5nZXQoaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuaGFzKGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09PSAnQXJyYXknO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3RcbnZhciBkb2N1bWVudEFsbCA9IHR5cGVvZiBkb2N1bWVudCA9PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5hbGw7XG5cbi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdHlwZW9mLXVuZGVmaW5lZCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgZG9jdW1lbnRBbGwgPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnRBbGwgIT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsO1xufSA6IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBjb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIGNvbnN0cnVjdG9yUmVnRXhwID0gL15cXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXFxiLztcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoY29uc3RydWN0b3JSZWdFeHAuZXhlYyk7XG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC50ZXN0KG5vb3ApO1xuXG52YXIgaXNDb25zdHJ1Y3Rvck1vZGVybiA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0cnVjdChub29wLCBbXSwgYXJndW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxudmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgc3dpdGNoIChjbGFzc29mKGFyZ3VtZW50KSkge1xuICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0dlbmVyYXRvckZ1bmN0aW9uJzpcbiAgICBjYXNlICdBc3luY0dlbmVyYXRvckZ1bmN0aW9uJzogcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gd2UgY2FuJ3QgY2hlY2sgLnByb3RvdHlwZSBzaW5jZSBjb25zdHJ1Y3RvcnMgcHJvZHVjZWQgYnkgLmJpbmQgaGF2ZW4ndCBpdFxuICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lc1xuICAgIC8vIChmb3IgZXhhbXBsZSwgYERPTVF1YWRgIGFuZCBzaW1pbGFyIGluIEZGNDEtKVxuICAgIHJldHVybiBJTkNPUlJFQ1RfVE9fU1RSSU5HIHx8ICEhZXhlYyhjb25zdHJ1Y3RvclJlZ0V4cCwgaW5zcGVjdFNvdXJjZShhcmd1bWVudCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5pc0NvbnN0cnVjdG9yTGVnYWN5LnNoYW0gPSB0cnVlO1xuXG4vLyBgSXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsZWQ7XG4gIHJldHVybiBpc0NvbnN0cnVjdG9yTW9kZXJuKGlzQ29uc3RydWN0b3JNb2Rlcm4uY2FsbClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlOyB9KVxuICAgIHx8IGNhbGxlZDtcbn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIHdlIGNhbid0IHVzZSBqdXN0IGBpdCA9PSBudWxsYCBzaW5jZSBvZiBgZG9jdW1lbnQuYWxsYCBzcGVjaWFsIGNhc2Vcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3QtYWVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IG51bGwgfHwgaXQgPT09IHVuZGVmaW5lZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc09iamVjdChhcmd1bWVudCkgfHwgYXJndW1lbnQgPT09IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09PSAnUmVnRXhwJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsICRPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxudmFyIFJlc3VsdFByb3RvdHlwZSA9IFJlc3VsdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19SRUNPUkQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfUkVDT1JEKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19SRUNPUkQpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlLml0ZXJhdG9yO1xuICB9IGVsc2UgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKCFpdGVyRm4pIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gSVNfUkVDT1JEID8gaXRlcmFibGUubmV4dCA6IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG4gICAgaWYgKCFpbm5lclJlc3VsdCkge1xuICAgICAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpbm5lclJlc3VsdCA9IGNhbGwoaW5uZXJSZXN1bHQsIGl0ZXJhdG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpbm5lckVycm9yID0gdHJ1ZTtcbiAgICBpbm5lclJlc3VsdCA9IGVycm9yO1xuICB9XG4gIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgaWYgKGlubmVyRXJyb3IpIHRocm93IGlubmVyUmVzdWx0O1xuICBhbk9iamVjdChpbm5lclJlc3VsdCk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuXG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgZGVmaW5lQnVpbHRJbihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvciwgeyBuYW1lOiBERUZBVUxUIH0pO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgJFN0cmluZyA9IFN0cmluZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbnZhciBDT05GSUdVUkFCTEVfTEVOR1RIID0gREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDggfSkubGVuZ3RoICE9PSA4O1xufSk7XG5cbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxudmFyIG1ha2VCdWlsdEluID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKHN0cmluZ1NsaWNlKCRTdHJpbmcobmFtZSksIDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICBuYW1lID0gJ1snICsgcmVwbGFjZSgkU3RyaW5nKG5hbWUpLCAvXlN5bWJvbFxcKChbXildKilcXCkuKiQvLCAnJDEnKSArICddJztcbiAgfVxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlcikgbmFtZSA9ICdnZXQgJyArIG5hbWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTtcbiAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgZWxzZSB2YWx1ZS5uYW1lID0gbmFtZTtcbiAgfVxuICBpZiAoQ09ORklHVVJBQkxFX0xFTkdUSCAmJiBvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnYXJpdHknKSAmJiB2YWx1ZS5sZW5ndGggIT09IG9wdGlvbnMuYXJpdHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ3Byb3RvdHlwZScsIHsgd3JpdGFibGU6IGZhbHNlIH0pO1xuICAgIC8vIGluIFY4IH4gQ2hyb21lIDUzLCBwcm90b3R5cGVzIG9mIHNvbWUgbWV0aG9kcywgbGlrZSBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AsIGFyZSBub24td3JpdGFibGVcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkge1xuICAgIHN0YXRlLnNvdXJjZSA9IGpvaW4oVEVNUExBVEUsIHR5cGVvZiBuYW1lID09ICdzdHJpbmcnID8gbmFtZSA6ICcnKTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRlbmQtbmF0aXZlIC0tIHJlcXVpcmVkXG5GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBtYWtlQnVpbHRJbihmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUodGhpcykgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0sICd0b1N0cmluZycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudHJ1bmNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXRydW5jIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC50cnVuYyB8fCBmdW5jdGlvbiB0cnVuYyh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHJldHVybiAobiA+IDAgPyBmbG9vciA6IGNlaWwpKG4pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc1JlZ0V4cChpdCkpIHtcbiAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gICAgPyBkb2N1bWVudC5kb21haW4gJiYgYWN0aXZlWERvY3VtZW50XG4gICAgICA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSAvLyBvbGQgSUVcbiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKClcbiAgICA6IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KTsgLy8gV1NIXG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1jcmVhdGUgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllc01vZHVsZS5mKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBFTlVNRVJBQkxFID0gJ2VudW1lcmFibGUnO1xudmFyIENPTkZJR1VSQUJMRSA9ICdjb25maWd1cmFibGUnO1xudmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJztcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKHR5cGVvZiBPID09PSAnZnVuY3Rpb24nICYmIFAgPT09ICdwcm90b3R5cGUnICYmICd2YWx1ZScgaW4gQXR0cmlidXRlcyAmJiBXUklUQUJMRSBpbiBBdHRyaWJ1dGVzICYmICFBdHRyaWJ1dGVzW1dSSVRBQkxFXSkge1xuICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgICBpZiAoY3VycmVudCAmJiBjdXJyZW50W1dSSVRBQkxFXSkge1xuICAgICAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gICAgICBBdHRyaWJ1dGVzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IENPTkZJR1VSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tDT05GSUdVUkFCTEVdIDogY3VycmVudFtDT05GSUdVUkFCTEVdLFxuICAgICAgICBlbnVtZXJhYmxlOiBFTlVNRVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0VOVU1FUkFCTEVdIDogY3VycmVudFtFTlVNRVJBQkxFXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xufSA6ICRkZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09PSAnV2luZG93J1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gJE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgaWYgKGhhc093bihvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgJE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09PSAnQXJyYXlCdWZmZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlO1xufSA6ICRpc0V4dGVuc2libGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhc093bihPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWtleXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXNBY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtYWNjZXNzb3InKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXNBY2Nlc3NvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJywgJ3NldCcpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGluIHNvbWUgSUUgdmVyc2lvbnMsIGBwcm9wZXJ0eUlzRW51bWVyYWJsZWAgcmV0dXJucyBpbmNvcnJlY3QgcmVzdWx0IG9uIGludGVnZXIga2V5c1xuLy8gb2YgYG51bGxgIHByb3RvdHlwZSBvYmplY3RzXG52YXIgSUVfQlVHID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWNyZWF0ZSAtLSBzYWZlXG4gIHZhciBPID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgT1syXSA9IDI7XG4gIHJldHVybiAhcHJvcGVydHlJc0VudW1lcmFibGUoTywgMik7XG59KTtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIElFX1dPUktBUk9VTkQgPSBJRV9CVUcgJiYgb2JqZWN0R2V0UHJvdG90eXBlT2YoTykgPT09IG51bGw7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCAoSUVfV09SS0FST1VORCA/IGtleSBpbiBPIDogcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkpIHtcbiAgICAgICAgcHVzaChyZXN1bHQsIFRPX0VOVFJJRVMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgT2JqZWN0LmVudHJpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4gIGVudHJpZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiAgdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKHByZWYgPT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChpc0NhbGxhYmxlKGZuID0gaW5wdXQudmFsdWVPZikgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUYXJnZXQsIFNvdXJjZSwga2V5KSB7XG4gIGtleSBpbiBUYXJnZXQgfHwgZGVmaW5lUHJvcGVydHkoVGFyZ2V0LCBrZXksIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBTb3VyY2Vba2V5XTsgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBTb3VyY2Vba2V5XSA9IGl0OyB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKGlzQ2FsbGFibGUoZXhlYykpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbChleGVjLCBSLCBTKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSBhbk9iamVjdChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgPT09ICdSZWdFeHAnKSByZXR1cm4gY2FsbChyZWdleHBFeGVjLCBSLCBTKTtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJ3Qgd29yayBmb3IgLyguPyk/L1xuICAgICAgY2FsbChuYXRpdmVSZXBsYWNlLCBtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoICYmIGdyb3Vwcykge1xuICAgICAgbWF0Y2guZ3JvdXBzID0gb2JqZWN0ID0gY3JlYXRlKG51bGwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncm91cCA9IGdyb3Vwc1tpXTtcbiAgICAgICAgb2JqZWN0W2dyb3VwWzBdXSA9IG1hdGNoW2dyb3VwWzFdXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmhhc0luZGljZXMpIHJlc3VsdCArPSAnZCc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnVuaWNvZGVTZXRzKSByZXN1bHQgKz0gJ3YnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSKSB7XG4gIHZhciBmbGFncyA9IFIuZmxhZ3M7XG4gIHJldHVybiBmbGFncyA9PT0gdW5kZWZpbmVkICYmICEoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGUpICYmICFoYXNPd24oUiwgJ2ZsYWdzJykgJiYgaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIFIpXG4gICAgPyBjYWxsKHJlZ0V4cEZsYWdzLCBSKSA6IGZsYWdzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJ2EnLCAneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnYWJjZCcpICE9PSBudWxsO1xufSk7XG5cbi8vIFVDIEJyb3dzZXIgYnVnXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTAwOFxudmFyIE1JU1NFRF9TVElDS1kgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEkUmVnRXhwKCdhJywgJ3knKS5zdGlja3k7XG59KTtcblxudmFyIEJST0tFTl9DQVJFVCA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gJFJlZ0V4cCgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9PSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUudGVzdCgnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcoPzxhPmIpJywgJ2cnKSAtPiAvKD88YT5iKS9nIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoaXQpKSB0aHJvdyBuZXcgJFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxUaGlzW1NIQVJFRF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoU0hBUkVELCB7fSk7XG5cbihzdG9yZS52ZXJzaW9ucyB8fCAoc3RvcmUudmVyc2lvbnMgPSBbXSkpLnB1c2goe1xuICB2ZXJzaW9uOiAnMy4zNi4wJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE0LTIwMjQgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknLFxuICBsaWNlbnNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvYmxvYi92My4zNi4wL0xJQ0VOU0UnLFxuICBzb3VyY2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcydcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgfHwge30pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyT3JJbmZpbml0eShwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pXG4gICAgICAgICAgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HXG4gICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKVxuICAgICAgICAgIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ15bJyArIHdoaXRlc3BhY2VzICsgJ10rJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoJyhefFteJyArIHdoaXRlc3BhY2VzICsgJ10pWycgKyB3aGl0ZXNwYWNlcyArICddKyQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgcnRyaW0sICckMScpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgJFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCdzeW1ib2wgZGV0ZWN0aW9uJyk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgLy8gbmI6IERvIG5vdCBjYWxsIGBTdHJpbmdgIGRpcmVjdGx5IHRvIGF2b2lkIHRoaXMgYmVpbmcgb3B0aW1pemVkIG91dCB0byBgc3ltYm9sKycnYCB3aGljaCB3aWxsLFxuICAvLyBvZiBjb3Vyc2UsIGZhaWwuXG4gIHJldHVybiAhJFN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHZhciBTeW1ib2xQcm90b3R5cGUgPSBTeW1ib2wgJiYgU3ltYm9sLnByb3RvdHlwZTtcbiAgdmFyIHZhbHVlT2YgPSBTeW1ib2xQcm90b3R5cGUgJiYgU3ltYm9sUHJvdG90eXBlLnZhbHVlT2Y7XG4gIHZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbiAgaWYgKFN5bWJvbFByb3RvdHlwZSAmJiAhU3ltYm9sUHJvdG90eXBlW1RPX1BSSU1JVElWRV0pIHtcbiAgICAvLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIC5sZW5ndGhcbiAgICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBmdW5jdGlvbiAoaGludCkge1xuICAgICAgcmV0dXJuIGNhbGwodmFsdWVPZiwgdGhpcyk7XG4gICAgfSwgeyBhcml0eTogMSB9KTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHNhZmUgKi9cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTCAmJiAhIVN5bWJvbFsnZm9yJ10gJiYgISFTeW1ib2wua2V5Rm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG4vLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdGhpc251bWJlcnZhbHVlXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKDEuMC52YWx1ZU9mKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdHJ1bmMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC10cnVuYycpO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogdHJ1bmMobnVtYmVyKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBsZW4gPSB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KTtcbiAgcmV0dXJuIGxlbiA+IDAgPyBtaW4obGVuLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IGtleSArICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywge1xuICAgIHZhbHVlOiA0MixcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSkucHJvdG90eXBlICE9PSA0Mjtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoU3RyaW5nKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sWydmb3InXSB8fCBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBOQVRJVkVfU1lNQk9MICYmIGhhc093bihTeW1ib2wsIG5hbWUpXG4gICAgICA/IFN5bWJvbFtuYW1lXVxuICAgICAgOiBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoRSk7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgbGVuKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKG4gKyAxKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gRkY5OSsgYnVnXG52YXIgQlJPS0VOX09OX1NQQVJTRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1pbmNsdWRlcyAtLSBkZXRlY3Rpb25cbiAgcmV0dXJuICFBcnJheSgxKS5pbmNsdWRlcygpO1xufSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJST0tFTl9PTl9TUEFSU0UgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lJyk7XG52YXIgY3JlYXRlSXRlclJlc3VsdE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlci1yZXN1bHQtb2JqZWN0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbiAgc3dpdGNoIChzdGF0ZS5raW5kKSB7XG4gICAgY2FzZSAna2V5cyc6IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGluZGV4LCBmYWxzZSk7XG4gICAgY2FzZSAndmFsdWVzJzogcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodGFyZ2V0W2luZGV4XSwgZmFsc2UpO1xuICB9IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGZhbHNlKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBuYXRpdmVTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yKSAmJiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gJEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkYXRlVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcbnZhciBEYXRlUHJvdG90eXBlID0gRGF0ZS5wcm90b3R5cGU7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghaGFzT3duKERhdGVQcm90b3R5cGUsIFRPX1BSSU1JVElWRSkpIHtcbiAgZGVmaW5lQnVpbHRJbihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGVU5DVElPTl9OQU1FX0VYSVNUUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuRVhJU1RTO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZyk7XG52YXIgbmFtZVJFID0gL2Z1bmN0aW9uXFxiKD86XFxzfFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwvXFwvW15cXG5cXHJdKltcXG5cXHJdKykqKFteXFxzKC9dKikvO1xudmFyIHJlZ0V4cEV4ZWMgPSB1bmN1cnJ5VGhpcyhuYW1lUkUuZXhlYyk7XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhRlVOQ1RJT05fTkFNRV9FWElTVFMpIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBnZXRSZXBsYWNlckZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1qc29uLXJlcGxhY2VyLWZ1bmN0aW9uJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxudmFyIHRlc3RlciA9IC9bXFx1RDgwMC1cXHVERkZGXS9nO1xudmFyIGxvdyA9IC9eW1xcdUQ4MDAtXFx1REJGRl0kLztcbnZhciBoaSA9IC9eW1xcdURDMDAtXFx1REZGRl0kLztcblxudmFyIFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpKCdzdHJpbmdpZnkgZGV0ZWN0aW9uJyk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9PSAne30nXG4gICAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPT0gJ3t9Jztcbn0pO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC13ZWxsLWZvcm1lZC1zdHJpbmdpZnlcbnZhciBJTExfRk9STUVEX1VOSUNPREUgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkc3RyaW5naWZ5KCdcXHVERjA2XFx1RDgzNCcpICE9PSAnXCJcXFxcdWRmMDZcXFxcdWQ4MzRcIidcbiAgICB8fCAkc3RyaW5naWZ5KCdcXHVERUFEJykgIT09ICdcIlxcXFx1ZGVhZFwiJztcbn0pO1xuXG52YXIgc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggPSBmdW5jdGlvbiAoaXQsIHJlcGxhY2VyKSB7XG4gIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICB2YXIgJHJlcGxhY2VyID0gZ2V0UmVwbGFjZXJGdW5jdGlvbihyZXBsYWNlcik7XG4gIGlmICghaXNDYWxsYWJsZSgkcmVwbGFjZXIpICYmIChpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICBhcmdzWzFdID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAvLyBzb21lIG9sZCBpbXBsZW1lbnRhdGlvbnMgKGxpa2UgV2ViS2l0KSBjb3VsZCBwYXNzIG51bWJlcnMgYXMga2V5c1xuICAgIGlmIChpc0NhbGxhYmxlKCRyZXBsYWNlcikpIHZhbHVlID0gY2FsbCgkcmVwbGFjZXIsIHRoaXMsICRTdHJpbmcoa2V5KSwgdmFsdWUpO1xuICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgUHVyZU51bWJlck5hbWVzcGFjZSA9IHBhdGhbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KGl0LCAwKTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBjaGFyQ29kZUF0KGl0LCAyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGNoYXJDb2RlQXQoaXQsIDEpKSB7XG4gICAgICAgIC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNjY6XG4gICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgcmFkaXggPSAyO1xuICAgICAgICAgIG1heENvZGUgPSA0OTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGNhc2UgNzk6XG4gICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgIHJhZGl4ID0gODtcbiAgICAgICAgICBtYXhDb2RlID0gNTU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IHN0cmluZ1NsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpO1xuXG52YXIgY2FsbGVkV2l0aE5ldyA9IGZ1bmN0aW9uIChkdW1teSkge1xuICAvLyBpbmNsdWRlcyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KTtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxudmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gIHJldHVybiBjYWxsZWRXaXRoTmV3KHRoaXMpID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCB0aGlzLCBOdW1iZXJXcmFwcGVyKSA6IG47XG59O1xuXG5OdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbmlmIChGT1JDRUQgJiYgIUlTX1BVUkUpIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIE51bWJlcjogTnVtYmVyV3JhcHBlclxufSk7XG5cbi8vIFVzZSBgaW50ZXJuYWwvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzYCBoZWxwZXIgaW4gYGNvcmUtanNANGBcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihzb3VyY2UsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuXG5pZiAoSVNfUFVSRSAmJiBQdXJlTnVtYmVyTmFtZXNwYWNlKSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHBhdGhbTlVNQkVSXSwgUHVyZU51bWJlck5hbWVzcGFjZSk7XG5pZiAoRk9SQ0VEIHx8IElTX1BVUkUpIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMocGF0aFtOVU1CRVJdLCBOYXRpdmVOdW1iZXIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGT1JDRUQgPSAhREVTQ1JJUFRPUlMgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBrZXksIGRlc2NyaXB0b3I7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5ID0ga2V5c1tpbmRleCsrXSk7XG4gICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IHNldFByb3RvdHlwZU9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgZGVmaW5lQnVpbHRJbihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBuYXRpdmVDb25zdHJ1Y3QgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ2NvbnN0cnVjdCcpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgcHVzaCA9IFtdLnB1c2g7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xuXG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG52YXIgRk9SQ0VEID0gTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUc7XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06IEZPUkNFRCB9LCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFDb25zdHJ1Y3RvcihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFDb25zdHJ1Y3Rvcihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiBuYXRpdmVDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgIGFwcGx5KHB1c2gsICRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGFwcGx5KGJpbmQsIFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdFByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IGFwcGx5KFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRSZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBwcm94eUFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb3h5LWFjY2Vzc29yJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xudmFyIE5hdGl2ZVJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gTmF0aXZlUmVnRXhwLnByb3RvdHlwZTtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoUmVnRXhwUHJvdG90eXBlLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIFRPRE86IFVzZSBvbmx5IHByb3BlciBSZWdFeHBJZGVudGlmaWVyTmFtZVxudmFyIElTX05DRyA9IC9eXFw/PFteXFxzXFxkISMlJiorPD0+QF5dW15cXHMhIyUmKis8PT5AXl0qPi87XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBNSVNTRURfU1RJQ0tZID0gc3RpY2t5SGVscGVycy5NSVNTRURfU1RJQ0tZO1xudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG5cbnZhciBCQVNFX0ZPUkNFRCA9IERFU0NSSVBUT1JTICYmXG4gICghQ09SUkVDVF9ORVcgfHwgTUlTU0VEX1NUSUNLWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRyB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmUyW01BVENIXSA9IGZhbHNlO1xuICAgIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gICAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT09IHJlMiB8fCBTdHJpbmcoTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSkgIT09ICcvYS9pJztcbiAgfSkpO1xuXG52YXIgaGFuZGxlRG90QWxsID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgYnJhY2tldHMgPSBmYWxzZTtcbiAgdmFyIGNocjtcbiAgZm9yICg7IGluZGV4IDw9IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNociA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIHJlc3VsdCArPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWJyYWNrZXRzICYmIGNociA9PT0gJy4nKSB7XG4gICAgICByZXN1bHQgKz0gJ1tcXFxcc1xcXFxTXSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaHIgPT09ICdbJykge1xuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICAgIGJyYWNrZXRzID0gZmFsc2U7XG4gICAgICB9IHJlc3VsdCArPSBjaHI7XG4gICAgfVxuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgaGFuZGxlTkNHID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbmFtZWQgPSBbXTtcbiAgdmFyIG5hbWVzID0gY3JlYXRlKG51bGwpO1xuICB2YXIgYnJhY2tldHMgPSBmYWxzZTtcbiAgdmFyIG5jZyA9IGZhbHNlO1xuICB2YXIgZ3JvdXBpZCA9IDA7XG4gIHZhciBncm91cG5hbWUgPSAnJztcbiAgdmFyIGNocjtcbiAgZm9yICg7IGluZGV4IDw9IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNociA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgICBpZiAoY2hyID09PSAnXFxcXCcpIHtcbiAgICAgIGNociArPSBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldFJlZ0V4cEZsYWdzKHJhd1BhdHRlcm4pO1xuICAgIH1cblxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKHBhdHRlcm4pO1xuICAgIGZsYWdzID0gZmxhZ3MgPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcoZmxhZ3MpO1xuICAgIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX0RPVF9BTEwgJiYgJ2RvdEFsbCcgaW4gcmUxKSB7XG4gICAgICBkb3RBbGwgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICdzJykgPiAtMTtcbiAgICAgIGlmIChkb3RBbGwpIGZsYWdzID0gcmVwbGFjZShmbGFncywgL3MvZywgJycpO1xuICAgIH1cblxuICAgIHJhd0ZsYWdzID0gZmxhZ3M7XG5cbiAgICBpZiAoTUlTU0VEX1NUSUNLWSAmJiAnc3RpY2t5JyBpbiByZTEpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgc3RyaW5nSW5kZXhPZihmbGFncywgJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSAmJiBVTlNVUFBPUlRFRF9ZKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC95L2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoVU5TVVBQT1JURURfTkNHKSB7XG4gICAgICBoYW5kbGVkID0gaGFuZGxlTkNHKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IGhhbmRsZWRbMF07XG4gICAgICBncm91cHMgPSBoYW5kbGVkWzFdO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IGluaGVyaXRJZlJlcXVpcmVkKE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncyksIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuXG4gICAgaWYgKGRvdEFsbCB8fCBzdGlja3kgfHwgZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZShyZXN1bHQpO1xuICAgICAgaWYgKGRvdEFsbCkge1xuICAgICAgICBzdGF0ZS5kb3RBbGwgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5yYXcgPSBSZWdFeHBXcmFwcGVyKGhhbmRsZURvdEFsbChwYXR0ZXJuKSwgcmF3RmxhZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKHN0aWNreSkgc3RhdGUuc3RpY2t5ID0gdHJ1ZTtcbiAgICAgIGlmIChncm91cHMubGVuZ3RoKSBzdGF0ZS5ncm91cHMgPSBncm91cHM7XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm4gIT09IHJhd1BhdHRlcm4pIHRyeSB7XG4gICAgICAvLyBmYWlscyBpbiBvbGQgZW5naW5lcywgYnV0IHdlIGhhdmUgbm8gYWx0ZXJuYXRpdmVzIGZvciB1bnN1cHBvcnRlZCByZWdleCBzeW50YXhcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzb3VyY2UnLCByYXdQYXR0ZXJuID09PSAnJyA/ICcoPzopJyA6IHJhd1BhdHRlcm4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5QWNjZXNzb3IoUmVnRXhwV3JhcHBlciwgTmF0aXZlUmVnRXhwLCBrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIsIHsgY29uc3RydWN0b3I6IHRydWUgfSk7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xuXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIG5hdGl2ZVRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZVRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuYXRpdmVUb1N0cmluZy5uYW1lICE9PSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIGRlZmluZUJ1aWx0SW4oUmVnRXhwUHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHBhdHRlcm4gPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciBmbGFncyA9ICR0b1N0cmluZyhnZXRSZWdFeHBGbGFncyhSKSk7XG4gICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQtb2JqZWN0c1xuY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+c3RyaW5nSW5kZXhPZihcbiAgICAgIHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpLFxuICAgICAgdG9TdHJpbmcobm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpKSxcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChwb2ludCwgZmFsc2UpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLXVzZWxlc3MtZG9sbGFyLXJlcGxhY2VtZW50cyAtLSBmYWxzZSBwb3NpdGl2ZVxuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3JlcGxhY2UnLCBmdW5jdGlvbiAoXywgbmF0aXZlUmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBpc051bGxPclVuZGVmaW5lZChzZWFyY2hWYWx1ZSkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VhcmNoVmFsdWUsIFJFUExBQ0UpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyXG4gICAgICAgID8gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBjYWxsKG5hdGl2ZVJlcGxhY2UsIHRvU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAoc3RyaW5nLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXBsYWNlVmFsdWUgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsIFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsICckPCcpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcngsIFMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIHZhciBmdWxsVW5pY29kZTtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICBwdXNoKHJlc3VsdHMsIHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcblxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSB0b1N0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlck9ySW5maW5pdHkocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIHZhciByZXBsYWNlbWVudDtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBwdXNoKGNhcHR1cmVzLCBtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBjb25jYXQoW21hdGNoZWRdLCBjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHB1c2gocmVwbGFjZXJBcmdzLCBuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IHRvU3RyaW5nKGFwcGx5KHJlcGxhY2VWYWx1ZSwgdW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcbn0sICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyB8fCAhUkVQTEFDRV9LRUVQU18kMCB8fCBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHN0cmluZ1NsaWNlKHRoYXQsIGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpO1xudmFyIFNZTUJPTCA9ICdTeW1ib2wnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcblxuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIGZhbGxiYWNrRGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn07XG5cbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9PSA3O1xufSkgPyBmYWxsYmFja0RlZmluZVByb3BlcnR5IDogbmF0aXZlRGVmaW5lUHJvcGVydHk7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZywgZGVzY3JpcHRpb24pIHtcbiAgdmFyIHN5bWJvbCA9IEFsbFN5bWJvbHNbdGFnXSA9IG5hdGl2ZU9iamVjdENyZWF0ZShTeW1ib2xQcm90b3R5cGUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwge1xuICAgIHR5cGU6IFNZTUJPTCxcbiAgICB0YWc6IHRhZyxcbiAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHN5bWJvbC5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICByZXR1cm4gc3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgaWYgKE8gPT09IE9iamVjdFByb3RvdHlwZSkgJGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFAsIEF0dHJpYnV0ZXMpO1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXNPd24oTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmF0aXZlT2JqZWN0Q3JlYXRlKG51bGwpKSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9ICFhcmd1bWVudHMubGVuZ3RoIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogJHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHRhZyA9IHVpZChkZXNjcmlwdGlvbik7XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyICR0aGlzID0gdGhpcyA9PT0gdW5kZWZpbmVkID8gZ2xvYmFsIDogdGhpcztcbiAgICAgIGlmICgkdGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bigkdGhpcywgSElEREVOKSAmJiBoYXNPd24oJHRoaXNbSElEREVOXSwgdGFnKSkgJHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSk7XG4gICAgICB0cnkge1xuICAgICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKCR0aGlzLCB0YWcsIGRlc2NyaXB0b3IpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSkgdGhyb3cgZXJyb3I7XG4gICAgICAgIGZhbGxiYWNrRGVmaW5lUHJvcGVydHkoJHRoaXMsIHRhZywgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBkZWZpbmVCdWlsdEluKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgZGVmaW5lQnVpbHRJbihPYmplY3RQcm90b3R5cGUsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmRlZmluZVN5bWJvbFRvUHJpbWl0aXZlKCk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCIvLyBgU3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvbmAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25cbid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCdkZXNjcmlwdGlvbiBkZXRlY3Rpb24nKSkgPT09ICdTeW1ib2woZGVzY3JpcHRpb24gZGV0ZWN0aW9uKSc7XG4gIHZhciB0aGlzU3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciBzeW1ib2xEZXNjcmlwdGl2ZVN0cmluZyA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IHRoaXNTeW1ib2xWYWx1ZSh0aGlzKTtcbiAgICAgIGlmIChoYXNPd24oRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcoc3ltYm9sKTtcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24nKTtcblxudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wuZm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1yZWdpc3RyeS1kZXRlY3Rpb24nKTtcblxudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgbmV3IFR5cGVFcnJvcih0cnlUb1N0cmluZyhzeW0pICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzT3duKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtZGVmaW5lLXRvLXByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnRvUHJpbWl0aXZlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9wcmltaXRpdmVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmRlZmluZVN5bWJvbFRvUHJpbWl0aXZlKCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBzZXRUb1N0cmluZ1RhZyhDb2xsZWN0aW9uUHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUsIHRydWUpO1xuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpO1xufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlLCAnRE9NVG9rZW5MaXN0Jyk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgZnVuY3Rpb24gZ2V0Q29va2llcygpIHtcbiAgICBjb25zdCBjb29raWVTdHJpbmdzID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgY29uc3QgY29va2llcyA9IFtdO1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXlxcXFxzKihbXj1dKylcXFxccyo9XFxcXHMqKC4qPykkJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVTdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvb2tpZVN0ciA9IGNvb2tpZVN0cmluZ3NbaV07XG4gICAgICAgIGNvbnN0IG1hdGNoID0gcmVnZXguZXhlYyhjb29raWVTdHIpO1xuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBjb29raWVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogbWF0Y2hbMV0sXG4gICAgICAgICAgICB2YWx1ZTogbWF0Y2hbMl0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29va2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7XG4gICAgY29uc3QgY29va2llcyA9IGdldENvb2tpZXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNvb2tpZXNbaV0ubmFtZSA9PT0gbmFtZSkgcmV0dXJuIGNvb2tpZXNbaV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE0NTczMjIzL3NldC1jb29raWUtYW5kLWdldC1jb29raWUtd2l0aC1qYXZhc2NyaXB0XG5leHBvcnQgZnVuY3Rpb24gc2V0Q29va2llKG5hbWUsIHZhbHVlLCBkYXlzLCBkb21haW4sIHBhdGgpIHtcbiAgICBsZXQgZXhwaXJlcyA9ICcnO1xuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgIGV4cGlyZXMgPSAnOyBleHBpcmVzPScgKyBkYXRlLnRvVVRDU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChkb21haW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBleHBpcmVzICs9ICc7IGRvbWFpbj0nICsgZG9tYWluO1xuICAgIH1cbiAgICBpZiAocGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGV4cGlyZXMgKz0gJzsgcGF0aD0nICsgcGF0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBleHBpcmVzICs9ICc7IHBhdGg9Lyc7XG4gICAgfVxuICAgIGRvY3VtZW50LmNvb2tpZSA9XG4gICAgICAgIG5hbWUgKyAnPScgKyAodmFsdWUgfHwgJycpICsgZXhwaXJlcyArICc7IFNhbWVTaXRlPUxheCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVDb29raWUobmFtZSwgcGF0aCwgZG9tYWluKSB7XG4gICAgbGV0IHN0ciA9IG5hbWUgKyAnPTsgTWF4LUFnZT0tOTk5OTk5OTk7JztcbiAgICAvLyB0cnkgdG8gZGVsZXRlIHRoZSBjb29raWUgd2l0aG91dCBhbnkgcGF0aCBhbmQgZG9tYWluXG4gICAgZG9jdW1lbnQuY29va2llID0gc3RyO1xuICAgIHN0ciArPSAnIHBhdGg9JyArIChwYXRoIHx8ICcvJykgKyAnOyc7XG4gICAgLy8gdHJ5IHRvIGRlbGV0ZSB0aGUgY29va2llIHdpdGggcGF0aFxuICAgIGRvY3VtZW50LmNvb2tpZSA9IHN0cjtcbiAgICBpZiAoZG9tYWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3RyICs9ICcgZG9tYWluPScgKyBkb21haW4gKyAnOyc7XG4gICAgICAgIC8vIHRyeSB0byBkZWxldGUgdGhlIGNvb2tpZSB3aXRoIGRvbWFpbiBhbmQgcGF0aFxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBzdHI7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtnZXRDb29raWUsIHNldENvb2tpZSwgZGVsZXRlQ29va2llfSBmcm9tICcuL3V0aWxzL2Nvb2tpZXMnXG5cblxuZXhwb3J0IGNsYXNzIFRlc3RTdG9yZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGxcbiAgICB9XG5cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlXG4gICAgfVxuXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBkZWxldGUoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29va2llU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5jb29raWVOYW1lID0gbWFuYWdlci5zdG9yYWdlTmFtZVxuICAgICAgICB0aGlzLmNvb2tpZURvbWFpbiA9IG1hbmFnZXIuY29va2llRG9tYWluXG4gICAgICAgIHRoaXMuY29va2llUGF0aCA9IG1hbmFnZXIuY29va2llUGF0aFxuICAgICAgICB0aGlzLmNvb2tpZUV4cGlyZXNBZnRlckRheXMgPSBtYW5hZ2VyLmNvb2tpZUV4cGlyZXNBZnRlckRheXNcbiAgICB9XG5cbiAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IGNvb2tpZSA9IGdldENvb2tpZSh0aGlzLmNvb2tpZU5hbWUpO1xuICAgICAgICByZXR1cm4gY29va2llXG4gICAgICAgICAgICA/IGNvb2tpZS52YWx1ZVxuICAgICAgICAgICAgOiBudWxsO1xuICAgIH1cblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gc2V0Q29va2llKHRoaXMuY29va2llTmFtZSwgdmFsdWUsIHRoaXMuY29va2llRXhwaXJlc0FmdGVyRGF5cywgdGhpcy5jb29raWVEb21haW4sIHRoaXMuY29va2llUGF0aClcbiAgICB9XG5cbiAgICBkZWxldGUoKSB7XG4gICAgICAgIHJldHVybiBkZWxldGVDb29raWUodGhpcy5jb29raWVOYW1lKTtcbiAgICB9XG59XG5cbmNsYXNzIFN0b3JhZ2VTdG9yZSB7XG4gICAgY29uc3RydWN0b3IobWFuYWdlciwgaGFuZGxlKSB7XG4gICAgICAgIHRoaXMua2V5ID0gbWFuYWdlci5zdG9yYWdlTmFtZTtcbiAgICAgICAgdGhpcy5oYW5kbGUgPSBoYW5kbGVcbiAgICB9XG5cbiAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZS5nZXRJdGVtKHRoaXMua2V5KTtcbiAgICB9XG5cbiAgICBnZXRXaXRoS2V5KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUuZ2V0SXRlbShrZXkpO1xuICAgIH1cblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUuc2V0SXRlbSh0aGlzLmtleSwgdmFsdWUpXG4gICAgfVxuXG4gICAgc2V0V2l0aEtleShrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZS5zZXRJdGVtKGtleSwgdmFsdWUpXG4gICAgfVxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUucmVtb3ZlSXRlbSh0aGlzLmtleSk7XG4gICAgfVxuXG4gICAgZGVsZXRlV2l0aEtleShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VTdG9yZSBleHRlbmRzIFN0b3JhZ2VTdG9yZSB7XG4gICAgY29uc3RydWN0b3IobWFuYWdlcil7XG4gICAgICAgIHN1cGVyKG1hbmFnZXIsIGxvY2FsU3RvcmFnZSlcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uU3RvcmFnZVN0b3JlIGV4dGVuZHMgU3RvcmFnZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihtYW5hZ2VyKXtcbiAgICAgICAgc3VwZXIobWFuYWdlciwgc2Vzc2lvblN0b3JhZ2UpXG4gICAgfVxufVxuXG5jb25zdCBzdG9yZXMgPSB7XG4gICAgJ2Nvb2tpZSc6IENvb2tpZVN0b3JlLFxuICAgICd0ZXN0JzogVGVzdFN0b3JlLFxuICAgICdsb2NhbFN0b3JhZ2UnOiBMb2NhbFN0b3JhZ2VTdG9yZSxcbiAgICAnc2Vzc2lvblN0b3JhZ2UnOiBTZXNzaW9uU3RvcmFnZVN0b3JlLFxufVxuXG5leHBvcnQgZGVmYXVsdCBzdG9yZXNcbiIsImltcG9ydCB7Z2V0Q29va2llcywgZGVsZXRlQ29va2llfSBmcm9tICcuL3V0aWxzL2Nvb2tpZXMnXG5pbXBvcnQge2RhdGFzZXQsIGFwcGx5RGF0YXNldH0gZnJvbSAnLi91dGlscy9jb21wYXQnXG5pbXBvcnQgc3RvcmVzLCB7IFNlc3Npb25TdG9yYWdlU3RvcmUgfSBmcm9tICcuL3N0b3JlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uc2VudE1hbmFnZXIge1xuXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBzdG9yZSwgYXV4aWxpYXJ5U3RvcmUpe1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyAvLyB0aGUgY29uZmlndXJhdGlvblxuXG4gICAgICAgIGlmIChzdG9yZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3JlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBuZXcgc3RvcmVzW3RoaXMuc3RvcmFnZU1ldGhvZF0odGhpcylcblxuICAgICAgICAvLyB3ZSBmYWxsIGJhY2sgdG8gdGhlIGNvb2tpZS1iYXNlZCBzdG9yZSBpZiB0aGUgc3RvcmUgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmICh0aGlzLnN0b3JlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aGlzLnN0b3JlID0gc3RvcmVzWydjb29raWUnXVxuXG4gICAgICAgIGlmIChhdXhpbGlhcnlTdG9yZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5hdXhpbGlhcnlTdG9yZSA9IGF1eGlsaWFyeVN0b3JlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuYXV4aWxpYXJ5U3RvcmUgPSBuZXcgU2Vzc2lvblN0b3JhZ2VTdG9yZSh0aGlzKVxuXG4gICAgICAgIHRoaXMuY29uc2VudHMgPSB0aGlzLmRlZmF1bHRDb25zZW50cyAvLyB0aGUgY29uc2VudCBzdGF0ZXMgb2YgdGhlIGNvbmZpZ3VyZWQgc2VydmljZXNcbiAgICAgICAgdGhpcy5jb25maXJtZWQgPSBmYWxzZSAvLyB0cnVlIGlmIHRoZSB1c2VyIGFjdGl2ZWx5IGNvbmZpcm1lZCBoaXMvaGVyIGNvbnNlbnRcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2UgLy8gdHJ1ZSBpZiB0aGUgc2VydmljZSBjb25maWcgY2hhbmdlZCBjb21wYXJlZCB0byB0aGUgY29va2llXG4gICAgICAgIHRoaXMuc3RhdGVzID0ge30gLy8ga2VlcCB0cmFjayBvZiB0aGUgY2hhbmdlIChlbmFibGVkLCBkaXNhYmxlZCkgb2YgaW5kaXZpZHVhbCBzZXJ2aWNlc1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0ge30gLy8ga2VlcCB0cmFjayBvZiB3aGljaCBzZXJ2aWNlcyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgYWxyZWFkeVxuICAgICAgICB0aGlzLmV4ZWN1dGVkT25jZSA9IHt9IC8va2VlcCB0cmFjayBvZiB3aGljaCBzZXJ2aWNlcyBoYXZlIGJlZW4gZXhlY3V0ZWQgYXQgbGVhc3Qgb25jZVxuICAgICAgICB0aGlzLndhdGNoZXJzID0gbmV3IFNldChbXSlcbiAgICAgICAgdGhpcy5sb2FkQ29uc2VudHMoKVxuICAgICAgICB0aGlzLmFwcGx5Q29uc2VudHMoKVxuICAgICAgICB0aGlzLnNhdmVkQ29uc2VudHMgPSB7Li4udGhpcy5jb25zZW50c31cbiAgICB9XG5cbiAgICBnZXQgc3RvcmFnZU1ldGhvZCgpe1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuc3RvcmFnZU1ldGhvZCB8fCAnY29va2llJ1xuICAgIH1cblxuICAgIGdldCBzdG9yYWdlTmFtZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuc3RvcmFnZU5hbWUgfHwgdGhpcy5jb25maWcuY29va2llTmFtZSB8fCAna2xhcm8nIC8vIGRlcHJlY2F0ZWQ6IGNvb2tpZU5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29va2llRG9tYWluKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb29raWVEb21haW4gfHwgdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgZ2V0IGNvb2tpZVBhdGgoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvb2tpZVBhdGggfHwgdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgZ2V0IGNvb2tpZUV4cGlyZXNBZnRlckRheXMoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmNvb2tpZUV4cGlyZXNBZnRlckRheXMgfHwgMTIwXG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRDb25zZW50cygpe1xuICAgICAgICBjb25zdCBjb25zZW50cyA9IHt9XG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5jb25maWcuc2VydmljZXMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gdGhpcy5jb25maWcuc2VydmljZXNbaV1cbiAgICAgICAgICAgIGNvbnNlbnRzW3NlcnZpY2UubmFtZV0gPSB0aGlzLmdldERlZmF1bHRDb25zZW50KHNlcnZpY2UpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnNlbnRzXG4gICAgfVxuXG4gICAgd2F0Y2god2F0Y2hlcil7XG4gICAgICAgIGlmICghdGhpcy53YXRjaGVycy5oYXMod2F0Y2hlcikpXG4gICAgICAgICAgICB0aGlzLndhdGNoZXJzLmFkZCh3YXRjaGVyKVxuICAgIH1cblxuICAgIHVud2F0Y2god2F0Y2hlcil7XG4gICAgICAgIGlmICh0aGlzLndhdGNoZXJzLmhhcyh3YXRjaGVyKSlcbiAgICAgICAgICAgIHRoaXMud2F0Y2hlcnMuZGVsZXRlKHdhdGNoZXIpXG4gICAgfVxuXG4gICAgbm90aWZ5KG5hbWUsIGRhdGEpe1xuICAgICAgICB0aGlzLndhdGNoZXJzLmZvckVhY2goKHdhdGNoZXIpID0+IHtcbiAgICAgICAgICAgIHdhdGNoZXIudXBkYXRlKHRoaXMsIG5hbWUsIGRhdGEpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZ2V0U2VydmljZShuYW1lKXtcbiAgICAgICAgY29uc3QgbWF0Y2hpbmdTZXJ2aWNlcyA9IHRoaXMuY29uZmlnLnNlcnZpY2VzLmZpbHRlcihzZXJ2aWNlPT5zZXJ2aWNlLm5hbWUgPT09IG5hbWUpXG4gICAgICAgIGlmIChtYXRjaGluZ1NlcnZpY2VzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hpbmdTZXJ2aWNlc1swXVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdENvbnNlbnQoc2VydmljZSl7XG4gICAgICAgIGxldCBjb25zZW50ID0gc2VydmljZS5kZWZhdWx0IHx8IHNlcnZpY2UucmVxdWlyZWRcbiAgICAgICAgaWYgKGNvbnNlbnQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGNvbnNlbnQgPSB0aGlzLmNvbmZpZy5kZWZhdWx0XG4gICAgICAgIGlmIChjb25zZW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb25zZW50ID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIGNvbnNlbnRcbiAgICB9XG5cbiAgICBjaGFuZ2VBbGwodmFsdWUpe1xuICAgICAgICBsZXQgY2hhbmdlZFNlcnZpY2VzID0gMFxuICAgICAgICB0aGlzLmNvbmZpZy5zZXJ2aWNlcy5maWx0ZXIoc2VydmljZSA9PiAhc2VydmljZS5jb250ZXh0dWFsQ29uc2VudE9ubHkpLm1hcChzZXJ2aWNlID0+IHtcbiAgICAgICAgICAgIGlmKHNlcnZpY2UucmVxdWlyZWQgfHwgdGhpcy5jb25maWcucmVxdWlyZWQgfHwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51cGRhdGVDb25zZW50KHNlcnZpY2UubmFtZSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWRTZXJ2aWNlcysrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUNvbnNlbnQoc2VydmljZS5uYW1lLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWRTZXJ2aWNlcysrXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBjaGFuZ2VkU2VydmljZXNcbiAgICB9XG5cbiAgICB1cGRhdGVDb25zZW50KG5hbWUsIHZhbHVlKXtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICh0aGlzLmNvbnNlbnRzW25hbWVdIHx8IGZhbHNlKSAhPT0gdmFsdWVcbiAgICAgICAgdGhpcy5jb25zZW50c1tuYW1lXSA9IHZhbHVlXG4gICAgICAgIHRoaXMubm90aWZ5KCdjb25zZW50cycsIHRoaXMuY29uc2VudHMpXG4gICAgICAgIHJldHVybiBjaGFuZ2VkXG4gICAgfVxuXG4gICAgcmVzZXRDb25zZW50cygpe1xuICAgICAgICB0aGlzLmNvbnNlbnRzID0gdGhpcy5kZWZhdWx0Q29uc2VudHNcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSB7fVxuICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuYXBwbHlDb25zZW50cygpXG4gICAgICAgIHRoaXMuc2F2ZWRDb25zZW50cyA9IHsuLi50aGlzLmNvbnNlbnRzfVxuICAgICAgICB0aGlzLnN0b3JlLmRlbGV0ZSgpXG4gICAgICAgIHRoaXMubm90aWZ5KCdjb25zZW50cycsIHRoaXMuY29uc2VudHMpXG4gICAgfVxuXG4gICAgZ2V0Q29uc2VudChuYW1lKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc2VudHNbbmFtZV0gfHwgZmFsc2VcbiAgICB9XG5cbiAgICBsb2FkQ29uc2VudHMoKXtcbiAgICAgICAgY29uc3QgY29uc2VudERhdGEgPSB0aGlzLnN0b3JlLmdldCgpO1xuICAgICAgICBpZiAoY29uc2VudERhdGEgIT09IG51bGwpe1xuICAgICAgICAgICAgdGhpcy5jb25zZW50cyA9IEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KGNvbnNlbnREYXRhKSlcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrQ29uc2VudHMoKVxuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ2NvbnNlbnRzJywgdGhpcy5jb25zZW50cylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb25zZW50c1xuICAgIH1cblxuICAgIHNhdmVBbmRBcHBseUNvbnNlbnRzKGV2ZW50VHlwZSl7XG4gICAgICAgIHRoaXMuc2F2ZUNvbnNlbnRzKGV2ZW50VHlwZSlcbiAgICAgICAgdGhpcy5hcHBseUNvbnNlbnRzKClcbiAgICB9XG5cbiAgICBjaGFuZ2VkQ29uc2VudHMoKXtcbiAgICAgICAgY29uc3QgY2MgPSB7fVxuICAgICAgICBmb3IoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuY29uc2VudHMpKXtcbiAgICAgICAgICAgIGlmICh0aGlzLnNhdmVkQ29uc2VudHNba10gIT09IHYpXG4gICAgICAgICAgICAgICAgY2Nba10gPSB2XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNjXG4gICAgfVxuXG4gICAgc2F2ZUNvbnNlbnRzKGV2ZW50VHlwZSl7XG4gICAgICAgIGNvbnN0IHYgPSBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkodGhpcy5jb25zZW50cykpXG4gICAgICAgIHRoaXMuc3RvcmUuc2V0KHYpO1xuICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWVcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2VcbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuY2hhbmdlZENvbnNlbnRzKClcbiAgICAgICAgdGhpcy5zYXZlZENvbnNlbnRzID0gey4uLnRoaXMuY29uc2VudHN9XG4gICAgICAgIHRoaXMubm90aWZ5KCdzYXZlQ29uc2VudHMnLCB7Y2hhbmdlczogY2hhbmdlcywgY29uc2VudHM6IHRoaXMuY29uc2VudHMsIHR5cGU6IGV2ZW50VHlwZSB8fCAnc2NyaXB0J30pXG4gICAgfVxuXG4gICAgYXBwbHlDb25zZW50cyhkcnlSdW4sIGludGVyYWN0aXZlLCBzZXJ2aWNlTmFtZSl7XG5cbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZUhhbmRsZXIoaGFuZGxlciwgb3B0cyl7XG4gICAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgbGV0IGhhbmRsZXJGdW5jdGlvblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgICAgICBoYW5kbGVyRnVuY3Rpb24gPSBoYW5kbGVyXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgICAgICAgICAgIGhhbmRsZXJGdW5jdGlvbiA9IG5ldyBGdW5jdGlvbignb3B0cycsIGhhbmRsZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlckZ1bmN0aW9uKG9wdHMpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2hhbmdlZFNlcnZpY2VzID0gMFxuXG4gICAgICAgIC8vIHdlIG1ha2Ugc3VyZSBhbGwgc2VydmljZXMgYXJlIHByb3Blcmx5IGluaXRpYWxpemVkXG4gICAgICAgIGZvcihsZXQgaT0wO2k8dGhpcy5jb25maWcuc2VydmljZXMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gdGhpcy5jb25maWcuc2VydmljZXNbaV1cbiAgICAgICAgICAgIGlmIChzZXJ2aWNlTmFtZSAhPT0gdW5kZWZpbmVkICYmIHNlcnZpY2VOYW1lICE9PSBzZXJ2aWNlLm5hbWUpXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIGNvbnN0IHZhcnMgPSBzZXJ2aWNlLnZhcnMgfHwge31cbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJPcHRzID0ge3NlcnZpY2U6IHNlcnZpY2UsIGNvbmZpZzogdGhpcy5jb25maWcsIHZhcnM6IHZhcnN9XG4gICAgICAgICAgICAvLyB3ZSBleGVjdXRlIHRoZSBpbml0IGZ1bmN0aW9uIG9mIHRoZSBzZXJ2aWNlIChpZiBpdCBpcyBkZWZpbmVkKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkW3NlcnZpY2UubmFtZV0pe1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWRbc2VydmljZS5uYW1lXSA9IHRydWVcbiAgICAgICAgICAgICAgICBleGVjdXRlSGFuZGxlcihzZXJ2aWNlLm9uSW5pdCwgaGFuZGxlck9wdHMpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGk9MDtpPHRoaXMuY29uZmlnLnNlcnZpY2VzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHRoaXMuY29uZmlnLnNlcnZpY2VzW2ldXG4gICAgICAgICAgICBpZiAoc2VydmljZU5hbWUgIT09IHVuZGVmaW5lZCAmJiBzZXJ2aWNlTmFtZSAhPT0gc2VydmljZS5uYW1lKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVzW3NlcnZpY2UubmFtZV1cbiAgICAgICAgICAgIGNvbnN0IHZhcnMgPSBzZXJ2aWNlLnZhcnMgfHwge31cbiAgICAgICAgICAgIGNvbnN0IG9wdE91dCA9IChzZXJ2aWNlLm9wdE91dCAhPT0gdW5kZWZpbmVkID8gc2VydmljZS5vcHRPdXQgOiAodGhpcy5jb25maWcub3B0T3V0IHx8IGZhbHNlKSlcbiAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkID0gKHNlcnZpY2UucmVxdWlyZWQgIT09IHVuZGVmaW5lZCA/IHNlcnZpY2UucmVxdWlyZWQgOiAodGhpcy5jb25maWcucmVxdWlyZWQgfHwgZmFsc2UpKVxuICAgICAgICAgICAgLy9vcHQgb3V0IGFuZCByZXF1aXJlZCBzZXJ2aWNlcyBhcmUgYWx3YXlzIHRyZWF0ZWQgYXMgY29uZmlybWVkXG4gICAgICAgICAgICBjb25zdCBjb25maXJtZWQgPSB0aGlzLmNvbmZpcm1lZCB8fCBvcHRPdXQgfHwgZHJ5UnVuIHx8IGludGVyYWN0aXZlXG4gICAgICAgICAgICBjb25zdCBjb25zZW50ID0gKHRoaXMuZ2V0Q29uc2VudChzZXJ2aWNlLm5hbWUpICYmIGNvbmZpcm1lZCkgfHwgcmVxdWlyZWRcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXJPcHRzID0ge3NlcnZpY2U6IHNlcnZpY2UsIGNvbmZpZzogdGhpcy5jb25maWcsIHZhcnM6IHZhcnMsIGNvbnNlbnRzOiB0aGlzLmNvbnNlbnRzLCBjb25maXJtZWQ6IHRoaXMuY29uZmlybWVkfVxuXG4gICAgICAgICAgICBpZiAoc3RhdGUgIT09IGNvbnNlbnQpXG4gICAgICAgICAgICAgICAgY2hhbmdlZFNlcnZpY2VzKytcblxuICAgICAgICAgICAgaWYgKGRyeVJ1bilcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuXG4gICAgICAgICAgICAvLyB3ZSBleGVjdXRlIGN1c3RvbSBzZXJ2aWNlIGhhbmRsZXJzIChpZiB0aGV5IGFyZSBkZWZpbmVkKVxuICAgICAgICAgICAgZXhlY3V0ZUhhbmRsZXIoY29uc2VudCA/IHNlcnZpY2Uub25BY2NlcHQgOiBzZXJ2aWNlLm9uRGVjbGluZSwgaGFuZGxlck9wdHMpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlcnZpY2VFbGVtZW50cyhzZXJ2aWNlLCBjb25zZW50KVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZXJ2aWNlU3RvcmFnZShzZXJ2aWNlLCBjb25zZW50KVxuXG4gICAgICAgICAgICAvLyB3ZSBleGVjdXRlIHRoZSBzZXJ2aWNlIGNhbGxiYWNrIChpZiBvbmUgaXMgZGVmaW5lZClcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlLmNhbGxiYWNrICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgc2VydmljZS5jYWxsYmFjayhjb25zZW50LCBzZXJ2aWNlKVxuXG4gICAgICAgICAgICAvLyB3ZSBleGVjdXRlIHRoZSBnbG9iYWwgY2FsbGJhY2sgKGlmIG9uZSBpcyBkZWZpbmVkKVxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNhbGxiYWNrICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuY2FsbGJhY2soY29uc2VudCwgc2VydmljZSlcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZXNbc2VydmljZS5uYW1lXSA9IGNvbnNlbnRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeSgnYXBwbHlDb25zZW50cycsIGNoYW5nZWRTZXJ2aWNlcywgc2VydmljZU5hbWUpXG4gICAgICAgIHJldHVybiBjaGFuZ2VkU2VydmljZXNcbiAgICB9XG5cbiAgICB1cGRhdGVTZXJ2aWNlRWxlbWVudHMoc2VydmljZSwgY29uc2VudCl7XG5cbiAgICAgICAgLy8gd2UgbWFrZSBzdXJlIHdlIGV4ZWN1dGUgdGhpcyBzZXJ2aWNlIG9ubHkgb25jZSBpZiB0aGUgb3B0aW9uIGlzIHNldFxuICAgICAgICBpZiAoY29uc2VudCl7XG4gICAgICAgICAgICBpZiAoc2VydmljZS5vbmx5T25jZSAmJiB0aGlzLmV4ZWN1dGVkT25jZVtzZXJ2aWNlLm5hbWVdKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgdGhpcy5leGVjdXRlZE9uY2Vbc2VydmljZS5uYW1lXSA9IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLW5hbWU9J1wiK3NlcnZpY2UubmFtZStcIiddXCIpXG4gICAgICAgIGZvcihsZXQgaT0wO2k8ZWxlbWVudHMubGVuZ3RoO2krKyl7XG5cbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXVxuXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICAgICAgICAgIGNvbnN0IGRzID0gZGF0YXNldChlbGVtZW50KVxuICAgICAgICAgICAgY29uc3Qge3R5cGUsIHNyYywgaHJlZn0gPSBkc1xuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBbJ2hyZWYnLCAnc3JjJywgJ3R5cGUnXVxuXG4gICAgICAgICAgICAvLyB3ZSBoYW5kbGUgcGxhY2Vob2xkZXIgZWxlbWVudHMgaGVyZS4uLlxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdwbGFjZWhvbGRlcicpe1xuICAgICAgICAgICAgICAgIGlmIChjb25zZW50KXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBkc1snb3JpZ2luYWwtZGlzcGxheSddID0gZWxlbWVudC5zdHlsZS5kaXNwbGF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkc1snb3JpZ2luYWwtZGlzcGxheSddIHx8ICdibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT09ICdJRlJBTUUnKXtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsIHdlIGRvIG5vdCB0b3VjaCBpdC4uLlxuICAgICAgICAgICAgICAgIGlmIChjb25zZW50ICYmIGVsZW1lbnQuc3JjID09PSBzcmMpe1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBTa2lwcGluZyAke2VsZW1lbnQudGFnTmFtZX0gZm9yIHNlcnZpY2UgJHtzZXJ2aWNlLm5hbWV9LCBhcyBpdCBhbHJlYWR5IGhhcyB0aGUgY29ycmVjdCB0eXBlLi4uYClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gd2UgY3JlYXRlIGEgbmV3IHNjcmlwdCBpbnN0ZWFkIG9mIHVwZGF0aW5nIHRoZSBub2RlIGluXG4gICAgICAgICAgICAgICAgLy8gcGxhY2UsIGFzIHRoZSBzY3JpcHQgd29uJ3Qgc3RhcnQgY29ycmVjdGx5IG90aGVyd2lzZVxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQudGFnTmFtZSlcbiAgICAgICAgICAgICAgICBmb3IoY29uc3QgYXR0cmlidXRlIG9mIGVsZW1lbnQuYXR0cmlidXRlcyl7XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lLCBhdHRyaWJ1dGUudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuaW5uZXJUZXh0ID0gZWxlbWVudC5pbm5lclRleHRcbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnRleHQgPSBlbGVtZW50LnRleHRcblxuICAgICAgICAgICAgICAgIGlmIChjb25zZW50KXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRzWydvcmlnaW5hbC1kaXNwbGF5J10gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRzWydvcmlnaW5hbC1kaXNwbGF5J11cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRzLnNyYyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zcmMgPSBkcy5zcmNcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNyYyA9ICcnXG4gICAgICAgICAgICAgICAgICAgIGlmIChkc1snbW9kaWZpZWQtYnkta2xhcm8nXSAhPT0gdW5kZWZpbmVkICYmIGRzWydvcmlnaW5hbC1kaXNwbGF5J10gIT09IHVuZGVmaW5lZCkgLy8gdGhpcyBpcyBhbHJlYWR5IGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWRpc3BsYXknLCBkc1snb3JpZ2luYWwtZGlzcGxheSddKVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsvLyB0aGlzIGlzIGEgbmV3IGVsZW1lbnQgd2UgaGF2ZW4ndCB0b3VjaGVkIGJlZm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLWRpc3BsYXknLCBlbGVtZW50LnN0eWxlLmRpc3BsYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1tb2RpZmllZC1ieS1rbGFybycsICd5ZXMnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3dlIHJlbW92ZSB0aGUgb3JpZ2luYWwgZWxlbWVudCBhbmQgaW5zZXJ0IGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3RWxlbWVudCwgZWxlbWVudClcbiAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC50YWdOYW1lID09PSAnU0NSSVBUJyB8fCBlbGVtZW50LnRhZ05hbWUgPT09ICdMSU5LJyl7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLCB3ZSBkbyBub3QgdG91Y2ggaXQuLi5cbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCAmJiBlbGVtZW50LnR5cGUgPT09ICh0eXBlIHx8IFwiXCIpICYmIGVsZW1lbnQuc3JjID09PSBzcmMpe1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBTa2lwcGluZyAke2VsZW1lbnQudGFnTmFtZX0gZm9yIHNlcnZpY2UgJHtzZXJ2aWNlLm5hbWV9LCBhcyBpdCBhbHJlYWR5IGhhcyB0aGUgY29ycmVjdCB0eXBlIG9yIHNyYy4uLmApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdlIGNyZWF0ZSBhIG5ldyBzY3JpcHQgaW5zdGVhZCBvZiB1cGRhdGluZyB0aGUgbm9kZSBpblxuICAgICAgICAgICAgICAgIC8vIHBsYWNlLCBhcyB0aGUgc2NyaXB0IHdvbid0IHN0YXJ0IGNvcnJlY3RseSBvdGhlcndpc2VcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50LnRhZ05hbWUpXG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IGF0dHJpYnV0ZSBvZiBlbGVtZW50LmF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuaW5uZXJUZXh0ID0gZWxlbWVudC5pbm5lclRleHRcbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnRleHQgPSBlbGVtZW50LnRleHRcblxuICAgICAgICAgICAgICAgIGlmIChjb25zZW50KXtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC50eXBlID0gdHlwZSB8fCBcIlwiXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3JjID0gc3JjXG4gICAgICAgICAgICAgICAgICAgIGlmIChocmVmICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmhyZWYgPSBocmVmXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC50eXBlID0gJ3RleHQvcGxhaW4nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vd2UgcmVtb3ZlIHRoZSBvcmlnaW5hbCBlbGVtZW50IGFuZCBpbnNlcnQgYSBuZXcgb25lXG4gICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShuZXdFbGVtZW50LCBlbGVtZW50KVxuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChlbGVtZW50KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBhbGwgb3RoZXIgZWxlbWVudHMgKGltYWdlcyBldGMuKSBhcmUgbW9kaWZpZWQgaW4gcGxhY2UuLi5cbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCl7XG4gICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBhdHRyIG9mIGF0dHJzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJWYWx1ZSA9IGRzW2F0dHJdXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1snb3JpZ2luYWwtJythdHRyXSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRzWydvcmlnaW5hbC0nK2F0dHJdID0gZWxlbWVudFthdHRyXVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFthdHRyXSA9IGF0dHJWYWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkcy50aXRsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50aXRsZSA9IGRzLnRpdGxlXG4gICAgICAgICAgICAgICAgICAgIGlmIChkc1snb3JpZ2luYWwtZGlzcGxheSddICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZHNbJ29yaWdpbmFsLWRpc3BsYXknXVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnZGlzcGxheScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRzLnRpdGxlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGl0bGUnKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHNbJ29yaWdpbmFsLWRpc3BsYXknXSA9PT0gdW5kZWZpbmVkICYmIGVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZHNbJ29yaWdpbmFsLWRpc3BsYXknXSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgICAgICAgICAgICAgZm9yKGNvbnN0IGF0dHIgb2YgYXR0cnMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gZHNbYXR0cl1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRzWydvcmlnaW5hbC0nK2F0dHJdICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFthdHRyXSA9IGRzWydvcmlnaW5hbC0nK2F0dHJdXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcHBseURhdGFzZXQoZHMsIGVsZW1lbnQpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHVwZGF0ZVNlcnZpY2VTdG9yYWdlKHNlcnZpY2UsIGNvbnNlbnQpe1xuXG4gICAgICAgIGlmIChjb25zZW50KVxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgZnVuY3Rpb24gZXNjYXBlUmVnZXhTdHIoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1stW1xcXS97fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlcnZpY2UuY29va2llcyAhPT0gdW5kZWZpbmVkICYmIHNlcnZpY2UuY29va2llcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIGNvbnN0IGNvb2tpZXMgPSBnZXRDb29raWVzKClcbiAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8c2VydmljZS5jb29raWVzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgICAgIGxldCBjb29raWVQYXR0ZXJuID0gc2VydmljZS5jb29raWVzW2ldXG4gICAgICAgICAgICAgICAgbGV0IGNvb2tpZVBhdGgsIGNvb2tpZURvbWFpblxuICAgICAgICAgICAgICAgIGlmIChjb29raWVQYXR0ZXJuIGluc3RhbmNlb2YgQXJyYXkpe1xuICAgICAgICAgICAgICAgICAgICBbY29va2llUGF0dGVybiwgY29va2llUGF0aCwgY29va2llRG9tYWluXSA9IGNvb2tpZVBhdHRlcm5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvb2tpZVBhdHRlcm4gaW5zdGFuY2VvZiBPYmplY3QgJiYgIShjb29raWVQYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNwID0gY29va2llUGF0dGVyblxuICAgICAgICAgICAgICAgICAgICBjb29raWVQYXR0ZXJuID0gY3AucGF0dGVyblxuICAgICAgICAgICAgICAgICAgICBjb29raWVQYXRoID0gY3AucGF0aFxuICAgICAgICAgICAgICAgICAgICBjb29raWVEb21haW4gPSBjcC5kb21haW5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvb2tpZVBhdHRlcm4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICBpZiAoIShjb29raWVQYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb29raWVQYXR0ZXJuLnN0YXJ0c1dpdGgoJ14nKSkgLy8gd2UgYXNzdW1lIHRoaXMgaXMgYWxyZWFkeSBhIHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29raWVQYXR0ZXJuID0gbmV3IFJlZ0V4cChjb29raWVQYXR0ZXJuKVxuICAgICAgICAgICAgICAgICAgICBlbHNlIC8vIHdlIGFzc3VtZSB0aGlzIGlzIGEgbm9ybWFsIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29va2llUGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nK2VzY2FwZVJlZ2V4U3RyKGNvb2tpZVBhdHRlcm4pKyckJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yKGxldCBqPTA7ajxjb29raWVzLmxlbmd0aDtqKyspe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb29raWUgPSBjb29raWVzW2pdXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gY29va2llUGF0dGVybi5leGVjKGNvb2tpZS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJEZWxldGluZyBjb29raWU6XCIsIGNvb2tpZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTWF0Y2hlZCBwYXR0ZXJuOlwiLCBjb29raWVQYXR0ZXJuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUGF0aDpcIiwgY29va2llUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRvbWFpbjpcIiwgY29va2llRG9tYWluKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQ29va2llKGNvb2tpZS5uYW1lLCBjb29raWVQYXRoLCBjb29raWVEb21haW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBubyBjb29raWUgZG9tYWluIGlzIGdpdmVuLCB3ZSBhbHNvIHRyeSB0byBkZWxldGUgdGhlIGNvb2tpZSB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb21haW4gJy5bY3VycmVudCBkb21haW5dJyBhcyBzb21lIHNlcnZpY2VzIHNldCBjb29raWVzIGZvciB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb3R0ZWQgZG9tYWluIGV4cGxpY2l0bHkgKGUuZy4gdGhlIEZhY2Vib29rIHBpeGVsKS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29raWVEb21haW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVDb29raWUoY29va2llLm5hbWUsIGNvb2tpZVBhdGgsICcuJyt3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY2hlY2tDb25zZW50cygpe1xuICAgICAgICBsZXQgY29tcGxldGUgPSB0cnVlXG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gbmV3IFNldCh0aGlzLmNvbmZpZy5zZXJ2aWNlcy5tYXAoKHNlcnZpY2UpPT57cmV0dXJuIHNlcnZpY2UubmFtZX0pKVxuICAgICAgICBjb25zdCBjb25zZW50cyA9IG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5jb25zZW50cykpXG4gICAgICAgIGZvcihjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5jb25zZW50cykpe1xuICAgICAgICAgICAgaWYgKCFzZXJ2aWNlcy5oYXMoa2V5KSl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29uc2VudHNba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihjb25zdCBzZXJ2aWNlIG9mIHRoaXMuY29uZmlnLnNlcnZpY2VzKXtcbiAgICAgICAgICAgIGlmICghY29uc2VudHMuaGFzKHNlcnZpY2UubmFtZSkpe1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc2VudHNbc2VydmljZS5uYW1lXSA9IHRoaXMuZ2V0RGVmYXVsdENvbnNlbnQoc2VydmljZSlcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25maXJtZWQgPSBjb21wbGV0ZVxuICAgICAgICBpZiAoIWNvbXBsZXRlKVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZVxuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJkYXRhc2V0IiwiZWxlbWVudCIsImkiLCJhdHRyaWJ1dGVzIiwibGVuZ3RoIiwiYXR0cmlidXRlIiwibmFtZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsInZhbHVlIiwiYXBwbHlEYXRhc2V0IiwiZHMiLCJrZXlzIiwiT2JqZWN0Iiwia2V5Iiwic2V0QXR0cmlidXRlIiwiaXNDYWxsYWJsZSIsInRyeVRvU3RyaW5nIiwiJFR5cGVFcnJvciIsIlR5cGVFcnJvciIsImFyZ3VtZW50IiwiaXNDb25zdHJ1Y3RvciIsImlzUG9zc2libGVQcm90b3R5cGUiLCIkU3RyaW5nIiwiU3RyaW5nIiwid2VsbEtub3duU3ltYm9sIiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJ1bmRlZmluZWQiLCJjb25maWd1cmFibGUiLCJjaGFyQXQiLCJTIiwiaW5kZXgiLCJ1bmljb2RlIiwiaXNQcm90b3R5cGVPZiIsIml0IiwiUHJvdG90eXBlIiwiaXNPYmplY3QiLCJmYWlscyIsIkFycmF5QnVmZmVyIiwiYnVmZmVyIiwiaXNFeHRlbnNpYmxlIiwiJGZvckVhY2giLCJTVFJJQ1RfTUVUSE9EIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImZvckVhY2giLCJjYWxsYmFja2ZuIiwidGhpcyIsImFyZ3VtZW50cyIsImJpbmQiLCJjYWxsIiwidG9PYmplY3QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwibGVuZ3RoT2ZBcnJheUxpa2UiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkQXJyYXkiLCJhcnJheUxpa2UiLCJPIiwiSVNfQ09OU1RSVUNUT1IiLCJhcmd1bWVudHNMZW5ndGgiLCJtYXBmbiIsIm1hcHBpbmciLCJyZXN1bHQiLCJzdGVwIiwiaXRlcmF0b3IiLCJuZXh0IiwiaXRlcmF0b3JNZXRob2QiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJpbmRleE9mIiwidW5jdXJyeVRoaXMiLCJJbmRleGVkT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsIlRZUEUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiSVNfRklMVEVSX1JFSkVDVCIsIk5PX0hPTEVTIiwidGhhdCIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsInRhcmdldCIsIm1hcCIsImZpbHRlciIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaWx0ZXJSZWplY3QiLCJWOF9WRVJTSU9OIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJjb25zdHJ1Y3RvciIsImZvbyIsIkJvb2xlYW4iLCJtZXRob2QiLCJpc0FycmF5Iiwib3JpZ2luYWxBcnJheSIsIkMiLCJhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciIsImFuT2JqZWN0IiwiaXRlcmF0b3JDbG9zZSIsImZuIiwiRU5UUklFUyIsImVycm9yIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJmcm9tIiwiZXhlYyIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwib2JqZWN0IiwidG9TdHJpbmciLCJzdHJpbmdTbGljZSIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJUT19TVFJJTkdfVEFHIiwiJE9iamVjdCIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwidGFnIiwidHJ5R2V0IiwiY2FsbGVlIiwiZGVmaW5lQnVpbHRJbkFjY2Vzc29yIiwiZGVmaW5lQnVpbHRJbnMiLCJhbkluc3RhbmNlIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpdGVyYXRlIiwiZGVmaW5lSXRlcmF0b3IiLCJjcmVhdGVJdGVyUmVzdWx0T2JqZWN0Iiwic2V0U3BlY2llcyIsIkRFU0NSSVBUT1JTIiwiZmFzdEtleSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJzZXRJbnRlcm5hbFN0YXRlIiwic2V0IiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsImdldHRlckZvciIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNPTlNUUlVDVE9SX05BTUUiLCJBRERFUiIsIkNvbnN0cnVjdG9yIiwiaXRlcmFibGUiLCJ0eXBlIiwiZmlyc3QiLCJsYXN0Iiwic2l6ZSIsIkFTX0VOVFJJRVMiLCJnZXRJbnRlcm5hbFN0YXRlIiwicHJldmlvdXMiLCJzdGF0ZSIsImVudHJ5IiwiZ2V0RW50cnkiLCJyZW1vdmVkIiwiY2xlYXIiLCJwcmV2IiwiaGFzIiwiZ2V0IiwiYWRkIiwic2V0U3Ryb25nIiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiJCIsImdsb2JhbCIsImlzRm9yY2VkIiwiZGVmaW5lQnVpbHRJbiIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwiY29tbW9uIiwiSVNfV0VBSyIsIk5hdGl2ZUNvbnN0cnVjdG9yIiwiTmF0aXZlUHJvdG90eXBlIiwiZXhwb3J0ZWQiLCJmaXhNZXRob2QiLCJLRVkiLCJ1bmN1cnJpZWROYXRpdmVNZXRob2QiLCJlbnRyaWVzIiwiZW5hYmxlIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJkdW1teSIsImZvcmNlZCIsImhhc093biIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInNvdXJjZSIsImV4Y2VwdGlvbnMiLCJmIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiTUFUQ0giLCJyZWdleHAiLCJlcnJvcjEiLCJlcnJvcjIiLCJGIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiaGludCIsIm1ha2VCdWlsdEluIiwiZGVzY3JpcHRvciIsImdldHRlciIsInNldHRlciIsImRlZmluZUdsb2JhbFByb3BlcnR5Iiwib3B0aW9ucyIsInNpbXBsZSIsInVuc2FmZSIsIm5vbkNvbmZpZ3VyYWJsZSIsIm5vbldyaXRhYmxlIiwic3JjIiwiZG9jdW1lbnQiLCJFWElTVFMiLCJjcmVhdGVFbGVtZW50IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjbGFzc0xpc3QiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsInZlcnNpb24iLCJwcm9jZXNzIiwiRGVubyIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsImRvbnRDYWxsR2V0U2V0Iiwic2hhbSIsInJlZ2V4cEV4ZWMiLCJSZWdFeHBQcm90b3R5cGUiLCJSZWdFeHAiLCJGT1JDRUQiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInJlIiwiZmxhZ3MiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJtZXRob2RzIiwibmF0aXZlTWV0aG9kIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiJGV4ZWMiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIk5BVElWRV9CSU5EIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvbiIsImFwcGx5IiwiUmVmbGVjdCIsImFDYWxsYWJsZSIsInRlc3QiLCJoYXNPd25Qcm9wZXJ0eSIsImFycmF5U2xpY2UiLCIkRnVuY3Rpb24iLCJjb25jYXQiLCJqb2luIiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJhcmdzIiwiYXJnc0xlbmd0aCIsImxpc3QiLCJjb25zdHJ1Y3QiLCJnZXREZXNjcmlwdG9yIiwiUFJPUEVSIiwiQ09ORklHVVJBQkxFIiwidW5jdXJyeVRoaXNXaXRoQmluZCIsIm5hbWVzcGFjZSIsImNsYXNzb2YiLCJnZXRNZXRob2QiLCJJdGVyYXRvcnMiLCJ1c2luZ0l0ZXJhdG9yIiwicmVwbGFjZXIiLCJyYXdMZW5ndGgiLCJrZXlzTGVuZ3RoIiwiaiIsIlYiLCJQIiwiZnVuYyIsImZsb29yIiwiTWF0aCIsInJlcGxhY2UiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZW1lbnQiLCJ0YWlsUG9zIiwibSIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJuIiwiY2hlY2siLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZyIsImdldEJ1aWx0SW4iLCJhIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJzdG9yZSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJ1aWQiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJpZCIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm1ldGEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic3BsaWNlIiwiZ2V0V2Vha0RhdGEiLCJvbkZyZWV6ZSIsIk5BVElWRV9XRUFLX01BUCIsInNoYXJlZCIsInNoYXJlZEtleSIsIk9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEIiwiV2Vha01hcCIsIm1ldGFkYXRhIiwiZmFjYWRlIiwiU1RBVEUiLCJlbmZvcmNlIiwiZG9jdW1lbnRBbGwiLCJhbGwiLCJub29wIiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJpc1JlZ0V4cCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiJFN5bWJvbCIsIlJlc3VsdCIsInN0b3BwZWQiLCJSZXN1bHRQcm90b3R5cGUiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJJU19SRUNPUkQiLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwic3RvcCIsImNvbmRpdGlvbiIsImNhbGxGbiIsImlubmVyUmVzdWx0IiwiaW5uZXJFcnJvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiRU5VTUVSQUJMRV9ORVhUIiwiSVNfUFVSRSIsIkZ1bmN0aW9uTmFtZSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJJdGVyYXRvcnNDb3JlIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsInZhbHVlcyIsInByb3RvIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsInRvTGVuZ3RoIiwib2JqIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJDT05GSUdVUkFCTEVfTEVOR1RIIiwiVEVNUExBVEUiLCJhcml0eSIsImNlaWwiLCJ0cnVuYyIsIngiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlIiwiZW51bUJ1Z0tleXMiLCJodG1sIiwiUFJPVE9UWVBFIiwiU0NSSVBUIiwiSUVfUFJPVE8iLCJFbXB0eUNvbnN0cnVjdG9yIiwic2NyaXB0VGFnIiwiY29udGVudCIsIkxUIiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiSlMiLCJkb21haW4iLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIlY4X1BST1RPVFlQRV9ERUZJTkVfQlVHIiwib2JqZWN0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsIklFOF9ET01fREVGSU5FIiwidG9Qcm9wZXJ0eUtleSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFTlVNRVJBQkxFIiwiV1JJVEFCTEUiLCJBdHRyaWJ1dGVzIiwiY3VycmVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwiQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIiwiJGlzRXh0ZW5zaWJsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwidW5jdXJyeVRoaXNBY2Nlc3NvciIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwib2JqZWN0R2V0UHJvdG90eXBlT2YiLCJJRV9CVUciLCJUT19FTlRSSUVTIiwiSUVfV09SS0FST1VORCIsImlucHV0IiwicHJlZiIsInZhbCIsInZhbHVlT2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJUYXJnZXQiLCJTb3VyY2UiLCJSIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJzdGlja3lIZWxwZXJzIiwiVU5TVVBQT1JURURfRE9UX0FMTCIsIlVOU1VQUE9SVEVEX05DRyIsIm5hdGl2ZVJlcGxhY2UiLCJuYXRpdmVFeGVjIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJsYXN0SW5kZXgiLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwicmF3IiwiZ3JvdXBzIiwic3RpY2t5IiwiY2hhcnNBZGRlZCIsInN0ckNvcHkiLCJtdWx0aWxpbmUiLCJoYXNJbmRpY2VzIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsInVuaWNvZGVTZXRzIiwicmVnRXhwRmxhZ3MiLCIkUmVnRXhwIiwiTUlTU0VEX1NUSUNLWSIsIlRBRyIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJzZWNvbmQiLCJjb2RlQXQiLCJ3aGl0ZXNwYWNlcyIsImx0cmltIiwicnRyaW0iLCJzdGFydCIsImVuZCIsInRyaW0iLCJzeW1ib2wiLCJTeW1ib2wiLCJTeW1ib2xQcm90b3R5cGUiLCJUT19QUklNSVRJVkUiLCJOQVRJVkVfU1lNQk9MIiwia2V5Rm9yIiwibWF4IiwibWluIiwiaW50ZWdlciIsIm51bWJlciIsImxlbiIsImlzU3ltYm9sIiwiZXhvdGljVG9QcmltIiwidG9QcmltaXRpdmUiLCJwb3N0Zml4IiwicmFuZG9tIiwicGF0aCIsIndyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcmciLCJrIiwiRSIsIkEiLCIkZmlsdGVyIiwiJGluY2x1ZGVzIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFSUkFZX0lURVJBVE9SIiwiQXJndW1lbnRzIiwiJG1hcCIsIm5hdGl2ZVNsaWNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsImZpbiIsImRhdGVUb1ByaW1pdGl2ZSIsIkRhdGVQcm90b3R5cGUiLCJEYXRlIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJuYW1lUkUiLCJyZWdFeHBFeGVjIiwiZ2V0UmVwbGFjZXJGdW5jdGlvbiIsIiRzdHJpbmdpZnkiLCJudW1iZXJUb1N0cmluZyIsInRlc3RlciIsImxvdyIsImhpIiwiV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OIiwiSUxMX0ZPUk1FRF9VTklDT0RFIiwic3RyaW5naWZ5V2l0aFN5bWJvbHNGaXgiLCIkcmVwbGFjZXIiLCJmaXhJbGxGb3JtZWQiLCJvZmZzZXQiLCJzdHJpbmdpZnkiLCJzcGFjZSIsInRoaXNOdW1iZXJWYWx1ZSIsIk5VTUJFUiIsIk5hdGl2ZU51bWJlciIsIlB1cmVOdW1iZXJOYW1lc3BhY2UiLCJOdW1iZXJQcm90b3R5cGUiLCJOdW1iZXJXcmFwcGVyIiwicHJpbVZhbHVlIiwidGhpcmQiLCJyYWRpeCIsIm1heENvZGUiLCJkaWdpdHMiLCJjb2RlIiwiTmFOIiwicGFyc2VJbnQiLCJ0b051bWJlciIsInRvTnVtZXJpYyIsIndyYXAiLCJOdW1iZXIiLCIkZW50cmllcyIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCJuYXRpdmVLZXlzIiwiYUNvbnN0cnVjdG9yIiwibmF0aXZlQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIm5ld1RhcmdldCIsIiRhcmdzIiwiZ2V0UmVnRXhwRmxhZ3MiLCJwcm94eUFjY2Vzc29yIiwiTmF0aXZlUmVnRXhwIiwiU3ludGF4RXJyb3IiLCJzdHJpbmdJbmRleE9mIiwiSVNfTkNHIiwiQ09SUkVDVF9ORVciLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInJhd0ZsYWdzIiwiaGFuZGxlZCIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicmF3UGF0dGVybiIsImNociIsIm5hbWVkIiwiYnJhY2tldHMiLCJuY2ciLCJncm91cGlkIiwiZ3JvdXBuYW1lIiwiaGFuZGxlTkNHIiwiaGFuZGxlRG90QWxsIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwiY29sbGVjdGlvbiIsImluaXQiLCJub3RBUmVnRXhwIiwiY29ycmVjdElzUmVnRXhwTG9naWMiLCJzZWFyY2hTdHJpbmciLCJTVFJJTkdfSVRFUkFUT1IiLCJwb2ludCIsImZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiZ2V0U3Vic3RpdHV0aW9uIiwiUkVQTEFDRSIsIlJFUExBQ0VfS0VFUFNfJDAiLCJSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSIsIl8iLCJtYXliZUNhbGxOYXRpdmUiLCJVTlNBRkVfU1VCU1RJVFVURSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicngiLCJyZXMiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwicmVwbGFjZXJBcmdzIiwiQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMiLCJzZWFyY2giLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJkZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSIsIkhJRERFTiIsIlJhbmdlRXJyb3IiLCJRT2JqZWN0IiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJmYWxsYmFja0RlZmluZVByb3BlcnR5IiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwidGhpc1N5bWJvbFZhbHVlIiwic3ltYm9sRGVzY3JpcHRpdmVTdHJpbmciLCJkZXNjIiwiTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5Iiwic3ltIiwiRE9NSXRlcmFibGVzIiwiaGFuZGxlUHJvdG90eXBlIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkNPTExFQ1RJT05fTkFNRSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwibyIsImUiLCJwcm9wIiwiciIsInRvU3RyaW5nVGFnIiwiZ2V0Q29va2llcyIsImNvb2tpZVN0cmluZ3MiLCJjb29raWUiLCJjb29raWVzIiwicmVnZXgiLCJjb29raWVTdHIiLCJkZWxldGVDb29raWUiLCJUZXN0U3RvcmUiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY3JlYXRlQ2xhc3MiLCJDb29raWVTdG9yZSIsIm1hbmFnZXIiLCJjb29raWVOYW1lIiwic3RvcmFnZU5hbWUiLCJjb29raWVEb21haW4iLCJjb29raWVQYXRoIiwiY29va2llRXhwaXJlc0FmdGVyRGF5cyIsImdldENvb2tpZSIsImRheXMiLCJleHBpcmVzIiwiZGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwidG9VVENTdHJpbmciLCJzZXRDb29raWUiLCJTdG9yYWdlU3RvcmUiLCJoYW5kbGUiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJMb2NhbFN0b3JhZ2VTdG9yZSIsIl9TdG9yYWdlU3RvcmUiLCJfY2FsbFN1cGVyIiwibG9jYWxTdG9yYWdlIiwiX2luaGVyaXRzIiwiU2Vzc2lvblN0b3JhZ2VTdG9yZSIsIl9TdG9yYWdlU3RvcmUyIiwic2Vzc2lvblN0b3JhZ2UiLCJDb25zZW50TWFuYWdlciIsImNvbmZpZyIsImF1eGlsaWFyeVN0b3JlIiwic3RvcmVzIiwic3RvcmFnZU1ldGhvZCIsImNvbnNlbnRzIiwiZGVmYXVsdENvbnNlbnRzIiwiY29uZmlybWVkIiwiY2hhbmdlZCIsInN0YXRlcyIsImluaXRpYWxpemVkIiwiZXhlY3V0ZWRPbmNlIiwid2F0Y2hlcnMiLCJTZXQiLCJsb2FkQ29uc2VudHMiLCJhcHBseUNvbnNlbnRzIiwic2F2ZWRDb25zZW50cyIsIl9vYmplY3RTcHJlYWQiLCJzZXJ2aWNlcyIsInNlcnZpY2UiLCJnZXREZWZhdWx0Q29uc2VudCIsIndhdGNoZXIiLCJkZWxldGUiLCJfdGhpcyIsInVwZGF0ZSIsIm1hdGNoaW5nU2VydmljZXMiLCJjb25zZW50IiwiZGVmYXVsdCIsInJlcXVpcmVkIiwiX3RoaXMyIiwiY2hhbmdlZFNlcnZpY2VzIiwiY29udGV4dHVhbENvbnNlbnRPbmx5IiwidXBkYXRlQ29uc2VudCIsIm5vdGlmeSIsImNvbnNlbnREYXRhIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiX2NoZWNrQ29uc2VudHMiLCJldmVudFR5cGUiLCJzYXZlQ29uc2VudHMiLCJjYyIsIl9pIiwiX09iamVjdCRlbnRyaWVzIiwiX09iamVjdCRlbnRyaWVzJF9pIiwiX3NsaWNlZFRvQXJyYXkiLCJ2IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY2hhbmdlcyIsImNoYW5nZWRDb25zZW50cyIsImRyeVJ1biIsImludGVyYWN0aXZlIiwic2VydmljZU5hbWUiLCJleGVjdXRlSGFuZGxlciIsImhhbmRsZXIiLCJvcHRzIiwidmFycyIsImhhbmRsZXJPcHRzIiwib25Jbml0Iiwib3B0T3V0IiwiZ2V0Q29uc2VudCIsIm9uQWNjZXB0Iiwib25EZWNsaW5lIiwidXBkYXRlU2VydmljZUVsZW1lbnRzIiwidXBkYXRlU2VydmljZVN0b3JhZ2UiLCJjYWxsYmFjayIsIm9ubHlPbmNlIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImhyZWYiLCJhdHRycyIsInRhZ05hbWUiLCJjb25zb2xlIiwiZGVidWciLCJfc3RlcCIsIm5ld0VsZW1lbnQiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsInMiLCJlcnIiLCJpbm5lclRleHQiLCJ0ZXh0IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX3N0ZXAzIiwiX2l0ZXJhdG9yMyIsImF0dHIiLCJhdHRyVmFsdWUiLCJ0aXRsZSIsInJlbW92ZVByb3BlcnR5IiwicmVtb3ZlQXR0cmlidXRlIiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsImNvb2tpZVBhdHRlcm4iLCJfY29va2llUGF0dGVybjIiLCJjcCIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJjb21wbGV0ZSIsIl9pMyIsIl9PYmplY3Qka2V5cyIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiXSwic291cmNlUm9vdCI6IiJ9