/*! For license information please see ide-no-css.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ide=t():e.ide=t()}(self,(()=>(()=>{var e={2690:(e,t,r)=>{"use strict";function n(){for(var e=document.cookie.split(";"),t=[],r=new RegExp("^\\s*([^=]+)\\s*=\\s*(.*?)$"),n=0;n<e.length;n++){var o=e[n],i=r.exec(o);null!==i&&t.push({name:i[1],value:i[2]})}return t}function o(e,t,r){var n=e+"=; Max-Age=-99999999;";document.cookie=n,n+=" path="+(t||"/")+";",document.cookie=n,void 0!==r&&(n+=" domain="+r+";",document.cookie=n)}r.d(t,{default:()=>z}),r(9305),r(2733),r(4701),r(1678),r(4776),r(4382),r(9892),r(4962),r(6584),r(9336),r(4754),r(1908),r(94),r(7132),r(6457),r(8908),r(3810),r(8557),r(646),r(5021),r(3687),r(2745),r(3994),r(3062),r(4062),r(3630),r(2367);var i=r(5482);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function c(e,t,r){return t=l(t),function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,s()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(s=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&f(e,t)}function f(e,t){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},f(e,t)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,m(n.key),n)}}function v(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function m(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(t)?t:String(t)}r(6437),r(2697),r(1359);var y=function(){function e(){p(this,e),this.value=null}return v(e,[{key:"get",value:function(){return this.value}},{key:"set",value:function(e){this.value=e}},{key:"delete",value:function(){this.value=null}}]),e}(),h=function(){function e(t){p(this,e),this.cookieName=t.storageName,this.cookieDomain=t.cookieDomain,this.cookiePath=t.cookiePath,this.cookieExpiresAfterDays=t.cookieExpiresAfterDays}return v(e,[{key:"get",value:function(){var e=function(e){for(var t=n(),r=0;r<t.length;r++)if(t[r].name===e)return t[r];return null}(this.cookieName);return e?e.value:null}},{key:"set",value:function(e){return function(e,t,r,n,o){var i="";if(r){var a=new Date;a.setTime(a.getTime()+24*r*60*60*1e3),i="; expires="+a.toUTCString()}void 0!==n&&(i+="; domain="+n),i+=void 0!==o?"; path="+o:"; path=/",document.cookie=e+"="+(t||"")+i+"; SameSite=Lax"}(this.cookieName,e,this.cookieExpiresAfterDays,this.cookieDomain,this.cookiePath)}},{key:"delete",value:function(){return o(this.cookieName)}}]),e}(),b=function(){function e(t,r){p(this,e),this.key=t.storageName,this.handle=r}return v(e,[{key:"get",value:function(){return this.handle.getItem(this.key)}},{key:"getWithKey",value:function(e){return this.handle.getItem(e)}},{key:"set",value:function(e){return this.handle.setItem(this.key,e)}},{key:"setWithKey",value:function(e,t){return this.handle.setItem(e,t)}},{key:"delete",value:function(){return this.handle.removeItem(this.key)}},{key:"deleteWithKey",value:function(e){return this.handle.removeItem(e)}}]),e}(),g=function(e){function t(e){return p(this,t),c(this,t,[e,localStorage])}return u(t,e),v(t)}(b),_=function(e){function t(e){return p(this,t),c(this,t,[e,sessionStorage])}return u(t,e),v(t)}(b);const w={cookie:h,test:y,localStorage:g,sessionStorage:_};function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function S(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=j(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||j(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function j(e,t){if(e){if("string"==typeof e)return O(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?O(e,t):void 0}}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function x(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function P(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?x(Object(r),!0).forEach((function(t){var n,o,i;n=e,o=t,i=r[t],(o=C(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):x(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function A(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,C(n.key),n)}}function C(e){var t=function(e,t){if("object"!=k(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==k(t)?t:String(t)}var z=function(){function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=t,this.store=void 0!==r?r:new w[this.storageMethod](this),void 0===this.store&&(this.store=w.cookie),this.auxiliaryStore=void 0!==n?n:new _(this),this.consents=this.defaultConsents,this.confirmed=!1,this.changed=!1,this.states={},this.initialized={},this.executedOnce={},this.watchers=new Set([]),this.loadConsents(),this.applyConsents(),this.savedConsents=P({},this.consents)}var t,r;return t=e,(r=[{key:"storageMethod",get:function(){return this.config.storageMethod||"cookie"}},{key:"storageName",get:function(){return this.config.storageName||this.config.cookieName||"klaro"}},{key:"cookieDomain",get:function(){return this.config.cookieDomain||void 0}},{key:"cookiePath",get:function(){return this.config.cookiePath||void 0}},{key:"cookieExpiresAfterDays",get:function(){return this.config.cookieExpiresAfterDays||120}},{key:"defaultConsents",get:function(){for(var e={},t=0;t<this.config.services.length;t++){var r=this.config.services[t];e[r.name]=this.getDefaultConsent(r)}return e}},{key:"watch",value:function(e){this.watchers.has(e)||this.watchers.add(e)}},{key:"unwatch",value:function(e){this.watchers.has(e)&&this.watchers.delete(e)}},{key:"notify",value:function(e,t){var r=this;this.watchers.forEach((function(n){n.update(r,e,t)}))}},{key:"getService",value:function(e){var t=this.config.services.filter((function(t){return t.name===e}));if(t.length>0)return t[0]}},{key:"getDefaultConsent",value:function(e){var t=e.default||e.required;return void 0===t&&(t=this.config.default),void 0===t&&(t=!1),t}},{key:"changeAll",value:function(e){var t=this,r=0;return this.config.services.filter((function(e){return!e.contextualConsentOnly})).map((function(n){n.required||t.config.required||e?t.updateConsent(n.name,!0)&&r++:t.updateConsent(n.name,!1)&&r++})),r}},{key:"updateConsent",value:function(e,t){var r=(this.consents[e]||!1)!==t;return this.consents[e]=t,this.notify("consents",this.consents),r}},{key:"resetConsents",value:function(){this.consents=this.defaultConsents,this.states={},this.confirmed=!1,this.applyConsents(),this.savedConsents=P({},this.consents),this.store.delete(),this.notify("consents",this.consents)}},{key:"getConsent",value:function(e){return this.consents[e]||!1}},{key:"loadConsents",value:function(){var e=this.store.get();return null!==e&&(this.consents=JSON.parse(decodeURIComponent(e)),this._checkConsents(),this.notify("consents",this.consents)),this.consents}},{key:"saveAndApplyConsents",value:function(e){this.saveConsents(e),this.applyConsents()}},{key:"changedConsents",value:function(){for(var e={},t=0,r=Object.entries(this.consents);t<r.length;t++){var n=E(r[t],2),o=n[0],i=n[1];this.savedConsents[o]!==i&&(e[o]=i)}return e}},{key:"saveConsents",value:function(e){var t=encodeURIComponent(JSON.stringify(this.consents));this.store.set(t),this.confirmed=!0,this.changed=!1;var r=this.changedConsents();this.savedConsents=P({},this.consents),this.notify("saveConsents",{changes:r,consents:this.consents,type:e||"script"})}},{key:"applyConsents",value:function(e,t,r){function n(e,t){if(void 0!==e)return("function"==typeof e?e:new Function("opts",e))(t)}for(var o=0,i=0;i<this.config.services.length;i++){var a=this.config.services[i];if(void 0===r||r===a.name){var c=a.vars||{},s={service:a,config:this.config,vars:c};this.initialized[a.name]||(this.initialized[a.name]=!0,n(a.onInit,s))}}for(var l=0;l<this.config.services.length;l++){var u=this.config.services[l];if(void 0===r||r===u.name){var f=this.states[u.name],p=u.vars||{},d=void 0!==u.optOut?u.optOut:this.config.optOut||!1,v=void 0!==u.required?u.required:this.config.required||!1,m=this.confirmed||d||e||t,y=this.getConsent(u.name)&&m||v,h={service:u,config:this.config,vars:p,consents:this.consents,confirmed:this.confirmed};f!==y&&o++,e||(n(y?u.onAccept:u.onDecline,h),this.updateServiceElements(u,y),this.updateServiceStorage(u,y),void 0!==u.callback&&u.callback(y,u),void 0!==this.config.callback&&this.config.callback(y,u),this.states[u.name]=y)}}return this.notify("applyConsents",o,r),o}},{key:"updateServiceElements",value:function(e,t){if(t){if(e.onlyOnce&&this.executedOnce[e.name])return;this.executedOnce[e.name]=!0}for(var r=document.querySelectorAll("[data-name='"+e.name+"']"),n=0;n<r.length;n++){var o=r[n],a=o.parentElement,c=(0,i.RT)(o),s=c.type,l=c.src,u=c.href,f=["href","src","type"];if("placeholder"!==s)if("IFRAME"===o.tagName){if(t&&o.src===l){console.debug("Skipping ".concat(o.tagName," for service ").concat(e.name,", as it already has the correct type..."));continue}var p,d=document.createElement(o.tagName),v=S(o.attributes);try{for(v.s();!(p=v.n()).done;){var m=p.value;d.setAttribute(m.name,m.value)}}catch(e){v.e(e)}finally{v.f()}d.innerText=o.innerText,d.text=o.text,t?(void 0!==c["original-display"]&&(d.style.display=c["original-display"]),void 0!==c.src&&(d.src=c.src)):(d.src="",void 0!==c["modified-by-klaro"]&&void 0!==c["original-display"]?d.setAttribute("data-original-display",c["original-display"]):(void 0!==o.style.display&&d.setAttribute("data-original-display",o.style.display),d.setAttribute("data-modified-by-klaro","yes")),d.style.display="none"),a.insertBefore(d,o),a.removeChild(o)}else if("SCRIPT"===o.tagName||"LINK"===o.tagName){if(t&&o.type===(s||"")&&o.src===l){console.debug("Skipping ".concat(o.tagName," for service ").concat(e.name,", as it already has the correct type or src..."));continue}var y,h=document.createElement(o.tagName),b=S(o.attributes);try{for(b.s();!(y=b.n()).done;){var g=y.value;h.setAttribute(g.name,g.value)}}catch(e){b.e(e)}finally{b.f()}h.innerText=o.innerText,h.text=o.text,t?(h.type=s||"",void 0!==l&&(h.src=l),void 0!==u&&(h.href=u)):h.type="text/plain",a.insertBefore(h,o),a.removeChild(o)}else{if(t){var _,w=S(f);try{for(w.s();!(_=w.n()).done;){var k=_.value,E=c[k];void 0!==E&&(void 0===c["original-"+k]&&(c["original-"+k]=o[k]),o[k]=E)}}catch(e){w.e(e)}finally{w.f()}void 0!==c.title&&(o.title=c.title),void 0!==c["original-display"]?o.style.display=c["original-display"]:o.style.removeProperty("display")}else{void 0!==c.title&&o.removeAttribute("title"),void 0===c["original-display"]&&void 0!==o.style.display&&(c["original-display"]=o.style.display),o.style.display="none";var j,O=S(f);try{for(O.s();!(j=O.n()).done;){var x=j.value;void 0!==c[x]&&(void 0!==c["original-"+x]?o[x]=c["original-"+x]:o.removeAttribute(x))}}catch(e){O.e(e)}finally{O.f()}}(0,i.X7)(c,o)}else t?(o.style.display="none",c["original-display"]=o.style.display):o.style.display=c["original-display"]||"block"}}},{key:"updateServiceStorage",value:function(e,t){if(!t&&void 0!==e.cookies&&e.cookies.length>0)for(var r=n(),i=0;i<e.cookies.length;i++){var a=e.cookies[i],c=void 0,s=void 0;if(a instanceof Array){var l=E(a,3);a=l[0],c=l[1],s=l[2]}else if(a instanceof Object&&!(a instanceof RegExp)){var u=a;a=u.pattern,c=u.path,s=u.domain}if(void 0!==a){a instanceof RegExp||(a=a.startsWith("^")?new RegExp(a):new RegExp("^"+a.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")+"$"));for(var f=0;f<r.length;f++){var p=r[f];null!==a.exec(p.name)&&(console.debug("Deleting cookie:",p.name,"Matched pattern:",a,"Path:",c,"Domain:",s),o(p.name,c,s),void 0===s&&o(p.name,c,"."+window.location.hostname))}}}}},{key:"_checkConsents",value:function(){for(var e=!0,t=new Set(this.config.services.map((function(e){return e.name}))),r=new Set(Object.keys(this.consents)),n=0,o=Object.keys(this.consents);n<o.length;n++){var i=o[n];t.has(i)||delete this.consents[i]}var a,c=S(this.config.services);try{for(c.s();!(a=c.n()).done;){var s=a.value;r.has(s.name)||(this.consents[s.name]=this.getDefaultConsent(s),e=!1)}}catch(e){c.e(e)}finally{c.f()}this.confirmed=e,e||(this.changed=!0)}}])&&A(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},5482:(e,t,r)=>{"use strict";function n(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e){if(null!==document.currentScript&&void 0!==document.currentScript)return document.currentScript;for(var t=document.getElementsByTagName("script"),r=0;r<t.length;r++){var n=t[r];if(n.src.includes(e))return n}return null}function a(e){for(var t={},r=0;r<e.attributes.length;r++){var n=e.attributes[r];n.name.startsWith("data-")&&(t[n.name.slice(5)]=n.value)}return t}function c(e,t){for(var r=Object.keys(e),n=0;n<r.length;n++){var o=r[n],i=e[o];t[o]!==i&&t.setAttribute("data-"+o,i)}}function s(e){var t,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=n(e))){r&&(e=r);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,c=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return c=e.done,e},e:function(e){s=!0,a=e},f:function(){try{c||null==r.return||r.return()}finally{if(s)throw a}}}}(document.querySelectorAll("style[data-context=klaro-styles]"));try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.innerText;void 0!==o.styleSheet&&(i=o.styleSheet.cssText);for(var a=function(){var e,t,r=(e=s[c],t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||n(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],a=r[1],l=new RegExp("([a-z0-9-]+):[^;]+;[\\s\\n]*\\1:\\s*var\\(--"+o+",\\s*[^\\)]+\\)","g");i=i.replace(l,(function(e,t){return"".concat(t,": ").concat(a,"; ").concat(t,": var(--").concat(o,", ").concat(a,")")}))},c=0,s=Object.entries(e);c<s.length;c++)a();var l=document.createElement("style");l.setAttribute("type","text/css"),l.setAttribute("data-context","klaro-styles"),void 0!==l.styleSheet?l.styleSheet.cssText=i:l.innerText=i,o.parentElement.appendChild(l),o.parentElement.removeChild(o)}}catch(e){r.e(e)}finally{r.f()}}r.d(t,{N3:()=>s,RT:()=>a,X7:()=>c,XZ:()=>i}),r(9305),r(2733),r(4701),r(4776),r(9892),r(6281),r(4962),r(9336),r(1908),r(7132),r(3810),r(8557),r(646),r(5021),r(3687),r(9425),r(3994),r(3062),r(4062),r(2367)},362:(e,t,r)=>{"use strict";var n=r(6441);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},2688:(e,t,r)=>{e.exports=r(362)()},6441:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4452:(e,t)=>{var r;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var r=arguments[t];r&&(e=a(e,i(r)))}return e}function i(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var r in e)n.call(e,r)&&e[r]&&(t=a(t,r));return t}function a(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},8120:(e,t,r)=>{"use strict";var n=r(1483),o=r(8761),i=TypeError;e.exports=function(e){if(n(e))return e;throw new i(o(e)+" is not a function")}},2374:(e,t,r)=>{"use strict";var n=r(943),o=r(8761),i=TypeError;e.exports=function(e){if(n(e))return e;throw new i(o(e)+" is not a constructor")}},3852:(e,t,r)=>{"use strict";var n=r(735),o=String,i=TypeError;e.exports=function(e){if(n(e))return e;throw new i("Can't set "+o(e)+" as a prototype")}},7095:(e,t,r)=>{"use strict";var n=r(1),o=r(5290),i=r(5835).f,a=n("unscopables"),c=Array.prototype;void 0===c[a]&&i(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},4419:(e,t,r)=>{"use strict";var n=r(9105).charAt;e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},6021:(e,t,r)=>{"use strict";var n=r(4815),o=TypeError;e.exports=function(e,t){if(n(t,e))return e;throw new o("Incorrect invocation")}},2293:(e,t,r)=>{"use strict";var n=r(1704),o=String,i=TypeError;e.exports=function(e){if(n(e))return e;throw new i(o(e)+" is not an object")}},9214:(e,t,r)=>{"use strict";var n=r(8473);e.exports=n((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},4793:(e,t,r)=>{"use strict";var n=r(2867).forEach,o=r(3152)("forEach");e.exports=o?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},6142:(e,t,r)=>{"use strict";var n=r(2914),o=r(1807),i=r(2347),a=r(8901),c=r(5299),s=r(943),l=r(6960),u=r(670),f=r(4887),p=r(6665),d=Array;e.exports=function(e){var t=i(e),r=s(this),v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m;y&&(m=n(m,v>2?arguments[2]:void 0));var h,b,g,_,w,k,S=p(t),E=0;if(!S||this===d&&c(S))for(h=l(t),b=r?new this(h):d(h);h>E;E++)k=y?m(t[E],E):t[E],u(b,E,k);else for(w=(_=f(t,S)).next,b=r?new this:[];!(g=o(w,_)).done;E++)k=y?a(_,m,[g.value,E],!0):g.value,u(b,E,k);return b.length=E,b}},6651:(e,t,r)=>{"use strict";var n=r(5599),o=r(3392),i=r(6960),a=function(e){return function(t,r,a){var c=n(t),s=i(c);if(0===s)return!e&&-1;var l,u=o(a,s);if(e&&r!=r){for(;s>u;)if((l=c[u++])!=l)return!0}else for(;s>u;u++)if((e||u in c)&&c[u]===r)return e||u||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2867:(e,t,r)=>{"use strict";var n=r(2914),o=r(4762),i=r(2121),a=r(2347),c=r(6960),s=r(4551),l=o([].push),u=function(e){var t=1===e,r=2===e,o=3===e,u=4===e,f=6===e,p=7===e,d=5===e||f;return function(v,m,y,h){for(var b,g,_=a(v),w=i(_),k=c(w),S=n(m,y),E=0,j=h||s,O=t?j(v,k):r||p?j(v,0):void 0;k>E;E++)if((d||E in w)&&(g=S(b=w[E],E,_),e))if(t)O[E]=g;else if(g)switch(e){case 3:return!0;case 5:return b;case 6:return E;case 2:l(O,b)}else switch(e){case 4:return!1;case 7:l(O,b)}return f?-1:o||u?u:O}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},4595:(e,t,r)=>{"use strict";var n=r(8473),o=r(1),i=r(6170),a=o("species");e.exports=function(e){return i>=51||!n((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},3152:(e,t,r)=>{"use strict";var n=r(8473);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){return 1},1)}))}},1698:(e,t,r)=>{"use strict";var n=r(4762);e.exports=n([].slice)},7354:(e,t,r)=>{"use strict";var n=r(1698),o=Math.floor,i=function(e,t){var r=e.length;if(r<8)for(var a,c,s=1;s<r;){for(c=s,a=e[s];c&&t(e[c-1],a)>0;)e[c]=e[--c];c!==s++&&(e[c]=a)}else for(var l=o(r/2),u=i(n(e,0,l),t),f=i(n(e,l),t),p=u.length,d=f.length,v=0,m=0;v<p||m<d;)e[v+m]=v<p&&m<d?t(u[v],f[m])<=0?u[v++]:f[m++]:v<p?u[v++]:f[m++];return e};e.exports=i},9703:(e,t,r)=>{"use strict";var n=r(4914),o=r(943),i=r(1704),a=r(1)("species"),c=Array;e.exports=function(e){var t;return n(e)&&(t=e.constructor,(o(t)&&(t===c||n(t.prototype))||i(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?c:t}},4551:(e,t,r)=>{"use strict";var n=r(9703);e.exports=function(e,t){return new(n(e))(0===t?0:t)}},8901:(e,t,r)=>{"use strict";var n=r(2293),o=r(6721);e.exports=function(e,t,r,i){try{return i?t(n(r)[0],r[1]):t(r)}catch(t){o(e,"throw",t)}}},1554:(e,t,r)=>{"use strict";var n=r(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){try{if(!t&&!o)return!1}catch(e){return!1}var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},e(i)}catch(e){}return r}},1278:(e,t,r)=>{"use strict";var n=r(4762),o=n({}.toString),i=n("".slice);e.exports=function(e){return i(o(e),8,-1)}},6145:(e,t,r)=>{"use strict";var n=r(4338),o=r(1483),i=r(1278),a=r(1)("toStringTag"),c=Object,s="Arguments"===i(function(){return arguments}());e.exports=n?i:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=c(e),a))?r:s?i(t):"Object"===(n=i(t))&&o(t.callee)?"Arguments":n}},4092:(e,t,r)=>{"use strict";var n=r(5290),o=r(3864),i=r(2313),a=r(2914),c=r(6021),s=r(5983),l=r(1506),u=r(5662),f=r(5247),p=r(240),d=r(382),v=r(8041).fastKey,m=r(4483),y=m.set,h=m.getterFor;e.exports={getConstructor:function(e,t,r,u){var f=e((function(e,o){c(e,p),y(e,{type:t,index:n(null),first:void 0,last:void 0,size:0}),d||(e.size=0),s(o)||l(o,e[u],{that:e,AS_ENTRIES:r})})),p=f.prototype,m=h(t),b=function(e,t,r){var n,o,i=m(e),a=g(e,t);return a?a.value=r:(i.last=a={index:o=v(t,!0),key:t,value:r,previous:n=i.last,next:void 0,removed:!1},i.first||(i.first=a),n&&(n.next=a),d?i.size++:e.size++,"F"!==o&&(i.index[o]=a)),e},g=function(e,t){var r,n=m(e),o=v(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key===t)return r};return i(p,{clear:function(){for(var e=m(this),t=e.first;t;)t.removed=!0,t.previous&&(t.previous=t.previous.next=void 0),t=t.next;e.first=e.last=void 0,e.index=n(null),d?e.size=0:this.size=0},delete:function(e){var t=this,r=m(t),n=g(t,e);if(n){var o=n.next,i=n.previous;delete r.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),r.first===n&&(r.first=o),r.last===n&&(r.last=i),d?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=m(this),n=a(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!g(this,e)}}),i(p,r?{get:function(e){var t=g(this,e);return t&&t.value},set:function(e,t){return b(this,0===e?0:e,t)}}:{add:function(e){return b(this,e=0===e?0:e,e)}}),d&&o(p,"size",{configurable:!0,get:function(){return m(this).size}}),f},setStrong:function(e,t,r){var n=t+" Iterator",o=h(t),i=h(n);u(e,t,(function(e,t){y(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?f("keys"===t?r.key:"values"===t?r.value:[r.key,r.value],!1):(e.target=void 0,f(void 0,!0))}),r?"entries":"values",!r,!0),p(t)}}},7446:(e,t,r)=>{"use strict";var n=r(8612),o=r(8389),i=r(4762),a=r(8730),c=r(7914),s=r(8041),l=r(1506),u=r(6021),f=r(1483),p=r(5983),d=r(1704),v=r(8473),m=r(1554),y=r(2277),h=r(2429);e.exports=function(e,t,r){var b=-1!==e.indexOf("Map"),g=-1!==e.indexOf("Weak"),_=b?"set":"add",w=o[e],k=w&&w.prototype,S=w,E={},j=function(e){var t=i(k[e]);c(k,e,"add"===e?function(e){return t(this,0===e?0:e),this}:"delete"===e?function(e){return!(g&&!d(e))&&t(this,0===e?0:e)}:"get"===e?function(e){return g&&!d(e)?void 0:t(this,0===e?0:e)}:"has"===e?function(e){return!(g&&!d(e))&&t(this,0===e?0:e)}:function(e,r){return t(this,0===e?0:e,r),this})};if(a(e,!f(w)||!(g||k.forEach&&!v((function(){(new w).entries().next()})))))S=r.getConstructor(t,e,b,_),s.enable();else if(a(e,!0)){var O=new S,x=O[_](g?{}:-0,1)!==O,P=v((function(){O.has(1)})),A=m((function(e){new w(e)})),C=!g&&v((function(){for(var e=new w,t=5;t--;)e[_](t,t);return!e.has(-0)}));A||((S=t((function(e,t){u(e,k);var r=h(new w,e,S);return p(t)||l(t,r[_],{that:r,AS_ENTRIES:b}),r}))).prototype=k,k.constructor=S),(P||C)&&(j("delete"),j("has"),b&&j("get")),(C||x)&&j(_),g&&k.clear&&delete k.clear}return E[e]=S,n({global:!0,constructor:!0,forced:S!==w},E),y(S,e),g||r.setStrong(S,e,b),S}},6726:(e,t,r)=>{"use strict";var n=r(5755),o=r(9497),i=r(4961),a=r(5835);e.exports=function(e,t,r){for(var c=o(t),s=a.f,l=i.f,u=0;u<c.length;u++){var f=c[u];n(e,f)||r&&n(r,f)||s(e,f,l(t,f))}}},4522:(e,t,r)=>{"use strict";var n=r(1)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(r){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},9441:(e,t,r)=>{"use strict";var n=r(8473);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},5247:e=>{"use strict";e.exports=function(e,t){return{value:e,done:t}}},9037:(e,t,r)=>{"use strict";var n=r(382),o=r(5835),i=r(7738);e.exports=n?function(e,t,r){return o.f(e,t,i(1,r))}:function(e,t,r){return e[t]=r,e}},7738:e=>{"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},670:(e,t,r)=>{"use strict";var n=r(382),o=r(5835),i=r(7738);e.exports=function(e,t,r){n?o.f(e,t,i(0,r)):e[t]=r}},6446:(e,t,r)=>{"use strict";var n=r(2293),o=r(348),i=TypeError;e.exports=function(e){if(n(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw new i("Incorrect hint");return o(this,e)}},3864:(e,t,r)=>{"use strict";var n=r(169),o=r(5835);e.exports=function(e,t,r){return r.get&&n(r.get,t,{getter:!0}),r.set&&n(r.set,t,{setter:!0}),o.f(e,t,r)}},7914:(e,t,r)=>{"use strict";var n=r(1483),o=r(5835),i=r(169),a=r(2095);e.exports=function(e,t,r,c){c||(c={});var s=c.enumerable,l=void 0!==c.name?c.name:t;if(n(r)&&i(r,l,c),c.global)s?e[t]=r:a(t,r);else{try{c.unsafe?e[t]&&(s=!0):delete e[t]}catch(e){}s?e[t]=r:o.f(e,t,{value:r,enumerable:!1,configurable:!c.nonConfigurable,writable:!c.nonWritable})}return e}},2313:(e,t,r)=>{"use strict";var n=r(7914);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},2095:(e,t,r)=>{"use strict";var n=r(8389),o=Object.defineProperty;e.exports=function(e,t){try{o(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},6060:(e,t,r)=>{"use strict";var n=r(8761),o=TypeError;e.exports=function(e,t){if(!delete e[t])throw new o("Cannot delete property "+n(t)+" of "+n(e))}},382:(e,t,r)=>{"use strict";var n=r(8473);e.exports=!n((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},3145:(e,t,r)=>{"use strict";var n=r(8389),o=r(1704),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},1091:e=>{"use strict";var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},4842:e=>{"use strict";e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},1902:(e,t,r)=>{"use strict";var n=r(3145)("span").classList,o=n&&n.constructor&&n.constructor.prototype;e.exports=o===Object.prototype?void 0:o},7332:(e,t,r)=>{"use strict";var n=r(9966).match(/firefox\/(\d+)/i);e.exports=!!n&&+n[1]},6956:(e,t,r)=>{"use strict";var n=r(938),o=r(4334);e.exports=!n&&!o&&"object"==typeof window&&"object"==typeof document},5413:e=>{"use strict";e.exports="function"==typeof Bun&&Bun&&"string"==typeof Bun.version},938:e=>{"use strict";e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},8996:(e,t,r)=>{"use strict";var n=r(9966);e.exports=/MSIE|Trident/.test(n)},4466:(e,t,r)=>{"use strict";var n=r(9966);e.exports=/ipad|iphone|ipod/i.test(n)&&"undefined"!=typeof Pebble},8417:(e,t,r)=>{"use strict";var n=r(9966);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},4334:(e,t,r)=>{"use strict";var n=r(8389),o=r(1278);e.exports="process"===o(n.process)},6639:(e,t,r)=>{"use strict";var n=r(9966);e.exports=/web0s(?!.*chrome)/i.test(n)},9966:e=>{"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},6170:(e,t,r)=>{"use strict";var n,o,i=r(8389),a=r(9966),c=i.process,s=i.Deno,l=c&&c.versions||s&&s.version,u=l&&l.v8;u&&(o=(n=u.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),e.exports=o},5158:(e,t,r)=>{"use strict";var n=r(9966).match(/AppleWebKit\/(\d+)\./);e.exports=!!n&&+n[1]},4741:e=>{"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},8612:(e,t,r)=>{"use strict";var n=r(8389),o=r(4961).f,i=r(9037),a=r(7914),c=r(2095),s=r(6726),l=r(8730);e.exports=function(e,t){var r,u,f,p,d,v=e.target,m=e.global,y=e.stat;if(r=m?n:y?n[v]||c(v,{}):n[v]&&n[v].prototype)for(u in t){if(p=t[u],f=e.dontCallGetSet?(d=o(r,u))&&d.value:r[u],!l(m?u:v+(y?".":"#")+u,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;s(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),a(r,u,p,e)}}},8473:e=>{"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},3358:(e,t,r)=>{"use strict";r(5021);var n=r(1807),o=r(7914),i=r(8865),a=r(8473),c=r(1),s=r(9037),l=c("species"),u=RegExp.prototype;e.exports=function(e,t,r,f){var p=c(e),d=!a((function(){var t={};return t[p]=function(){return 7},7!==""[e](t)})),v=d&&!a((function(){var t=!1,r=/a/;return"split"===e&&((r={}).constructor={},r.constructor[l]=function(){return r},r.flags="",r[p]=/./[p]),r.exec=function(){return t=!0,null},r[p](""),!t}));if(!d||!v||r){var m=/./[p],y=t(p,""[e],(function(e,t,r,o,a){var c=t.exec;return c===i||c===u.exec?d&&!a?{done:!0,value:n(m,t,r,o)}:{done:!0,value:n(e,r,t,o)}:{done:!1}}));o(String.prototype,e,y[0]),o(u,p,y[1])}f&&s(u[p],"sham",!0)}},6530:(e,t,r)=>{"use strict";var n=r(8473);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},3067:(e,t,r)=>{"use strict";var n=r(274),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},2914:(e,t,r)=>{"use strict";var n=r(3786),o=r(8120),i=r(274),a=n(n.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},274:(e,t,r)=>{"use strict";var n=r(8473);e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},2164:(e,t,r)=>{"use strict";var n=r(4762),o=r(8120),i=r(1704),a=r(5755),c=r(1698),s=r(274),l=Function,u=n([].concat),f=n([].join),p={};e.exports=s?l.bind:function(e){var t=o(this),r=t.prototype,n=c(arguments,1),s=function(){var r=u(n,c(arguments));return this instanceof s?function(e,t,r){if(!a(p,t)){for(var n=[],o=0;o<t;o++)n[o]="a["+o+"]";p[t]=l("C,a","return new C("+f(n,",")+")")}return p[t](e,r)}(t,r.length,r):t.apply(e,r)};return i(r)&&(s.prototype=r),s}},1807:(e,t,r)=>{"use strict";var n=r(274),o=Function.prototype.call;e.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},2048:(e,t,r)=>{"use strict";var n=r(382),o=r(5755),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,c=o(i,"name"),s=c&&"something"===function(){}.name,l=c&&(!n||n&&a(i,"name").configurable);e.exports={EXISTS:c,PROPER:s,CONFIGURABLE:l}},680:(e,t,r)=>{"use strict";var n=r(4762),o=r(8120);e.exports=function(e,t,r){try{return n(o(Object.getOwnPropertyDescriptor(e,t)[r]))}catch(e){}}},3786:(e,t,r)=>{"use strict";var n=r(1278),o=r(4762);e.exports=function(e){if("Function"===n(e))return o(e)}},4762:(e,t,r)=>{"use strict";var n=r(274),o=Function.prototype,i=o.call,a=n&&o.bind.bind(i,i);e.exports=n?a:function(e){return function(){return i.apply(e,arguments)}}},1409:(e,t,r)=>{"use strict";var n=r(8389),o=r(1483);e.exports=function(e,t){return arguments.length<2?(r=n[e],o(r)?r:void 0):n[e]&&n[e][t];var r}},6665:(e,t,r)=>{"use strict";var n=r(6145),o=r(2564),i=r(5983),a=r(6775),c=r(1)("iterator");e.exports=function(e){if(!i(e))return o(e,c)||o(e,"@@iterator")||a[n(e)]}},4887:(e,t,r)=>{"use strict";var n=r(1807),o=r(8120),i=r(2293),a=r(8761),c=r(6665),s=TypeError;e.exports=function(e,t){var r=arguments.length<2?c(e):t;if(o(r))return i(n(r,e));throw new s(a(e)+" is not iterable")}},5215:(e,t,r)=>{"use strict";var n=r(4762),o=r(4914),i=r(1483),a=r(1278),c=r(6261),s=n([].push);e.exports=function(e){if(i(e))return e;if(o(e)){for(var t=e.length,r=[],n=0;n<t;n++){var l=e[n];"string"==typeof l?s(r,l):"number"!=typeof l&&"Number"!==a(l)&&"String"!==a(l)||s(r,c(l))}var u=r.length,f=!0;return function(e,t){if(f)return f=!1,t;if(o(this))return t;for(var n=0;n<u;n++)if(r[n]===e)return t}}}},2564:(e,t,r)=>{"use strict";var n=r(8120),o=r(5983);e.exports=function(e,t){var r=e[t];return o(r)?void 0:n(r)}},708:(e,t,r)=>{"use strict";var n=r(4762),o=r(2347),i=Math.floor,a=n("".charAt),c=n("".replace),s=n("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,r,n,f,p){var d=r+e.length,v=n.length,m=u;return void 0!==f&&(f=o(f),m=l),c(p,m,(function(o,c){var l;switch(a(c,0)){case"$":return"$";case"&":return e;case"`":return s(t,0,r);case"'":return s(t,d);case"<":l=f[s(c,1,-1)];break;default:var u=+c;if(0===u)return o;if(u>v){var p=i(u/10);return 0===p?o:p<=v?void 0===n[p-1]?a(c,1):n[p-1]+a(c,1):o}l=n[u-1]}return void 0===l?"":l}))}},8389:function(e,t,r){"use strict";var n=function(e){return e&&e.Math===Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||n("object"==typeof this&&this)||function(){return this}()||Function("return this")()},5755:(e,t,r)=>{"use strict";var n=r(4762),o=r(2347),i=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},1507:e=>{"use strict";e.exports={}},1339:e=>{"use strict";e.exports=function(e,t){try{1===arguments.length?console.error(e):console.error(e,t)}catch(e){}}},2811:(e,t,r)=>{"use strict";var n=r(1409);e.exports=n("document","documentElement")},1799:(e,t,r)=>{"use strict";var n=r(382),o=r(8473),i=r(3145);e.exports=!n&&!o((function(){return 7!==Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},2121:(e,t,r)=>{"use strict";var n=r(4762),o=r(8473),i=r(1278),a=Object,c=n("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"===i(e)?c(e,""):a(e)}:a},2429:(e,t,r)=>{"use strict";var n=r(1483),o=r(1704),i=r(1953);e.exports=function(e,t,r){var a,c;return i&&n(a=t.constructor)&&a!==r&&o(c=a.prototype)&&c!==r.prototype&&i(e,c),e}},7268:(e,t,r)=>{"use strict";var n=r(4762),o=r(1483),i=r(1831),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},8041:(e,t,r)=>{"use strict";var n=r(8612),o=r(4762),i=r(1507),a=r(1704),c=r(5755),s=r(5835).f,l=r(2278),u=r(2020),f=r(706),p=r(1866),d=r(6530),v=!1,m=p("meta"),y=0,h=function(e){s(e,m,{value:{objectID:"O"+y++,weakData:{}}})},b=e.exports={enable:function(){b.enable=function(){},v=!0;var e=l.f,t=o([].splice),r={};r[m]=1,e(r).length&&(l.f=function(r){for(var n=e(r),o=0,i=n.length;o<i;o++)if(n[o]===m){t(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!c(e,m)){if(!f(e))return"F";if(!t)return"E";h(e)}return e[m].objectID},getWeakData:function(e,t){if(!c(e,m)){if(!f(e))return!0;if(!t)return!1;h(e)}return e[m].weakData},onFreeze:function(e){return d&&v&&f(e)&&!c(e,m)&&h(e),e}};i[m]=!0},4483:(e,t,r)=>{"use strict";var n,o,i,a=r(4644),c=r(8389),s=r(1704),l=r(9037),u=r(5755),f=r(1831),p=r(5409),d=r(1507),v="Object already initialized",m=c.TypeError,y=c.WeakMap;if(a||f.state){var h=f.state||(f.state=new y);h.get=h.get,h.has=h.has,h.set=h.set,n=function(e,t){if(h.has(e))throw new m(v);return t.facade=e,h.set(e,t),t},o=function(e){return h.get(e)||{}},i=function(e){return h.has(e)}}else{var b=p("state");d[b]=!0,n=function(e,t){if(u(e,b))throw new m(v);return t.facade=e,l(e,b,t),t},o=function(e){return u(e,b)?e[b]:{}},i=function(e){return u(e,b)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!s(t)||(r=o(t)).type!==e)throw new m("Incompatible receiver, "+e+" required");return r}}}},5299:(e,t,r)=>{"use strict";var n=r(1),o=r(6775),i=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},4914:(e,t,r)=>{"use strict";var n=r(1278);e.exports=Array.isArray||function(e){return"Array"===n(e)}},1483:e=>{"use strict";var t="object"==typeof document&&document.all;e.exports=void 0===t&&void 0!==t?function(e){return"function"==typeof e||e===t}:function(e){return"function"==typeof e}},943:(e,t,r)=>{"use strict";var n=r(4762),o=r(8473),i=r(1483),a=r(6145),c=r(1409),s=r(7268),l=function(){},u=c("Reflect","construct"),f=/^\s*(?:class|function)\b/,p=n(f.exec),d=!f.test(l),v=function(e){if(!i(e))return!1;try{return u(l,[],e),!0}catch(e){return!1}},m=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return d||!!p(f,s(e))}catch(e){return!0}};m.sham=!0,e.exports=!u||o((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?m:v},8730:(e,t,r)=>{"use strict";var n=r(8473),o=r(1483),i=/#|\.prototype\./,a=function(e,t){var r=s[c(e)];return r===u||r!==l&&(o(t)?n(t):!!t)},c=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=a.data={},l=a.NATIVE="N",u=a.POLYFILL="P";e.exports=a},5983:e=>{"use strict";e.exports=function(e){return null==e}},1704:(e,t,r)=>{"use strict";var n=r(1483);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},735:(e,t,r)=>{"use strict";var n=r(1704);e.exports=function(e){return n(e)||null===e}},9557:e=>{"use strict";e.exports=!1},4786:(e,t,r)=>{"use strict";var n=r(1704),o=r(1278),i=r(1)("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[i])?!!t:"RegExp"===o(e))}},1423:(e,t,r)=>{"use strict";var n=r(1409),o=r(1483),i=r(4815),a=r(5022),c=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=n("Symbol");return o(t)&&i(t.prototype,c(e))}},1506:(e,t,r)=>{"use strict";var n=r(2914),o=r(1807),i=r(2293),a=r(8761),c=r(5299),s=r(6960),l=r(4815),u=r(4887),f=r(6665),p=r(6721),d=TypeError,v=function(e,t){this.stopped=e,this.result=t},m=v.prototype;e.exports=function(e,t,r){var y,h,b,g,_,w,k,S=r&&r.that,E=!(!r||!r.AS_ENTRIES),j=!(!r||!r.IS_RECORD),O=!(!r||!r.IS_ITERATOR),x=!(!r||!r.INTERRUPTED),P=n(t,S),A=function(e){return y&&p(y,"normal",e),new v(!0,e)},C=function(e){return E?(i(e),x?P(e[0],e[1],A):P(e[0],e[1])):x?P(e,A):P(e)};if(j)y=e.iterator;else if(O)y=e;else{if(!(h=f(e)))throw new d(a(e)+" is not iterable");if(c(h)){for(b=0,g=s(e);g>b;b++)if((_=C(e[b]))&&l(m,_))return _;return new v(!1)}y=u(e,h)}for(w=j?e.next:y.next;!(k=o(w,y)).done;){try{_=C(k.value)}catch(e){p(y,"throw",e)}if("object"==typeof _&&_&&l(m,_))return _}return new v(!1)}},6721:(e,t,r)=>{"use strict";var n=r(1807),o=r(2293),i=r(2564);e.exports=function(e,t,r){var a,c;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw r;return r}a=n(a,e)}catch(e){c=!0,a=e}if("throw"===t)throw r;if(c)throw a;return o(a),r}},1040:(e,t,r)=>{"use strict";var n=r(1851).IteratorPrototype,o=r(5290),i=r(7738),a=r(2277),c=r(6775),s=function(){return this};e.exports=function(e,t,r,l){var u=t+" Iterator";return e.prototype=o(n,{next:i(+!l,r)}),a(e,u,!1,!0),c[u]=s,e}},5662:(e,t,r)=>{"use strict";var n=r(8612),o=r(1807),i=r(9557),a=r(2048),c=r(1483),s=r(1040),l=r(3181),u=r(1953),f=r(2277),p=r(9037),d=r(7914),v=r(1),m=r(6775),y=r(1851),h=a.PROPER,b=a.CONFIGURABLE,g=y.IteratorPrototype,_=y.BUGGY_SAFARI_ITERATORS,w=v("iterator"),k="keys",S="values",E="entries",j=function(){return this};e.exports=function(e,t,r,a,v,y,O){s(r,t,a);var x,P,A,C=function(e){if(e===v&&R)return R;if(!_&&e&&e in T)return T[e];switch(e){case k:case S:case E:return function(){return new r(this,e)}}return function(){return new r(this)}},z=t+" Iterator",N=!1,T=e.prototype,I=T[w]||T["@@iterator"]||v&&T[v],R=!_&&I||C(v),D="Array"===t&&T.entries||I;if(D&&(x=l(D.call(new e)))!==Object.prototype&&x.next&&(i||l(x)===g||(u?u(x,g):c(x[w])||d(x,w,j)),f(x,z,!0,!0),i&&(m[z]=j)),h&&v===S&&I&&I.name!==S&&(!i&&b?p(T,"name",S):(N=!0,R=function(){return o(I,this)})),v)if(P={values:C(S),keys:y?R:C(k),entries:C(E)},O)for(A in P)(_||N||!(A in T))&&d(T,A,P[A]);else n({target:t,proto:!0,forced:_||N},P);return i&&!O||T[w]===R||d(T,w,R,{name:v}),m[t]=R,P}},1851:(e,t,r)=>{"use strict";var n,o,i,a=r(8473),c=r(1483),s=r(1704),l=r(5290),u=r(3181),f=r(7914),p=r(1),d=r(9557),v=p("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(n=o):m=!0),!s(n)||a((function(){var e={};return n[v].call(e)!==e}))?n={}:d&&(n=l(n)),c(n[v])||f(n,v,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:m}},6775:e=>{"use strict";e.exports={}},6960:(e,t,r)=>{"use strict";var n=r(8324);e.exports=function(e){return n(e.length)}},169:(e,t,r)=>{"use strict";var n=r(4762),o=r(8473),i=r(1483),a=r(5755),c=r(382),s=r(2048).CONFIGURABLE,l=r(7268),u=r(4483),f=u.enforce,p=u.get,d=String,v=Object.defineProperty,m=n("".slice),y=n("".replace),h=n([].join),b=c&&!o((function(){return 8!==v((function(){}),"length",{value:8}).length})),g=String(String).split("String"),_=e.exports=function(e,t,r){"Symbol("===m(d(t),0,7)&&(t="["+y(d(t),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),r&&r.getter&&(t="get "+t),r&&r.setter&&(t="set "+t),(!a(e,"name")||s&&e.name!==t)&&(c?v(e,"name",{value:t,configurable:!0}):e.name=t),b&&r&&a(r,"arity")&&e.length!==r.arity&&v(e,"length",{value:r.arity});try{r&&a(r,"constructor")&&r.constructor?c&&v(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var n=f(e);return a(n,"source")||(n.source=h(g,"string"==typeof t?t:"")),e};Function.prototype.toString=_((function(){return i(this)&&p(this).source||l(this)}),"toString")},1703:e=>{"use strict";var t=Math.ceil,r=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?r:t)(n)}},553:(e,t,r)=>{"use strict";var n,o,i,a,c,s=r(8389),l=r(8123),u=r(2914),f=r(7007).set,p=r(5459),d=r(8417),v=r(4466),m=r(6639),y=r(4334),h=s.MutationObserver||s.WebKitMutationObserver,b=s.document,g=s.process,_=s.Promise,w=l("queueMicrotask");if(!w){var k=new p,S=function(){var e,t;for(y&&(e=g.domain)&&e.exit();t=k.get();)try{t()}catch(e){throw k.head&&n(),e}e&&e.enter()};d||y||m||!h||!b?!v&&_&&_.resolve?((a=_.resolve(void 0)).constructor=_,c=u(a.then,a),n=function(){c(S)}):y?n=function(){g.nextTick(S)}:(f=u(f,s),n=function(){f(S)}):(o=!0,i=b.createTextNode(""),new h(S).observe(i,{characterData:!0}),n=function(){i.data=o=!o}),w=function(e){k.head||n(),k.add(e)}}e.exports=w},1173:(e,t,r)=>{"use strict";var n=r(8120),o=TypeError,i=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw new o("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new i(e)}},4989:(e,t,r)=>{"use strict";var n=r(4786),o=TypeError;e.exports=function(e){if(n(e))throw new o("The method doesn't accept regular expressions");return e}},1439:(e,t,r)=>{"use strict";var n=r(382),o=r(4762),i=r(1807),a=r(8473),c=r(3658),s=r(4347),l=r(7611),u=r(2347),f=r(2121),p=Object.assign,d=Object.defineProperty,v=o([].concat);e.exports=!p||a((function(){if(n&&1!==p({b:1},p(d({},"a",{enumerable:!0,get:function(){d(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol("assign detection"),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach((function(e){t[e]=e})),7!==p({},e)[r]||c(p({},t)).join("")!==o}))?function(e,t){for(var r=u(e),o=arguments.length,a=1,p=s.f,d=l.f;o>a;)for(var m,y=f(arguments[a++]),h=p?v(c(y),p(y)):c(y),b=h.length,g=0;b>g;)m=h[g++],n&&!i(d,y,m)||(r[m]=y[m]);return r}:p},5290:(e,t,r)=>{"use strict";var n,o=r(2293),i=r(5799),a=r(4741),c=r(1507),s=r(2811),l=r(3145),u=r(5409),f="prototype",p="script",d=u("IE_PROTO"),v=function(){},m=function(e){return"<"+p+">"+e+"</"+p+">"},y=function(e){e.write(m("")),e.close();var t=e.parentWindow.Object;return e=null,t},h=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t,r;h="undefined"!=typeof document?document.domain&&n?y(n):(t=l("iframe"),r="java"+p+":",t.style.display="none",s.appendChild(t),t.src=String(r),(e=t.contentWindow.document).open(),e.write(m("document.F=Object")),e.close(),e.F):y(n);for(var o=a.length;o--;)delete h[f][a[o]];return h()};c[d]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(v[f]=o(e),r=new v,v[f]=null,r[d]=e):r=h(),void 0===t?r:i.f(r,t)}},5799:(e,t,r)=>{"use strict";var n=r(382),o=r(3896),i=r(5835),a=r(2293),c=r(5599),s=r(3658);t.f=n&&!o?Object.defineProperties:function(e,t){a(e);for(var r,n=c(t),o=s(t),l=o.length,u=0;l>u;)i.f(e,r=o[u++],n[r]);return e}},5835:(e,t,r)=>{"use strict";var n=r(382),o=r(1799),i=r(3896),a=r(2293),c=r(3815),s=TypeError,l=Object.defineProperty,u=Object.getOwnPropertyDescriptor,f="enumerable",p="configurable",d="writable";t.f=n?i?function(e,t,r){if(a(e),t=c(t),a(r),"function"==typeof e&&"prototype"===t&&"value"in r&&d in r&&!r[d]){var n=u(e,t);n&&n[d]&&(e[t]=r.value,r={configurable:p in r?r[p]:n[p],enumerable:f in r?r[f]:n[f],writable:!1})}return l(e,t,r)}:l:function(e,t,r){if(a(e),t=c(t),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw new s("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},4961:(e,t,r)=>{"use strict";var n=r(382),o=r(1807),i=r(7611),a=r(7738),c=r(5599),s=r(3815),l=r(5755),u=r(1799),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=c(e),t=s(t),u)try{return f(e,t)}catch(e){}if(l(e,t))return a(!o(i.f,e,t),e[t])}},2020:(e,t,r)=>{"use strict";var n=r(1278),o=r(5599),i=r(2278).f,a=r(1698),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return c&&"Window"===n(e)?function(e){try{return i(e)}catch(e){return a(c)}}(e):i(o(e))}},2278:(e,t,r)=>{"use strict";var n=r(6742),o=r(4741).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},4347:(e,t)=>{"use strict";t.f=Object.getOwnPropertySymbols},3181:(e,t,r)=>{"use strict";var n=r(5755),o=r(1483),i=r(2347),a=r(5409),c=r(9441),s=a("IE_PROTO"),l=Object,u=l.prototype;e.exports=c?l.getPrototypeOf:function(e){var t=i(e);if(n(t,s))return t[s];var r=t.constructor;return o(r)&&t instanceof r?r.prototype:t instanceof l?u:null}},706:(e,t,r)=>{"use strict";var n=r(8473),o=r(1704),i=r(1278),a=r(9214),c=Object.isExtensible,s=n((function(){c(1)}));e.exports=s||a?function(e){return!!o(e)&&(!a||"ArrayBuffer"!==i(e))&&(!c||c(e))}:c},4815:(e,t,r)=>{"use strict";var n=r(4762);e.exports=n({}.isPrototypeOf)},6742:(e,t,r)=>{"use strict";var n=r(4762),o=r(5755),i=r(5599),a=r(6651).indexOf,c=r(1507),s=n([].push);e.exports=function(e,t){var r,n=i(e),l=0,u=[];for(r in n)!o(c,r)&&o(n,r)&&s(u,r);for(;t.length>l;)o(n,r=t[l++])&&(~a(u,r)||s(u,r));return u}},3658:(e,t,r)=>{"use strict";var n=r(6742),o=r(4741);e.exports=Object.keys||function(e){return n(e,o)}},7611:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},1953:(e,t,r)=>{"use strict";var n=r(680),o=r(2293),i=r(3852);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.prototype,"__proto__","set"))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return o(r),i(n),t?e(r,n):r.__proto__=n,r}}():void 0)},5627:(e,t,r)=>{"use strict";var n=r(382),o=r(8473),i=r(4762),a=r(3181),c=r(3658),s=r(5599),l=i(r(7611).f),u=i([].push),f=n&&o((function(){var e=Object.create(null);return e[2]=2,!l(e,2)})),p=function(e){return function(t){for(var r,o=s(t),i=c(o),p=f&&null===a(o),d=i.length,v=0,m=[];d>v;)r=i[v++],n&&!(p?r in o:l(o,r))||u(m,e?[r,o[r]]:o[r]);return m}};e.exports={entries:p(!0),values:p(!1)}},5685:(e,t,r)=>{"use strict";var n=r(4338),o=r(6145);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},348:(e,t,r)=>{"use strict";var n=r(1807),o=r(1483),i=r(1704),a=TypeError;e.exports=function(e,t){var r,c;if("string"===t&&o(r=e.toString)&&!i(c=n(r,e)))return c;if(o(r=e.valueOf)&&!i(c=n(r,e)))return c;if("string"!==t&&o(r=e.toString)&&!i(c=n(r,e)))return c;throw new a("Can't convert object to primitive value")}},9497:(e,t,r)=>{"use strict";var n=r(1409),o=r(4762),i=r(2278),a=r(4347),c=r(2293),s=o([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(c(e)),r=a.f;return r?s(t,r(e)):t}},6589:(e,t,r)=>{"use strict";var n=r(8389);e.exports=n},4193:e=>{"use strict";e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},5502:(e,t,r)=>{"use strict";var n=r(8389),o=r(2832),i=r(1483),a=r(8730),c=r(7268),s=r(1),l=r(6956),u=r(938),f=r(9557),p=r(6170),d=o&&o.prototype,v=s("species"),m=!1,y=i(n.PromiseRejectionEvent),h=a("Promise",(function(){var e=c(o),t=e!==String(o);if(!t&&66===p)return!0;if(f&&(!d.catch||!d.finally))return!0;if(!p||p<51||!/native code/.test(e)){var r=new o((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};if((r.constructor={})[v]=n,!(m=r.then((function(){}))instanceof n))return!0}return!t&&(l||u)&&!y}));e.exports={CONSTRUCTOR:h,REJECTION_EVENT:y,SUBCLASSING:m}},2832:(e,t,r)=>{"use strict";var n=r(8389);e.exports=n.Promise},2172:(e,t,r)=>{"use strict";var n=r(2293),o=r(1704),i=r(1173);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},1407:(e,t,r)=>{"use strict";var n=r(2832),o=r(1554),i=r(5502).CONSTRUCTOR;e.exports=i||!o((function(e){n.all(e).then(void 0,(function(){}))}))},7150:(e,t,r)=>{"use strict";var n=r(5835).f;e.exports=function(e,t,r){r in e||n(e,r,{configurable:!0,get:function(){return t[r]},set:function(e){t[r]=e}})}},5459:e=>{"use strict";var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null},r=this.tail;r?r.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=t},2428:(e,t,r)=>{"use strict";var n=r(1807),o=r(2293),i=r(1483),a=r(1278),c=r(8865),s=TypeError;e.exports=function(e,t){var r=e.exec;if(i(r)){var l=n(r,e,t);return null!==l&&o(l),l}if("RegExp"===a(e))return n(c,e,t);throw new s("RegExp#exec called on incompatible receiver")}},8865:(e,t,r)=>{"use strict";var n,o,i=r(1807),a=r(4762),c=r(6261),s=r(6653),l=r(7435),u=r(7255),f=r(5290),p=r(4483).get,d=r(3933),v=r(4528),m=u("native-string-replace",String.prototype.replace),y=RegExp.prototype.exec,h=y,b=a("".charAt),g=a("".indexOf),_=a("".replace),w=a("".slice),k=(o=/b*/g,i(y,n=/a/,"a"),i(y,o,"a"),0!==n.lastIndex||0!==o.lastIndex),S=l.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(k||E||S||d||v)&&(h=function(e){var t,r,n,o,a,l,u,d=this,v=p(d),j=c(e),O=v.raw;if(O)return O.lastIndex=d.lastIndex,t=i(h,O,j),d.lastIndex=O.lastIndex,t;var x=v.groups,P=S&&d.sticky,A=i(s,d),C=d.source,z=0,N=j;if(P&&(A=_(A,"y",""),-1===g(A,"g")&&(A+="g"),N=w(j,d.lastIndex),d.lastIndex>0&&(!d.multiline||d.multiline&&"\n"!==b(j,d.lastIndex-1))&&(C="(?: "+C+")",N=" "+N,z++),r=new RegExp("^(?:"+C+")",A)),E&&(r=new RegExp("^"+C+"$(?!\\s)",A)),k&&(n=d.lastIndex),o=i(y,P?r:d,N),P?o?(o.input=w(o.input,z),o[0]=w(o[0],z),o.index=d.lastIndex,d.lastIndex+=o[0].length):d.lastIndex=0:k&&o&&(d.lastIndex=d.global?o.index+o[0].length:n),E&&o&&o.length>1&&i(m,o[0],r,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&x)for(o.groups=l=f(null),a=0;a<x.length;a++)l[(u=x[a])[0]]=o[u[1]];return o}),e.exports=h},6653:(e,t,r)=>{"use strict";var n=r(2293);e.exports=function(){var e=n(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},9736:(e,t,r)=>{"use strict";var n=r(1807),o=r(5755),i=r(4815),a=r(6653),c=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in c||o(e,"flags")||!i(c,e)?t:n(a,e)}},7435:(e,t,r)=>{"use strict";var n=r(8473),o=r(8389).RegExp,i=n((function(){var e=o("a","y");return e.lastIndex=2,null!==e.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),c=i||n((function(){var e=o("^r","gy");return e.lastIndex=2,null!==e.exec("str")}));e.exports={BROKEN_CARET:c,MISSED_STICKY:a,UNSUPPORTED_Y:i}},3933:(e,t,r)=>{"use strict";var n=r(8473),o=r(8389).RegExp;e.exports=n((function(){var e=o(".","s");return!(e.dotAll&&e.test("\n")&&"s"===e.flags)}))},4528:(e,t,r)=>{"use strict";var n=r(8473),o=r(8389).RegExp;e.exports=n((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},3312:(e,t,r)=>{"use strict";var n=r(5983),o=TypeError;e.exports=function(e){if(n(e))throw new o("Can't call method on "+e);return e}},8123:(e,t,r)=>{"use strict";var n=r(8389),o=r(382),i=Object.getOwnPropertyDescriptor;e.exports=function(e){if(!o)return n[e];var t=i(n,e);return t&&t.value}},5420:e=>{"use strict";e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},9570:(e,t,r)=>{"use strict";var n,o=r(8389),i=r(3067),a=r(1483),c=r(5413),s=r(9966),l=r(1698),u=r(4066),f=o.Function,p=/MSIE .\./.test(s)||c&&((n=o.Bun.version.split(".")).length<3||"0"===n[0]&&(n[1]<3||"3"===n[1]&&"0"===n[2]));e.exports=function(e,t){var r=t?2:1;return p?function(n,o){var c=u(arguments.length,1)>r,s=a(n)?n:f(n),p=c?l(arguments,r):[],d=c?function(){i(s,this,p)}:s;return t?e(d,o):e(d)}:e}},240:(e,t,r)=>{"use strict";var n=r(1409),o=r(3864),i=r(1),a=r(382),c=i("species");e.exports=function(e){var t=n(e);a&&t&&!t[c]&&o(t,c,{configurable:!0,get:function(){return this}})}},2277:(e,t,r)=>{"use strict";var n=r(5835).f,o=r(5755),i=r(1)("toStringTag");e.exports=function(e,t,r){e&&!r&&(e=e.prototype),e&&!o(e,i)&&n(e,i,{configurable:!0,value:t})}},5409:(e,t,r)=>{"use strict";var n=r(7255),o=r(1866),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},1831:(e,t,r)=>{"use strict";var n=r(9557),o=r(8389),i=r(2095),a="__core-js_shared__",c=e.exports=o[a]||i(a,{});(c.versions||(c.versions=[])).push({version:"3.36.0",mode:n?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.0/LICENSE",source:"https://github.com/zloirock/core-js"})},7255:(e,t,r)=>{"use strict";var n=r(1831);e.exports=function(e,t){return n[e]||(n[e]=t||{})}},483:(e,t,r)=>{"use strict";var n=r(2293),o=r(2374),i=r(5983),a=r(1)("species");e.exports=function(e,t){var r,c=n(e).constructor;return void 0===c||i(r=n(c)[a])?t:o(r)}},9105:(e,t,r)=>{"use strict";var n=r(4762),o=r(3005),i=r(6261),a=r(3312),c=n("".charAt),s=n("".charCodeAt),l=n("".slice),u=function(e){return function(t,r){var n,u,f=i(a(t)),p=o(r),d=f.length;return p<0||p>=d?e?"":void 0:(n=s(f,p))<55296||n>56319||p+1===d||(u=s(f,p+1))<56320||u>57343?e?c(f,p):n:e?l(f,p,p+2):u-56320+(n-55296<<10)+65536}};e.exports={codeAt:u(!1),charAt:u(!0)}},4939:(e,t,r)=>{"use strict";var n=r(4762),o=2147483647,i=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,c="Overflow: input needs wider integers to process",s=RangeError,l=n(a.exec),u=Math.floor,f=String.fromCharCode,p=n("".charCodeAt),d=n([].join),v=n([].push),m=n("".replace),y=n("".split),h=n("".toLowerCase),b=function(e){return e+22+75*(e<26)},g=function(e,t,r){var n=0;for(e=r?u(e/700):e>>1,e+=u(e/t);e>455;)e=u(e/35),n+=36;return u(n+36*e/(e+38))},_=function(e){var t=[];e=function(e){for(var t=[],r=0,n=e.length;r<n;){var o=p(e,r++);if(o>=55296&&o<=56319&&r<n){var i=p(e,r++);56320==(64512&i)?v(t,((1023&o)<<10)+(1023&i)+65536):(v(t,o),r--)}else v(t,o)}return t}(e);var r,n,i=e.length,a=128,l=0,m=72;for(r=0;r<e.length;r++)(n=e[r])<128&&v(t,f(n));var y=t.length,h=y;for(y&&v(t,"-");h<i;){var _=o;for(r=0;r<e.length;r++)(n=e[r])>=a&&n<_&&(_=n);var w=h+1;if(_-a>u((o-l)/w))throw new s(c);for(l+=(_-a)*w,a=_,r=0;r<e.length;r++){if((n=e[r])<a&&++l>o)throw new s(c);if(n===a){for(var k=l,S=36;;){var E=S<=m?1:S>=m+26?26:S-m;if(k<E)break;var j=k-E,O=36-E;v(t,f(b(E+j%O))),k=u(j/O),S+=36}v(t,f(b(k))),m=g(l,w,h===y),l=0,h++}}l++,a++}return d(t,"")};e.exports=function(e){var t,r,n=[],o=y(m(h(e),a,"."),".");for(t=0;t<o.length;t++)r=o[t],v(n,l(i,r)?"xn--"+_(r):r);return d(n,".")}},4544:(e,t,r)=>{"use strict";var n=r(4762),o=r(3312),i=r(6261),a=r(5870),c=n("".replace),s=RegExp("^["+a+"]+"),l=RegExp("(^|[^"+a+"])["+a+"]+$"),u=function(e){return function(t){var r=i(o(t));return 1&e&&(r=c(r,s,"")),2&e&&(r=c(r,l,"$1")),r}};e.exports={start:u(1),end:u(2),trim:u(3)}},6029:(e,t,r)=>{"use strict";var n=r(6170),o=r(8473),i=r(8389).String;e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol("symbol detection");return!i(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},8192:(e,t,r)=>{"use strict";var n=r(1807),o=r(1409),i=r(1),a=r(7914);e.exports=function(){var e=o("Symbol"),t=e&&e.prototype,r=t&&t.valueOf,c=i("toPrimitive");t&&!t[c]&&a(t,c,(function(e){return n(r,this)}),{arity:1})}},3218:(e,t,r)=>{"use strict";var n=r(6029);e.exports=n&&!!Symbol.for&&!!Symbol.keyFor},7007:(e,t,r)=>{"use strict";var n,o,i,a,c=r(8389),s=r(3067),l=r(2914),u=r(1483),f=r(5755),p=r(8473),d=r(2811),v=r(1698),m=r(3145),y=r(4066),h=r(8417),b=r(4334),g=c.setImmediate,_=c.clearImmediate,w=c.process,k=c.Dispatch,S=c.Function,E=c.MessageChannel,j=c.String,O=0,x={},P="onreadystatechange";p((function(){n=c.location}));var A=function(e){if(f(x,e)){var t=x[e];delete x[e],t()}},C=function(e){return function(){A(e)}},z=function(e){A(e.data)},N=function(e){c.postMessage(j(e),n.protocol+"//"+n.host)};g&&_||(g=function(e){y(arguments.length,1);var t=u(e)?e:S(e),r=v(arguments,1);return x[++O]=function(){s(t,void 0,r)},o(O),O},_=function(e){delete x[e]},b?o=function(e){w.nextTick(C(e))}:k&&k.now?o=function(e){k.now(C(e))}:E&&!h?(a=(i=new E).port2,i.port1.onmessage=z,o=l(a.postMessage,a)):c.addEventListener&&u(c.postMessage)&&!c.importScripts&&n&&"file:"!==n.protocol&&!p(N)?(o=N,c.addEventListener("message",z,!1)):o=P in m("script")?function(e){d.appendChild(m("script"))[P]=function(){d.removeChild(this),A(e)}}:function(e){setTimeout(C(e),0)}),e.exports={set:g,clear:_}},2430:(e,t,r)=>{"use strict";var n=r(4762);e.exports=n(1..valueOf)},3392:(e,t,r)=>{"use strict";var n=r(3005),o=Math.max,i=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):i(r,t)}},5599:(e,t,r)=>{"use strict";var n=r(2121),o=r(3312);e.exports=function(e){return n(o(e))}},3005:(e,t,r)=>{"use strict";var n=r(1703);e.exports=function(e){var t=+e;return t!=t||0===t?0:n(t)}},8324:(e,t,r)=>{"use strict";var n=r(3005),o=Math.min;e.exports=function(e){var t=n(e);return t>0?o(t,9007199254740991):0}},2347:(e,t,r)=>{"use strict";var n=r(3312),o=Object;e.exports=function(e){return o(n(e))}},2355:(e,t,r)=>{"use strict";var n=r(1807),o=r(1704),i=r(1423),a=r(2564),c=r(348),s=r(1),l=TypeError,u=s("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var r,s=a(e,u);if(s){if(void 0===t&&(t="default"),r=n(s,e,t),!o(r)||i(r))return r;throw new l("Can't convert object to primitive value")}return void 0===t&&(t="number"),c(e,t)}},3815:(e,t,r)=>{"use strict";var n=r(2355),o=r(1423);e.exports=function(e){var t=n(e,"string");return o(t)?t:t+""}},4338:(e,t,r)=>{"use strict";var n={};n[r(1)("toStringTag")]="z",e.exports="[object z]"===String(n)},6261:(e,t,r)=>{"use strict";var n=r(6145),o=String;e.exports=function(e){if("Symbol"===n(e))throw new TypeError("Cannot convert a Symbol value to a string");return o(e)}},8761:e=>{"use strict";var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},1866:(e,t,r)=>{"use strict";var n=r(4762),o=0,i=Math.random(),a=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},4250:(e,t,r)=>{"use strict";var n=r(8473),o=r(1),i=r(382),a=r(9557),c=o("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r=new URLSearchParams("a=1&a=2&b=3"),n="";return e.pathname="c%20d",t.forEach((function(e,r){t.delete("b"),n+=r+e})),r.delete("a",2),r.delete("b",void 0),a&&(!e.toJSON||!r.has("a",1)||r.has("a",2)||!r.has("a",void 0)||r.has("b"))||!t.size&&(a||!i)||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[c]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},5022:(e,t,r)=>{"use strict";var n=r(6029);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3896:(e,t,r)=>{"use strict";var n=r(382),o=r(8473);e.exports=n&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4066:e=>{"use strict";var t=TypeError;e.exports=function(e,r){if(e<r)throw new t("Not enough arguments");return e}},4644:(e,t,r)=>{"use strict";var n=r(8389),o=r(1483),i=n.WeakMap;e.exports=o(i)&&/native code/.test(String(i))},7849:(e,t,r)=>{"use strict";var n=r(6589),o=r(5755),i=r(5373),a=r(5835).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},5373:(e,t,r)=>{"use strict";var n=r(1);t.f=n},1:(e,t,r)=>{"use strict";var n=r(8389),o=r(7255),i=r(5755),a=r(1866),c=r(6029),s=r(5022),l=n.Symbol,u=o("wks"),f=s?l.for||l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(u[e]=c&&i(l,e)?l[e]:f("Symbol."+e)),u[e]}},5870:e=>{"use strict";e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},4776:(e,t,r)=>{"use strict";var n=r(8612),o=r(8473),i=r(4914),a=r(1704),c=r(2347),s=r(6960),l=r(1091),u=r(670),f=r(4551),p=r(4595),d=r(1),v=r(6170),m=d("isConcatSpreadable"),y=v>=51||!o((function(){var e=[];return e[m]=!1,e.concat()[0]!==e})),h=function(e){if(!a(e))return!1;var t=e[m];return void 0!==t?!!t:i(e)};n({target:"Array",proto:!0,arity:1,forced:!y||!p("concat")},{concat:function(e){var t,r,n,o,i,a=c(this),p=f(a,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(h(i=-1===t?a:arguments[t]))for(o=s(i),l(d+o),r=0;r<o;r++,d++)r in i&&u(p,d,i[r]);else l(d+1),u(p,d++,i);return p.length=d,p}})},4382:(e,t,r)=>{"use strict";var n=r(8612),o=r(2867).filter;n({target:"Array",proto:!0,forced:!r(4595)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},2084:(e,t,r)=>{"use strict";var n=r(8612),o=r(2867).find,i=r(7095),a="find",c=!0;a in[]&&Array(1)[a]((function(){c=!1})),n({target:"Array",proto:!0,forced:c},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},9892:(e,t,r)=>{"use strict";var n=r(8612),o=r(6142);n({target:"Array",stat:!0,forced:!r(1554)((function(e){Array.from(e)}))},{from:o})},6281:(e,t,r)=>{"use strict";var n=r(8612),o=r(6651).includes,i=r(8473),a=r(7095);n({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},4962:(e,t,r)=>{"use strict";var n=r(5599),o=r(7095),i=r(6775),a=r(4483),c=r(5835).f,s=r(5662),l=r(5247),u=r(9557),f=r(382),p="Array Iterator",d=a.set,v=a.getterFor(p);e.exports=s(Array,"Array",(function(e,t){d(this,{type:p,target:n(e),index:0,kind:t})}),(function(){var e=v(this),t=e.target,r=e.index++;if(!t||r>=t.length)return e.target=void 0,l(void 0,!0);switch(e.kind){case"keys":return l(r,!1);case"values":return l(t[r],!1)}return l([r,t[r]],!1)}),"values");var m=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!u&&f&&"values"!==m.name)try{c(m,"name",{value:"values"})}catch(e){}},6216:(e,t,r)=>{"use strict";var n=r(8612),o=r(4762),i=r(2121),a=r(5599),c=r(3152),s=o([].join);n({target:"Array",proto:!0,forced:i!==Object||!c("join",",")},{join:function(e){return s(a(this),void 0===e?",":e)}})},6584:(e,t,r)=>{"use strict";var n=r(8612),o=r(2867).map;n({target:"Array",proto:!0,forced:!r(4595)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},9336:(e,t,r)=>{"use strict";var n=r(8612),o=r(4914),i=r(943),a=r(1704),c=r(3392),s=r(6960),l=r(5599),u=r(670),f=r(1),p=r(4595),d=r(1698),v=p("slice"),m=f("species"),y=Array,h=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(e,t){var r,n,f,p=l(this),v=s(p),b=c(e,v),g=c(void 0===t?v:t,v);if(o(p)&&(r=p.constructor,(i(r)&&(r===y||o(r.prototype))||a(r)&&null===(r=r[m]))&&(r=void 0),r===y||void 0===r))return d(p,b,g);for(n=new(void 0===r?y:r)(h(g-b,0)),f=0;b<g;b++,f++)b in p&&u(n,f,p[b]);return n.length=f,n}})},6448:(e,t,r)=>{"use strict";var n=r(8612),o=r(4762),i=r(8120),a=r(2347),c=r(6960),s=r(6060),l=r(6261),u=r(8473),f=r(7354),p=r(3152),d=r(7332),v=r(8996),m=r(6170),y=r(5158),h=[],b=o(h.sort),g=o(h.push),_=u((function(){h.sort(void 0)})),w=u((function(){h.sort(null)})),k=p("sort"),S=!u((function(){if(m)return m<70;if(!(d&&d>3)){if(v)return!0;if(y)return y<603;var e,t,r,n,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:r=3;break;case 68:case 71:r=4;break;default:r=2}for(n=0;n<47;n++)h.push({k:t+n,v:r})}for(h.sort((function(e,t){return t.v-e.v})),n=0;n<h.length;n++)t=h[n].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));n({target:"Array",proto:!0,forced:_||!w||!k||!S},{sort:function(e){void 0!==e&&i(e);var t=a(this);if(S)return void 0===e?b(t):b(t,e);var r,n,o=[],u=c(t);for(n=0;n<u;n++)n in t&&g(o,t[n]);for(f(o,function(e){return function(t,r){return void 0===r?-1:void 0===t?1:void 0!==e?+e(t,r)||0:l(t)>l(r)?1:-1}}(e)),r=c(o),n=0;n<r;)t[n]=o[n++];for(;n<u;)s(t,n++);return t}})},4754:(e,t,r)=>{"use strict";var n=r(5755),o=r(7914),i=r(6446),a=r(1)("toPrimitive"),c=Date.prototype;n(c,a)||o(c,a,i)},1908:(e,t,r)=>{"use strict";var n=r(382),o=r(2048).EXISTS,i=r(4762),a=r(3864),c=Function.prototype,s=i(c.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(l.exec);n&&!o&&a(c,"name",{configurable:!0,get:function(){try{return u(l,s(this))[1]}catch(e){return""}}})},6184:(e,t,r)=>{"use strict";var n=r(8612),o=r(1409),i=r(3067),a=r(1807),c=r(4762),s=r(8473),l=r(1483),u=r(1423),f=r(1698),p=r(5215),d=r(6029),v=String,m=o("JSON","stringify"),y=c(/./.exec),h=c("".charAt),b=c("".charCodeAt),g=c("".replace),_=c(1..toString),w=/[\uD800-\uDFFF]/g,k=/^[\uD800-\uDBFF]$/,S=/^[\uDC00-\uDFFF]$/,E=!d||s((function(){var e=o("Symbol")("stringify detection");return"[null]"!==m([e])||"{}"!==m({a:e})||"{}"!==m(Object(e))})),j=s((function(){return'"\\udf06\\ud834"'!==m("\udf06\ud834")||'"\\udead"'!==m("\udead")})),O=function(e,t){var r=f(arguments),n=p(t);if(l(n)||void 0!==e&&!u(e))return r[1]=function(e,t){if(l(n)&&(t=a(n,this,v(e),t)),!u(t))return t},i(m,null,r)},x=function(e,t,r){var n=h(r,t-1),o=h(r,t+1);return y(k,e)&&!y(S,o)||y(S,e)&&!y(k,n)?"\\u"+_(b(e,0),16):e};m&&n({target:"JSON",stat:!0,arity:3,forced:E||j},{stringify:function(e,t,r){var n=f(arguments),o=i(E?O:m,null,n);return j&&"string"==typeof o?g(o,w,x):o}})},2725:(e,t,r)=>{"use strict";r(7446)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(4092))},8551:(e,t,r)=>{"use strict";r(2725)},94:(e,t,r)=>{"use strict";var n=r(8612),o=r(9557),i=r(382),a=r(8389),c=r(6589),s=r(4762),l=r(8730),u=r(5755),f=r(2429),p=r(4815),d=r(1423),v=r(2355),m=r(8473),y=r(2278).f,h=r(4961).f,b=r(5835).f,g=r(2430),_=r(4544).trim,w="Number",k=a[w],S=c[w],E=k.prototype,j=a.TypeError,O=s("".slice),x=s("".charCodeAt),P=l(w,!k(" 0o1")||!k("0b1")||k("+0x1")),A=function(e){var t,r=arguments.length<1?0:k(function(e){var t=v(e,"number");return"bigint"==typeof t?t:function(e){var t,r,n,o,i,a,c,s,l=v(e,"number");if(d(l))throw new j("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=_(l),43===(t=x(l,0))||45===t){if(88===(r=x(l,2))||120===r)return NaN}else if(48===t){switch(x(l,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+l}for(a=(i=O(l,2)).length,c=0;c<a;c++)if((s=x(i,c))<48||s>o)return NaN;return parseInt(i,n)}return+l}(t)}(e));return p(E,t=this)&&m((function(){g(t)}))?f(Object(r),this,A):r};A.prototype=E,P&&!o&&(E.constructor=A),n({global:!0,constructor:!0,wrap:!0,forced:P},{Number:A});var C=function(e,t){for(var r,n=i?y(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;n.length>o;o++)u(t,r=n[o])&&!u(e,r)&&b(e,r,h(t,r))};o&&S&&C(c[w],S),(P||o)&&C(c[w],k)},7575:(e,t,r)=>{"use strict";var n=r(8612),o=r(1439);n({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},7132:(e,t,r)=>{"use strict";var n=r(8612),o=r(5627).entries;n({target:"Object",stat:!0},{entries:function(e){return o(e)}})},6457:(e,t,r)=>{"use strict";var n=r(8612),o=r(8473),i=r(5599),a=r(4961).f,c=r(382);n({target:"Object",stat:!0,forced:!c||o((function(){a(1)})),sham:!c},{getOwnPropertyDescriptor:function(e,t){return a(i(e),t)}})},8908:(e,t,r)=>{"use strict";var n=r(8612),o=r(382),i=r(9497),a=r(5599),c=r(4961),s=r(670);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,r,n=a(e),o=c.f,l=i(n),u={},f=0;l.length>f;)void 0!==(r=o(n,t=l[f++]))&&s(u,t,r);return u}})},7859:(e,t,r)=>{"use strict";var n=r(8612),o=r(6029),i=r(8473),a=r(4347),c=r(2347);n({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(e){var t=a.f;return t?t(c(e)):[]}})},6437:(e,t,r)=>{"use strict";var n=r(8612),o=r(8473),i=r(2347),a=r(3181),c=r(9441);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!c},{getPrototypeOf:function(e){return a(i(e))}})},3810:(e,t,r)=>{"use strict";var n=r(8612),o=r(2347),i=r(3658);n({target:"Object",stat:!0,forced:r(8473)((function(){i(1)}))},{keys:function(e){return i(o(e))}})},2697:(e,t,r)=>{"use strict";r(8612)({target:"Object",stat:!0},{setPrototypeOf:r(1953)})},8557:(e,t,r)=>{"use strict";var n=r(4338),o=r(7914),i=r(5685);n||o(Object.prototype,"toString",i,{unsafe:!0})},6249:(e,t,r)=>{"use strict";var n=r(8612),o=r(1807),i=r(8120),a=r(1173),c=r(4193),s=r(1506);n({target:"Promise",stat:!0,forced:r(1407)},{all:function(e){var t=this,r=a.f(t),n=r.resolve,l=r.reject,u=c((function(){var r=i(t.resolve),a=[],c=0,u=1;s(e,(function(e){var i=c++,s=!1;u++,o(r,t,e).then((function(e){s||(s=!0,a[i]=e,--u||n(a))}),l)})),--u||n(a)}));return u.error&&l(u.value),r.promise}})},6681:(e,t,r)=>{"use strict";var n=r(8612),o=r(9557),i=r(5502).CONSTRUCTOR,a=r(2832),c=r(1409),s=r(1483),l=r(7914),u=a&&a.prototype;if(n({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&s(a)){var f=c("Promise").prototype.catch;u.catch!==f&&l(u,"catch",f,{unsafe:!0})}},8786:(e,t,r)=>{"use strict";var n,o,i,a=r(8612),c=r(9557),s=r(4334),l=r(8389),u=r(1807),f=r(7914),p=r(1953),d=r(2277),v=r(240),m=r(8120),y=r(1483),h=r(1704),b=r(6021),g=r(483),_=r(7007).set,w=r(553),k=r(1339),S=r(4193),E=r(5459),j=r(4483),O=r(2832),x=r(5502),P=r(1173),A="Promise",C=x.CONSTRUCTOR,z=x.REJECTION_EVENT,N=x.SUBCLASSING,T=j.getterFor(A),I=j.set,R=O&&O.prototype,D=O,M=R,U=l.TypeError,q=l.document,L=l.process,B=P.f,F=B,H=!!(q&&q.createEvent&&l.dispatchEvent),V="unhandledrejection",K=function(e){var t;return!(!h(e)||!y(t=e.then))&&t},W=function(e,t){var r,n,o,i=t.value,a=1===t.state,c=a?e.ok:e.fail,s=e.resolve,l=e.reject,f=e.domain;try{c?(a||(2===t.rejection&&Y(t),t.rejection=1),!0===c?r=i:(f&&f.enter(),r=c(i),f&&(f.exit(),o=!0)),r===e.promise?l(new U("Promise-chain cycle")):(n=K(r))?u(n,r,s,l):s(r)):l(i)}catch(e){f&&!o&&f.exit(),l(e)}},$=function(e,t){e.notified||(e.notified=!0,w((function(){for(var r,n=e.reactions;r=n.get();)W(r,e);e.notified=!1,t&&!e.rejection&&Z(e)})))},G=function(e,t,r){var n,o;H?((n=q.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),l.dispatchEvent(n)):n={promise:t,reason:r},!z&&(o=l["on"+e])?o(n):e===V&&k("Unhandled promise rejection",r)},Z=function(e){u(_,l,(function(){var t,r=e.facade,n=e.value;if(J(e)&&(t=S((function(){s?L.emit("unhandledRejection",n,r):G(V,r,n)})),e.rejection=s||J(e)?2:1,t.error))throw t.value}))},J=function(e){return 1!==e.rejection&&!e.parent},Y=function(e){u(_,l,(function(){var t=e.facade;s?L.emit("rejectionHandled",t):G("rejectionhandled",t,e.value)}))},Q=function(e,t,r){return function(n){e(t,n,r)}},X=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,$(e,!0))},ee=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw new U("Promise can't be resolved itself");var n=K(t);n?w((function(){var r={done:!1};try{u(n,t,Q(ee,r,e),Q(X,r,e))}catch(t){X(r,t,e)}})):(e.value=t,e.state=1,$(e,!1))}catch(t){X({done:!1},t,e)}}};if(C&&(M=(D=function(e){b(this,M),m(e),u(n,this);var t=T(this);try{e(Q(ee,t),Q(X,t))}catch(e){X(t,e)}}).prototype,(n=function(e){I(this,{type:A,done:!1,notified:!1,parent:!1,reactions:new E,rejection:!1,state:0,value:void 0})}).prototype=f(M,"then",(function(e,t){var r=T(this),n=B(g(this,D));return r.parent=!0,n.ok=!y(e)||e,n.fail=y(t)&&t,n.domain=s?L.domain:void 0,0===r.state?r.reactions.add(n):w((function(){W(n,r)})),n.promise})),o=function(){var e=new n,t=T(e);this.promise=e,this.resolve=Q(ee,t),this.reject=Q(X,t)},P.f=B=function(e){return e===D||void 0===e?new o(e):F(e)},!c&&y(O)&&R!==Object.prototype)){i=R.then,N||f(R,"then",(function(e,t){var r=this;return new D((function(e,t){u(i,r,e,t)})).then(e,t)}),{unsafe:!0});try{delete R.constructor}catch(e){}p&&p(R,M)}a({global:!0,constructor:!0,wrap:!0,forced:C},{Promise:D}),d(D,A,!1,!0),v(A)},76:(e,t,r)=>{"use strict";r(8786),r(6249),r(6681),r(1681),r(9231),r(5774)},1681:(e,t,r)=>{"use strict";var n=r(8612),o=r(1807),i=r(8120),a=r(1173),c=r(4193),s=r(1506);n({target:"Promise",stat:!0,forced:r(1407)},{race:function(e){var t=this,r=a.f(t),n=r.reject,l=c((function(){var a=i(t.resolve);s(e,(function(e){o(a,t,e).then(r.resolve,n)}))}));return l.error&&n(l.value),r.promise}})},9231:(e,t,r)=>{"use strict";var n=r(8612),o=r(1173);n({target:"Promise",stat:!0,forced:r(5502).CONSTRUCTOR},{reject:function(e){var t=o.f(this);return(0,t.reject)(e),t.promise}})},5774:(e,t,r)=>{"use strict";var n=r(8612),o=r(1409),i=r(9557),a=r(2832),c=r(5502).CONSTRUCTOR,s=r(2172),l=o("Promise"),u=i&&!c;n({target:"Promise",stat:!0,forced:i||c},{resolve:function(e){return s(u&&this===l?a:this,e)}})},1359:(e,t,r)=>{"use strict";var n=r(8612),o=r(1409),i=r(3067),a=r(2164),c=r(2374),s=r(2293),l=r(1704),u=r(5290),f=r(8473),p=o("Reflect","construct"),d=Object.prototype,v=[].push,m=f((function(){function e(){}return!(p((function(){}),[],e)instanceof e)})),y=!f((function(){p((function(){}))})),h=m||y;n({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){c(e),s(t);var r=arguments.length<3?e:c(arguments[2]);if(y&&!m)return p(e,t,r);if(e===r){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var n=[null];return i(v,n,t),new(i(a,e,n))}var o=r.prototype,f=u(l(o)?o:d),h=i(e,f,t);return l(h)?h:f}})},646:(e,t,r)=>{"use strict";var n=r(382),o=r(8389),i=r(4762),a=r(8730),c=r(2429),s=r(9037),l=r(5290),u=r(2278).f,f=r(4815),p=r(4786),d=r(6261),v=r(9736),m=r(7435),y=r(7150),h=r(7914),b=r(8473),g=r(5755),_=r(4483).enforce,w=r(240),k=r(1),S=r(3933),E=r(4528),j=k("match"),O=o.RegExp,x=O.prototype,P=o.SyntaxError,A=i(x.exec),C=i("".charAt),z=i("".replace),N=i("".indexOf),T=i("".slice),I=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,R=/a/g,D=/a/g,M=new O(R)!==R,U=m.MISSED_STICKY,q=m.UNSUPPORTED_Y;if(a("RegExp",n&&(!M||U||S||E||b((function(){return D[j]=!1,O(R)!==R||O(D)===D||"/a/i"!==String(O(R,"i"))}))))){for(var L=function(e,t){var r,n,o,i,a,u,m=f(x,this),y=p(e),h=void 0===t,b=[],w=e;if(!m&&y&&h&&e.constructor===L)return e;if((y||f(x,e))&&(e=e.source,h&&(t=v(w))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),w=e,S&&"dotAll"in R&&(n=!!t&&N(t,"s")>-1)&&(t=z(t,/s/g,"")),r=t,U&&"sticky"in R&&(o=!!t&&N(t,"y")>-1)&&q&&(t=z(t,/y/g,"")),E&&(i=function(e){for(var t,r=e.length,n=0,o="",i=[],a=l(null),c=!1,s=!1,u=0,f="";n<=r;n++){if("\\"===(t=C(e,n)))t+=C(e,++n);else if("]"===t)c=!1;else if(!c)switch(!0){case"["===t:c=!0;break;case"("===t:A(I,T(e,n+1))&&(n+=2,s=!0),o+=t,u++;continue;case">"===t&&s:if(""===f||g(a,f))throw new P("Invalid capture group name");a[f]=!0,i[i.length]=[f,u],s=!1,f="";continue}s?f+=t:o+=t}return[o,i]}(e),e=i[0],b=i[1]),a=c(O(e,t),m?this:x,L),(n||o||b.length)&&(u=_(a),n&&(u.dotAll=!0,u.raw=L(function(e){for(var t,r=e.length,n=0,o="",i=!1;n<=r;n++)"\\"!==(t=C(e,n))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+C(e,++n);return o}(e),r)),o&&(u.sticky=!0),b.length&&(u.groups=b)),e!==w)try{s(a,"source",""===w?"(?:)":w)}catch(e){}return a},B=u(O),F=0;B.length>F;)y(L,O,B[F++]);x.constructor=L,L.prototype=x,h(o,"RegExp",L,{constructor:!0})}w("RegExp")},5021:(e,t,r)=>{"use strict";var n=r(8612),o=r(8865);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},3687:(e,t,r)=>{"use strict";var n=r(2048).PROPER,o=r(7914),i=r(2293),a=r(6261),c=r(8473),s=r(9736),l="toString",u=RegExp.prototype,f=u[l],p=c((function(){return"/a/b"!==f.call({source:"a",flags:"b"})})),d=n&&f.name!==l;(p||d)&&o(u,l,(function(){var e=i(this);return"/"+a(e.source)+"/"+a(s(e))}),{unsafe:!0})},9203:(e,t,r)=>{"use strict";r(7446)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),r(4092))},2745:(e,t,r)=>{"use strict";r(9203)},987:(e,t,r)=>{"use strict";var n,o=r(8612),i=r(3786),a=r(4961).f,c=r(8324),s=r(6261),l=r(4989),u=r(3312),f=r(4522),p=r(9557),d=i("".slice),v=Math.min,m=f("endsWith");o({target:"String",proto:!0,forced:!(!p&&!m&&(n=a(String.prototype,"endsWith"),n&&!n.writable)||m)},{endsWith:function(e){var t=s(u(this));l(e);var r=arguments.length>1?arguments[1]:void 0,n=t.length,o=void 0===r?n:v(c(r),n),i=s(e);return d(t,o-i.length,o)===i}})},9425:(e,t,r)=>{"use strict";var n=r(8612),o=r(4762),i=r(4989),a=r(3312),c=r(6261),s=r(4522),l=o("".indexOf);n({target:"String",proto:!0,forced:!s("includes")},{includes:function(e){return!!~l(c(a(this)),c(i(e)),arguments.length>1?arguments[1]:void 0)}})},3994:(e,t,r)=>{"use strict";var n=r(9105).charAt,o=r(6261),i=r(4483),a=r(5662),c=r(5247),s="String Iterator",l=i.set,u=i.getterFor(s);a(String,"String",(function(e){l(this,{type:s,string:o(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?c(void 0,!0):(e=n(r,o),t.index+=e.length,c(e,!1))}))},3819:(e,t,r)=>{"use strict";var n=r(1807),o=r(3358),i=r(2293),a=r(5983),c=r(8324),s=r(6261),l=r(3312),u=r(2564),f=r(4419),p=r(2428);o("match",(function(e,t,r){return[function(t){var r=l(this),o=a(t)?void 0:u(t,e);return o?n(o,t,r):new RegExp(t)[e](s(r))},function(e){var n=i(this),o=s(e),a=r(t,n,o);if(a.done)return a.value;if(!n.global)return p(n,o);var l=n.unicode;n.lastIndex=0;for(var u,d=[],v=0;null!==(u=p(n,o));){var m=s(u[0]);d[v]=m,""===m&&(n.lastIndex=f(o,c(n.lastIndex),l)),v++}return 0===v?null:d}]}))},3062:(e,t,r)=>{"use strict";var n=r(3067),o=r(1807),i=r(4762),a=r(3358),c=r(8473),s=r(2293),l=r(1483),u=r(5983),f=r(3005),p=r(8324),d=r(6261),v=r(3312),m=r(4419),y=r(2564),h=r(708),b=r(2428),g=r(1)("replace"),_=Math.max,w=Math.min,k=i([].concat),S=i([].push),E=i("".indexOf),j=i("".slice),O="$0"==="a".replace(/./,"$0"),x=!!/./[g]&&""===/./[g]("a","$0");a("replace",(function(e,t,r){var i=x?"$":"$0";return[function(e,r){var n=v(this),i=u(e)?void 0:y(e,g);return i?o(i,e,n,r):o(t,d(n),e,r)},function(e,o){var a=s(this),c=d(e);if("string"==typeof o&&-1===E(o,i)&&-1===E(o,"$<")){var u=r(t,a,c,o);if(u.done)return u.value}var v=l(o);v||(o=d(o));var y,g=a.global;g&&(y=a.unicode,a.lastIndex=0);for(var O,x=[];null!==(O=b(a,c))&&(S(x,O),g);)""===d(O[0])&&(a.lastIndex=m(c,p(a.lastIndex),y));for(var P,A="",C=0,z=0;z<x.length;z++){for(var N,T=d((O=x[z])[0]),I=_(w(f(O.index),c.length),0),R=[],D=1;D<O.length;D++)S(R,void 0===(P=O[D])?P:String(P));var M=O.groups;if(v){var U=k([T],R,I,c);void 0!==M&&S(U,M),N=d(n(o,void 0,U))}else N=h(T,c,I,R,M,o);I>=C&&(A+=j(c,C,I)+N,C=I+T.length)}return A+j(c,C)}]}),!!c((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!O||x)},7456:(e,t,r)=>{"use strict";var n=r(1807),o=r(3358),i=r(2293),a=r(5983),c=r(3312),s=r(5420),l=r(6261),u=r(2564),f=r(2428);o("search",(function(e,t,r){return[function(t){var r=c(this),o=a(t)?void 0:u(t,e);return o?n(o,t,r):new RegExp(t)[e](l(r))},function(e){var n=i(this),o=l(e),a=r(t,n,o);if(a.done)return a.value;var c=n.lastIndex;s(c,0)||(n.lastIndex=0);var u=f(n,o);return s(n.lastIndex,c)||(n.lastIndex=c),null===u?-1:u.index}]}))},4062:(e,t,r)=>{"use strict";var n,o=r(8612),i=r(3786),a=r(4961).f,c=r(8324),s=r(6261),l=r(4989),u=r(3312),f=r(4522),p=r(9557),d=i("".slice),v=Math.min,m=f("startsWith");o({target:"String",proto:!0,forced:!(!p&&!m&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||m)},{startsWith:function(e){var t=s(u(this));l(e);var r=c(v(arguments.length>1?arguments[1]:void 0,t.length)),n=s(e);return d(t,r,r+n.length)===n}})},5443:(e,t,r)=>{"use strict";var n=r(8612),o=r(8389),i=r(1807),a=r(4762),c=r(9557),s=r(382),l=r(6029),u=r(8473),f=r(5755),p=r(4815),d=r(2293),v=r(5599),m=r(3815),y=r(6261),h=r(7738),b=r(5290),g=r(3658),_=r(2278),w=r(2020),k=r(4347),S=r(4961),E=r(5835),j=r(5799),O=r(7611),x=r(7914),P=r(3864),A=r(7255),C=r(5409),z=r(1507),N=r(1866),T=r(1),I=r(5373),R=r(7849),D=r(8192),M=r(2277),U=r(4483),q=r(2867).forEach,L=C("hidden"),B="Symbol",F="prototype",H=U.set,V=U.getterFor(B),K=Object[F],W=o.Symbol,$=W&&W[F],G=o.RangeError,Z=o.TypeError,J=o.QObject,Y=S.f,Q=E.f,X=w.f,ee=O.f,te=a([].push),re=A("symbols"),ne=A("op-symbols"),oe=A("wks"),ie=!J||!J[F]||!J[F].findChild,ae=function(e,t,r){var n=Y(K,t);n&&delete K[t],Q(e,t,r),n&&e!==K&&Q(K,t,n)},ce=s&&u((function(){return 7!==b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?ae:Q,se=function(e,t){var r=re[e]=b($);return H(r,{type:B,tag:e,description:t}),s||(r.description=t),r},le=function(e,t,r){e===K&&le(ne,t,r),d(e);var n=m(t);return d(r),f(re,n)?(r.enumerable?(f(e,L)&&e[L][n]&&(e[L][n]=!1),r=b(r,{enumerable:h(0,!1)})):(f(e,L)||Q(e,L,h(1,b(null))),e[L][n]=!0),ce(e,n,r)):Q(e,n,r)},ue=function(e,t){d(e);var r=v(t),n=g(r).concat(ve(r));return q(n,(function(t){s&&!i(fe,r,t)||le(e,t,r[t])})),e},fe=function(e){var t=m(e),r=i(ee,this,t);return!(this===K&&f(re,t)&&!f(ne,t))&&(!(r||!f(this,t)||!f(re,t)||f(this,L)&&this[L][t])||r)},pe=function(e,t){var r=v(e),n=m(t);if(r!==K||!f(re,n)||f(ne,n)){var o=Y(r,n);return!o||!f(re,n)||f(r,L)&&r[L][n]||(o.enumerable=!0),o}},de=function(e){var t=X(v(e)),r=[];return q(t,(function(e){f(re,e)||f(z,e)||te(r,e)})),r},ve=function(e){var t=e===K,r=X(t?ne:v(e)),n=[];return q(r,(function(e){!f(re,e)||t&&!f(K,e)||te(n,re[e])})),n};l||(x($=(W=function(){if(p($,this))throw new Z("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?y(arguments[0]):void 0,t=N(e),r=function(e){var n=void 0===this?o:this;n===K&&i(r,ne,e),f(n,L)&&f(n[L],t)&&(n[L][t]=!1);var a=h(1,e);try{ce(n,t,a)}catch(e){if(!(e instanceof G))throw e;ae(n,t,a)}};return s&&ie&&ce(K,t,{configurable:!0,set:r}),se(t,e)})[F],"toString",(function(){return V(this).tag})),x(W,"withoutSetter",(function(e){return se(N(e),e)})),O.f=fe,E.f=le,j.f=ue,S.f=pe,_.f=w.f=de,k.f=ve,I.f=function(e){return se(T(e),e)},s&&(P($,"description",{configurable:!0,get:function(){return V(this).description}}),c||x(K,"propertyIsEnumerable",fe,{unsafe:!0}))),n({global:!0,constructor:!0,wrap:!0,forced:!l,sham:!l},{Symbol:W}),q(g(oe),(function(e){R(e)})),n({target:B,stat:!0,forced:!l},{useSetter:function(){ie=!0},useSimple:function(){ie=!1}}),n({target:"Object",stat:!0,forced:!l,sham:!s},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:pe}),n({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:de}),D(),M(W,B),z[L]=!0},2733:(e,t,r)=>{"use strict";var n=r(8612),o=r(382),i=r(8389),a=r(4762),c=r(5755),s=r(1483),l=r(4815),u=r(6261),f=r(3864),p=r(6726),d=i.Symbol,v=d&&d.prototype;if(o&&s(d)&&(!("description"in v)||void 0!==d().description)){var m={},y=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),t=l(v,this)?new d(e):void 0===e?d():d(e);return""===e&&(m[t]=!0),t};p(y,d),y.prototype=v,v.constructor=y;var h="Symbol(description detection)"===String(d("description detection")),b=a(v.valueOf),g=a(v.toString),_=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),k=a("".slice);f(v,"description",{configurable:!0,get:function(){var e=b(this);if(c(m,e))return"";var t=g(e),r=h?k(t,7,-1):w(t,_,"$1");return""===r?void 0:r}}),n({global:!0,constructor:!0,forced:!0},{Symbol:y})}},2484:(e,t,r)=>{"use strict";var n=r(8612),o=r(1409),i=r(5755),a=r(6261),c=r(7255),s=r(3218),l=c("string-to-symbol-registry"),u=c("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!s},{for:function(e){var t=a(e);if(i(l,t))return l[t];var r=o("Symbol")(t);return l[t]=r,u[r]=t,r}})},4701:(e,t,r)=>{"use strict";r(7849)("iterator")},9305:(e,t,r)=>{"use strict";r(5443),r(2484),r(1894),r(6184),r(7859)},1894:(e,t,r)=>{"use strict";var n=r(8612),o=r(5755),i=r(1423),a=r(8761),c=r(7255),s=r(3218),l=c("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!s},{keyFor:function(e){if(!i(e))throw new TypeError(a(e)+" is not a symbol");if(o(l,e))return l[e]}})},1678:(e,t,r)=>{"use strict";var n=r(7849),o=r(8192);n("toPrimitive"),o()},3630:(e,t,r)=>{"use strict";var n=r(8389),o=r(4842),i=r(1902),a=r(4793),c=r(9037),s=function(e){if(e&&e.forEach!==a)try{c(e,"forEach",a)}catch(t){e.forEach=a}};for(var l in o)o[l]&&s(n[l]&&n[l].prototype);s(i)},2367:(e,t,r)=>{"use strict";var n=r(8389),o=r(4842),i=r(1902),a=r(4962),c=r(9037),s=r(2277),l=r(1)("iterator"),u=a.values,f=function(e,t){if(e){if(e[l]!==u)try{c(e,l,u)}catch(t){e[l]=u}if(s(e,t,!0),o[t])for(var r in a)if(e[r]!==a[r])try{c(e,r,a[r])}catch(t){e[r]=a[r]}}};for(var p in o)f(n[p]&&n[p].prototype,p);f(i,"DOMTokenList")},9833:(e,t,r)=>{"use strict";var n=r(8612),o=r(8389),i=r(9570)(o.setInterval,!0);n({global:!0,bind:!0,forced:o.setInterval!==i},{setInterval:i})},3989:(e,t,r)=>{"use strict";var n=r(8612),o=r(8389),i=r(9570)(o.setTimeout,!0);n({global:!0,bind:!0,forced:o.setTimeout!==i},{setTimeout:i})},7089:(e,t,r)=>{"use strict";r(9833),r(3989)},7192:(e,t,r)=>{"use strict";r(4962);var n=r(8612),o=r(8389),i=r(8123),a=r(1807),c=r(4762),s=r(382),l=r(4250),u=r(7914),f=r(3864),p=r(2313),d=r(2277),v=r(1040),m=r(4483),y=r(6021),h=r(1483),b=r(5755),g=r(2914),_=r(6145),w=r(2293),k=r(1704),S=r(6261),E=r(5290),j=r(7738),O=r(4887),x=r(6665),P=r(5247),A=r(4066),C=r(1),z=r(7354),N=C("iterator"),T="URLSearchParams",I=T+"Iterator",R=m.set,D=m.getterFor(T),M=m.getterFor(I),U=i("fetch"),q=i("Request"),L=i("Headers"),B=q&&q.prototype,F=L&&L.prototype,H=o.RegExp,V=o.TypeError,K=o.decodeURIComponent,W=o.encodeURIComponent,$=c("".charAt),G=c([].join),Z=c([].push),J=c("".replace),Y=c([].shift),Q=c([].splice),X=c("".split),ee=c("".slice),te=/\+/g,re=Array(4),ne=function(e){return re[e-1]||(re[e-1]=H("((?:%[\\da-f]{2}){"+e+"})","gi"))},oe=function(e){try{return K(e)}catch(t){return e}},ie=function(e){var t=J(e,te," "),r=4;try{return K(t)}catch(e){for(;r;)t=J(t,ne(r--),oe);return t}},ae=/[!'()~]|%20/g,ce={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},se=function(e){return ce[e]},le=function(e){return J(W(e),ae,se)},ue=v((function(e,t){R(this,{type:I,target:D(e).entries,index:0,kind:t})}),T,(function(){var e=M(this),t=e.target,r=e.index++;if(!t||r>=t.length)return e.target=void 0,P(void 0,!0);var n=t[r];switch(e.kind){case"keys":return P(n.key,!1);case"values":return P(n.value,!1)}return P([n.key,n.value],!1)}),!0),fe=function(e){this.entries=[],this.url=null,void 0!==e&&(k(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===$(e,0)?ee(e,1):e:S(e)))};fe.prototype={type:T,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,r,n,o,i,c,s,l=this.entries,u=x(e);if(u)for(r=(t=O(e,u)).next;!(n=a(r,t)).done;){if(i=(o=O(w(n.value))).next,(c=a(i,o)).done||(s=a(i,o)).done||!a(i,o).done)throw new V("Expected sequence with length 2");Z(l,{key:S(c.value),value:S(s.value)})}else for(var f in e)b(e,f)&&Z(l,{key:f,value:S(e[f])})},parseQuery:function(e){if(e)for(var t,r,n=this.entries,o=X(e,"&"),i=0;i<o.length;)(t=o[i++]).length&&(r=X(t,"="),Z(n,{key:ie(Y(r)),value:ie(G(r,"="))}))},serialize:function(){for(var e,t=this.entries,r=[],n=0;n<t.length;)e=t[n++],Z(r,le(e.key)+"="+le(e.value));return G(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var pe=function(){y(this,de);var e=R(this,new fe(arguments.length>0?arguments[0]:void 0));s||(this.size=e.entries.length)},de=pe.prototype;if(p(de,{append:function(e,t){var r=D(this);A(arguments.length,2),Z(r.entries,{key:S(e),value:S(t)}),s||this.length++,r.updateURL()},delete:function(e){for(var t=D(this),r=A(arguments.length,1),n=t.entries,o=S(e),i=r<2?void 0:arguments[1],a=void 0===i?i:S(i),c=0;c<n.length;){var l=n[c];if(l.key!==o||void 0!==a&&l.value!==a)c++;else if(Q(n,c,1),void 0!==a)break}s||(this.size=n.length),t.updateURL()},get:function(e){var t=D(this).entries;A(arguments.length,1);for(var r=S(e),n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){var t=D(this).entries;A(arguments.length,1);for(var r=S(e),n=[],o=0;o<t.length;o++)t[o].key===r&&Z(n,t[o].value);return n},has:function(e){for(var t=D(this).entries,r=A(arguments.length,1),n=S(e),o=r<2?void 0:arguments[1],i=void 0===o?o:S(o),a=0;a<t.length;){var c=t[a++];if(c.key===n&&(void 0===i||c.value===i))return!0}return!1},set:function(e,t){var r=D(this);A(arguments.length,1);for(var n,o=r.entries,i=!1,a=S(e),c=S(t),l=0;l<o.length;l++)(n=o[l]).key===a&&(i?Q(o,l--,1):(i=!0,n.value=c));i||Z(o,{key:a,value:c}),s||(this.size=o.length),r.updateURL()},sort:function(){var e=D(this);z(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,r=D(this).entries,n=g(e,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((t=r[o++]).value,t.key,this)},keys:function(){return new ue(this,"keys")},values:function(){return new ue(this,"values")},entries:function(){return new ue(this,"entries")}},{enumerable:!0}),u(de,N,de.entries,{name:"entries"}),u(de,"toString",(function(){return D(this).serialize()}),{enumerable:!0}),s&&f(de,"size",{get:function(){return D(this).entries.length},configurable:!0,enumerable:!0}),d(pe,T),n({global:!0,constructor:!0,forced:!l},{URLSearchParams:pe}),!l&&h(L)){var ve=c(F.has),me=c(F.set),ye=function(e){if(k(e)){var t,r=e.body;if(_(r)===T)return t=e.headers?new L(e.headers):new L,ve(t,"content-type")||me(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),E(e,{body:j(0,S(r)),headers:j(0,t)})}return e};if(h(U)&&n({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(e){return U(e,arguments.length>1?ye(arguments[1]):{})}}),h(q)){var he=function(e){return y(this,B),new q(e,arguments.length>1?ye(arguments[1]):{})};B.constructor=he,he.prototype=B,n({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:he})}}e.exports={URLSearchParams:pe,getState:D}},9102:(e,t,r)=>{"use strict";r(7192)},2332:(e,t,r)=>{"use strict";r(3994);var n,o=r(8612),i=r(382),a=r(4250),c=r(8389),s=r(2914),l=r(4762),u=r(7914),f=r(3864),p=r(6021),d=r(5755),v=r(1439),m=r(6142),y=r(1698),h=r(9105).codeAt,b=r(4939),g=r(6261),_=r(2277),w=r(4066),k=r(7192),S=r(4483),E=S.set,j=S.getterFor("URL"),O=k.URLSearchParams,x=k.getState,P=c.URL,A=c.TypeError,C=c.parseInt,z=Math.floor,N=Math.pow,T=l("".charAt),I=l(/./.exec),R=l([].join),D=l(1..toString),M=l([].pop),U=l([].push),q=l("".replace),L=l([].shift),B=l("".split),F=l("".slice),H=l("".toLowerCase),V=l([].unshift),K="Invalid scheme",W="Invalid host",$="Invalid port",G=/[a-z]/i,Z=/[\d+-.a-z]/i,J=/\d/,Y=/^0x/i,Q=/^[0-7]+$/,X=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,re=/[\0\t\n\r #/:<>?@[\\\]^|]/,ne=/^[\u0000-\u0020]+/,oe=/(^|[^\u0000-\u0020])[\u0000-\u0020]+$/,ie=/[\t\n\r]/g,ae=function(e){var t,r,n,o;if("number"==typeof e){for(t=[],r=0;r<4;r++)V(t,e%256),e=z(e/256);return R(t,".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,o=0,i=0;i<8;i++)0!==e[i]?(o>r&&(t=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r&&(t=n,r=o),t}(e),r=0;r<8;r++)o&&0===e[r]||(o&&(o=!1),n===r?(t+=r?":":"::",o=!0):(t+=D(e[r],16),r<7&&(t+=":")));return"["+t+"]"}return e},ce={},se=v({},ce,{" ":1,'"':1,"<":1,">":1,"`":1}),le=v({},se,{"#":1,"?":1,"{":1,"}":1}),ue=v({},le,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),fe=function(e,t){var r=h(e,0);return r>32&&r<127&&!d(t,e)?e:encodeURIComponent(e)},pe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},de=function(e,t){var r;return 2===e.length&&I(G,T(e,0))&&(":"===(r=T(e,1))||!t&&"|"===r)},ve=function(e){var t;return e.length>1&&de(F(e,0,2))&&(2===e.length||"/"===(t=T(e,2))||"\\"===t||"?"===t||"#"===t)},me=function(e){return"."===e||"%2e"===H(e)},ye={},he={},be={},ge={},_e={},we={},ke={},Se={},Ee={},je={},Oe={},xe={},Pe={},Ae={},Ce={},ze={},Ne={},Te={},Ie={},Re={},De={},Me=function(e,t,r){var n,o,i,a=g(e);if(t){if(o=this.parse(a))throw new A(o);this.searchParams=null}else{if(void 0!==r&&(n=new Me(r,!0)),o=this.parse(a,null,n))throw new A(o);(i=x(new O)).bindURL(this),this.searchParams=i}};Me.prototype={type:"URL",parse:function(e,t,r){var o,i,a,c,s,l=this,u=t||ye,f=0,p="",v=!1,h=!1,b=!1;for(e=g(e),t||(l.scheme="",l.username="",l.password="",l.host=null,l.port=null,l.path=[],l.query=null,l.fragment=null,l.cannotBeABaseURL=!1,e=q(e,ne,""),e=q(e,oe,"$1")),e=q(e,ie,""),o=m(e);f<=o.length;){switch(i=o[f],u){case ye:if(!i||!I(G,i)){if(t)return K;u=be;continue}p+=H(i),u=he;break;case he:if(i&&(I(Z,i)||"+"===i||"-"===i||"."===i))p+=H(i);else{if(":"!==i){if(t)return K;p="",u=be,f=0;continue}if(t&&(l.isSpecial()!==d(pe,p)||"file"===p&&(l.includesCredentials()||null!==l.port)||"file"===l.scheme&&!l.host))return;if(l.scheme=p,t)return void(l.isSpecial()&&pe[l.scheme]===l.port&&(l.port=null));p="","file"===l.scheme?u=Ae:l.isSpecial()&&r&&r.scheme===l.scheme?u=ge:l.isSpecial()?u=Se:"/"===o[f+1]?(u=_e,f++):(l.cannotBeABaseURL=!0,U(l.path,""),u=Ie)}break;case be:if(!r||r.cannotBeABaseURL&&"#"!==i)return K;if(r.cannotBeABaseURL&&"#"===i){l.scheme=r.scheme,l.path=y(r.path),l.query=r.query,l.fragment="",l.cannotBeABaseURL=!0,u=De;break}u="file"===r.scheme?Ae:we;continue;case ge:if("/"!==i||"/"!==o[f+1]){u=we;continue}u=Ee,f++;break;case _e:if("/"===i){u=je;break}u=Te;continue;case we:if(l.scheme=r.scheme,i===n)l.username=r.username,l.password=r.password,l.host=r.host,l.port=r.port,l.path=y(r.path),l.query=r.query;else if("/"===i||"\\"===i&&l.isSpecial())u=ke;else if("?"===i)l.username=r.username,l.password=r.password,l.host=r.host,l.port=r.port,l.path=y(r.path),l.query="",u=Re;else{if("#"!==i){l.username=r.username,l.password=r.password,l.host=r.host,l.port=r.port,l.path=y(r.path),l.path.length--,u=Te;continue}l.username=r.username,l.password=r.password,l.host=r.host,l.port=r.port,l.path=y(r.path),l.query=r.query,l.fragment="",u=De}break;case ke:if(!l.isSpecial()||"/"!==i&&"\\"!==i){if("/"!==i){l.username=r.username,l.password=r.password,l.host=r.host,l.port=r.port,u=Te;continue}u=je}else u=Ee;break;case Se:if(u=Ee,"/"!==i||"/"!==T(p,f+1))continue;f++;break;case Ee:if("/"!==i&&"\\"!==i){u=je;continue}break;case je:if("@"===i){v&&(p="%40"+p),v=!0,a=m(p);for(var _=0;_<a.length;_++){var w=a[_];if(":"!==w||b){var k=fe(w,ue);b?l.password+=k:l.username+=k}else b=!0}p=""}else if(i===n||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()){if(v&&""===p)return"Invalid authority";f-=m(p).length+1,p="",u=Oe}else p+=i;break;case Oe:case xe:if(t&&"file"===l.scheme){u=ze;continue}if(":"!==i||h){if(i===n||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()){if(l.isSpecial()&&""===p)return W;if(t&&""===p&&(l.includesCredentials()||null!==l.port))return;if(c=l.parseHost(p))return c;if(p="",u=Ne,t)return;continue}"["===i?h=!0:"]"===i&&(h=!1),p+=i}else{if(""===p)return W;if(c=l.parseHost(p))return c;if(p="",u=Pe,t===xe)return}break;case Pe:if(!I(J,i)){if(i===n||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()||t){if(""!==p){var S=C(p,10);if(S>65535)return $;l.port=l.isSpecial()&&S===pe[l.scheme]?null:S,p=""}if(t)return;u=Ne;continue}return $}p+=i;break;case Ae:if(l.scheme="file","/"===i||"\\"===i)u=Ce;else{if(!r||"file"!==r.scheme){u=Te;continue}switch(i){case n:l.host=r.host,l.path=y(r.path),l.query=r.query;break;case"?":l.host=r.host,l.path=y(r.path),l.query="",u=Re;break;case"#":l.host=r.host,l.path=y(r.path),l.query=r.query,l.fragment="",u=De;break;default:ve(R(y(o,f),""))||(l.host=r.host,l.path=y(r.path),l.shortenPath()),u=Te;continue}}break;case Ce:if("/"===i||"\\"===i){u=ze;break}r&&"file"===r.scheme&&!ve(R(y(o,f),""))&&(de(r.path[0],!0)?U(l.path,r.path[0]):l.host=r.host),u=Te;continue;case ze:if(i===n||"/"===i||"\\"===i||"?"===i||"#"===i){if(!t&&de(p))u=Te;else if(""===p){if(l.host="",t)return;u=Ne}else{if(c=l.parseHost(p))return c;if("localhost"===l.host&&(l.host=""),t)return;p="",u=Ne}continue}p+=i;break;case Ne:if(l.isSpecial()){if(u=Te,"/"!==i&&"\\"!==i)continue}else if(t||"?"!==i)if(t||"#"!==i){if(i!==n&&(u=Te,"/"!==i))continue}else l.fragment="",u=De;else l.query="",u=Re;break;case Te:if(i===n||"/"===i||"\\"===i&&l.isSpecial()||!t&&("?"===i||"#"===i)){if(".."===(s=H(s=p))||"%2e."===s||".%2e"===s||"%2e%2e"===s?(l.shortenPath(),"/"===i||"\\"===i&&l.isSpecial()||U(l.path,"")):me(p)?"/"===i||"\\"===i&&l.isSpecial()||U(l.path,""):("file"===l.scheme&&!l.path.length&&de(p)&&(l.host&&(l.host=""),p=T(p,0)+":"),U(l.path,p)),p="","file"===l.scheme&&(i===n||"?"===i||"#"===i))for(;l.path.length>1&&""===l.path[0];)L(l.path);"?"===i?(l.query="",u=Re):"#"===i&&(l.fragment="",u=De)}else p+=fe(i,le);break;case Ie:"?"===i?(l.query="",u=Re):"#"===i?(l.fragment="",u=De):i!==n&&(l.path[0]+=fe(i,ce));break;case Re:t||"#"!==i?i!==n&&("'"===i&&l.isSpecial()?l.query+="%27":l.query+="#"===i?"%23":fe(i,ce)):(l.fragment="",u=De);break;case De:i!==n&&(l.fragment+=fe(i,se))}f++}},parseHost:function(e){var t,r,n;if("["===T(e,0)){if("]"!==T(e,e.length-1))return W;if(t=function(e){var t,r,n,o,i,a,c,s=[0,0,0,0,0,0,0,0],l=0,u=null,f=0,p=function(){return T(e,f)};if(":"===p()){if(":"!==T(e,1))return;f+=2,u=++l}for(;p();){if(8===l)return;if(":"!==p()){for(t=r=0;r<4&&I(ee,p());)t=16*t+C(p(),16),f++,r++;if("."===p()){if(0===r)return;if(f-=r,l>6)return;for(n=0;p();){if(o=null,n>0){if(!("."===p()&&n<4))return;f++}if(!I(J,p()))return;for(;I(J,p());){if(i=C(p(),10),null===o)o=i;else{if(0===o)return;o=10*o+i}if(o>255)return;f++}s[l]=256*s[l]+o,2!=++n&&4!==n||l++}if(4!==n)return;break}if(":"===p()){if(f++,!p())return}else if(p())return;s[l++]=t}else{if(null!==u)return;f++,u=++l}}if(null!==u)for(a=l-u,l=7;0!==l&&a>0;)c=s[l],s[l--]=s[u+a-1],s[u+--a]=c;else if(8!==l)return;return s}(F(e,1,-1)),!t)return W;this.host=t}else if(this.isSpecial()){if(e=b(e),I(te,e))return W;if(t=function(e){var t,r,n,o,i,a,c,s=B(e,".");if(s.length&&""===s[s.length-1]&&s.length--,(t=s.length)>4)return e;for(r=[],n=0;n<t;n++){if(""===(o=s[n]))return e;if(i=10,o.length>1&&"0"===T(o,0)&&(i=I(Y,o)?16:8,o=F(o,8===i?1:2)),""===o)a=0;else{if(!I(10===i?X:8===i?Q:ee,o))return e;a=C(o,i)}U(r,a)}for(n=0;n<t;n++)if(a=r[n],n===t-1){if(a>=N(256,5-t))return null}else if(a>255)return null;for(c=M(r),n=0;n<r.length;n++)c+=r[n]*N(256,3-n);return c}(e),null===t)return W;this.host=t}else{if(I(re,e))return W;for(t="",r=m(e),n=0;n<r.length;n++)t+=fe(r[n],ce);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"===this.scheme},includesCredentials:function(){return""!==this.username||""!==this.password},isSpecial:function(){return d(pe,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"===this.scheme&&1===t&&de(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,r=e.username,n=e.password,o=e.host,i=e.port,a=e.path,c=e.query,s=e.fragment,l=t+":";return null!==o?(l+="//",e.includesCredentials()&&(l+=r+(n?":"+n:"")+"@"),l+=ae(o),null!==i&&(l+=":"+i)):"file"===t&&(l+="//"),l+=e.cannotBeABaseURL?a[0]:a.length?"/"+R(a,"/"):"",null!==c&&(l+="?"+c),null!==s&&(l+="#"+s),l},setHref:function(e){var t=this.parse(e);if(t)throw new A(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"===e)try{return new Ue(e.path[0]).origin}catch(e){return"null"}return"file"!==e&&this.isSpecial()?e+"://"+ae(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(g(e)+":",ye)},getUsername:function(){return this.username},setUsername:function(e){var t=m(g(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<t.length;r++)this.username+=fe(t[r],ue)}},getPassword:function(){return this.password},setPassword:function(e){var t=m(g(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<t.length;r++)this.password+=fe(t[r],ue)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?ae(e):ae(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,Oe)},getHostname:function(){var e=this.host;return null===e?"":ae(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,xe)},getPort:function(){var e=this.port;return null===e?"":g(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""===(e=g(e))?this.port=null:this.parse(e,Pe))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+R(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,Ne))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""===(e=g(e))?this.query=null:("?"===T(e,0)&&(e=F(e,1)),this.query="",this.parse(e,Re)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!==(e=g(e))?("#"===T(e,0)&&(e=F(e,1)),this.fragment="",this.parse(e,De)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Ue=function(e){var t=p(this,qe),r=w(arguments.length,1)>1?arguments[1]:void 0,n=E(t,new Me(e,!1,r));i||(t.href=n.serialize(),t.origin=n.getOrigin(),t.protocol=n.getProtocol(),t.username=n.getUsername(),t.password=n.getPassword(),t.host=n.getHost(),t.hostname=n.getHostname(),t.port=n.getPort(),t.pathname=n.getPathname(),t.search=n.getSearch(),t.searchParams=n.getSearchParams(),t.hash=n.getHash())},qe=Ue.prototype,Le=function(e,t){return{get:function(){return j(this)[e]()},set:t&&function(e){return j(this)[t](e)},configurable:!0,enumerable:!0}};if(i&&(f(qe,"href",Le("serialize","setHref")),f(qe,"origin",Le("getOrigin")),f(qe,"protocol",Le("getProtocol","setProtocol")),f(qe,"username",Le("getUsername","setUsername")),f(qe,"password",Le("getPassword","setPassword")),f(qe,"host",Le("getHost","setHost")),f(qe,"hostname",Le("getHostname","setHostname")),f(qe,"port",Le("getPort","setPort")),f(qe,"pathname",Le("getPathname","setPathname")),f(qe,"search",Le("getSearch","setSearch")),f(qe,"searchParams",Le("getSearchParams")),f(qe,"hash",Le("getHash","setHash"))),u(qe,"toJSON",(function(){return j(this).serialize()}),{enumerable:!0}),u(qe,"toString",(function(){return j(this).serialize()}),{enumerable:!0}),P){var Be=P.createObjectURL,Fe=P.revokeObjectURL;Be&&u(Ue,"createObjectURL",s(Be,P)),Fe&&u(Ue,"revokeObjectURL",s(Fe,P))}_(Ue,"URL"),o({global:!0,constructor:!0,forced:!a,sham:!i},{URL:Ue})},4362:(e,t,r)=>{"use strict";r(2332)}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{"use strict";r.r(n),r.d(n,{renderIDE:()=>di,show:()=>vi,version:()=>mi});var e={};r.r(e),r.d(e,{BaseRetractingLabelInput:()=>Qr,CookieForm:()=>wn,Cookies:()=>kn,I18nInput:()=>Hr,Input:()=>Yr,LanguageSelect:()=>an,PurposeOrder:()=>Un,PurposeSelect:()=>xn,Range:()=>bn,RetractingLabelInput:()=>Xr,Select:()=>cn,ServiceSelect:()=>Dn,Switch:()=>un,ThemesSelect:()=>Hn}),r(4776),r(9336),r(5021);var t,o,i,a,c,s,l,u,f={},p=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,v=Array.isArray;function m(e,t){for(var r in t)e[r]=t[r];return e}function y(e){var t=e.parentNode;t&&t.removeChild(e)}function h(e,r,n){var o,i,a,c={};for(a in r)"key"==a?o=r[a]:"ref"==a?i=r[a]:c[a]=r[a];if(arguments.length>2&&(c.children=arguments.length>3?t.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(a in e.defaultProps)void 0===c[a]&&(c[a]=e.defaultProps[a]);return b(e,c,o,i,null)}function b(e,t,r,n,a){var c={type:e,props:t,key:r,ref:n,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==a?++i:a,__i:-1,__u:0};return null==a&&null!=o.vnode&&o.vnode(c),c}function g(e){return e.children}function _(e,t){this.props=e,this.context=t}function w(e,t){if(null==t)return e.__?w(e.__,e.__i+1):null;for(var r;t<e.__k.length;t++)if(null!=(r=e.__k[t])&&null!=r.__e)return r.__e;return"function"==typeof e.type?w(e):null}function k(e,t,r){var n,i=e.__v,a=i.__e,c=e.__P;if(c)return(n=m({},i)).__v=i.__v+1,o.vnode&&o.vnode(n),R(c,n,i,e.__n,void 0!==c.ownerSVGElement,32&i.__u?[a]:null,t,null==a?w(i):a,!!(32&i.__u),r),n.__v=i.__v,n.__.__k[n.__i]=n,n.__d=void 0,n.__e!=a&&S(n),n}function S(e){var t,r;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(r=e.__k[t])&&null!=r.__e){e.__e=e.__c.base=r.__e;break}return S(e)}}function E(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!j.__r++||c!==o.debounceRendering)&&((c=o.debounceRendering)||s)(j)}function j(){var e,t,r,n=[],i=[];for(a.sort(l);e=a.shift();)e.__d&&(r=a.length,t=k(e,n,i)||t,0===r||a.length>r?(D(n,t,i),i.length=n.length=0,t=void 0,a.sort(l)):t&&o.__c&&o.__c(t,p));t&&D(n,t,i),j.__r=0}function O(e,t,r,n,o,i,a,c,s,l,u){var d,v,m,y,h,b=n&&n.__k||p,g=t.length;for(r.__d=s,x(r,t,b),s=r.__d,d=0;d<g;d++)null!=(m=r.__k[d])&&"boolean"!=typeof m&&"function"!=typeof m&&(v=-1===m.__i?f:b[m.__i]||f,m.__i=d,R(e,m,v,o,i,a,c,s,l,u),y=m.__e,m.ref&&v.ref!=m.ref&&(v.ref&&U(v.ref,null,m),u.push(m.ref,m.__c||y,m)),null==h&&null!=y&&(h=y),65536&m.__u||v.__k===m.__k?s=P(m,s,e):"function"==typeof m.type&&void 0!==m.__d?s=m.__d:y&&(s=y.nextSibling),m.__d=void 0,m.__u&=-196609);r.__d=s,r.__e=h}function x(e,t,r){var n,o,i,a,c,s=t.length,l=r.length,u=l,f=0;for(e.__k=[],n=0;n<s;n++)a=n+f,null!=(o=e.__k[n]=null==(o=t[n])||"boolean"==typeof o||"function"==typeof o?null:"string"==typeof o||"number"==typeof o||"bigint"==typeof o||o.constructor==String?b(null,o,null,null,null):v(o)?b(g,{children:o},null,null,null):void 0===o.constructor&&o.__b>0?b(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o)?(o.__=e,o.__b=e.__b+1,c=C(o,r,a,u),o.__i=c,i=null,-1!==c&&(u--,(i=r[c])&&(i.__u|=131072)),null==i||null===i.__v?(-1==c&&f--,"function"!=typeof o.type&&(o.__u|=65536)):c!==a&&(c===a+1?f++:c>a?u>s-a?f+=c-a:f--:c<a?c==a-1&&(f=c-a):f=0,c!==n+f&&(o.__u|=65536))):(i=r[a])&&null==i.key&&i.__e&&0==(131072&i.__u)&&(i.__e==e.__d&&(e.__d=w(i)),q(i,i,!1),r[a]=null,u--);if(u)for(n=0;n<l;n++)null!=(i=r[n])&&0==(131072&i.__u)&&(i.__e==e.__d&&(e.__d=w(i)),q(i,i))}function P(e,t,r){var n,o;if("function"==typeof e.type){for(n=e.__k,o=0;n&&o<n.length;o++)n[o]&&(n[o].__=e,t=P(n[o],t,r));return t}e.__e!=t&&(r.insertBefore(e.__e,t||null),t=e.__e);do{t=t&&t.nextSibling}while(null!=t&&8===t.nodeType);return t}function A(e,t){return t=t||[],null==e||"boolean"==typeof e||(v(e)?e.some((function(e){A(e,t)})):t.push(e)),t}function C(e,t,r,n){var o=e.key,i=e.type,a=r-1,c=r+1,s=t[r];if(null===s||s&&o==s.key&&i===s.type&&0==(131072&s.__u))return r;if(n>(null!=s&&0==(131072&s.__u)?1:0))for(;a>=0||c<t.length;){if(a>=0){if((s=t[a])&&0==(131072&s.__u)&&o==s.key&&i===s.type)return a;a--}if(c<t.length){if((s=t[c])&&0==(131072&s.__u)&&o==s.key&&i===s.type)return c;c++}}return-1}function z(e,t,r){"-"===t[0]?e.setProperty(t,null==r?"":r):e[t]=null==r?"":"number"!=typeof r||d.test(t)?r:r+"px"}function N(e,t,r,n,o){var i;e:if("style"===t)if("string"==typeof r)e.style.cssText=r;else{if("string"==typeof n&&(e.style.cssText=n=""),n)for(t in n)r&&t in r||z(e.style,t,"");if(r)for(t in r)n&&r[t]===n[t]||z(e.style,t,r[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/(PointerCapture)$|Capture$/i,"$1")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=r,r?n?r.u=n.u:(r.u=Date.now(),e.addEventListener(t,i?I:T,i)):e.removeEventListener(t,i?I:T,i);else{if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&"role"!==t&&t in e)try{e[t]=null==r?"":r;break e}catch(e){}"function"==typeof r||(null==r||!1===r&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,r))}}function T(e){if(this.l){var t=this.l[e.type+!1];if(e.t){if(e.t<=t.u)return}else e.t=Date.now();return t(o.event?o.event(e):e)}}function I(e){if(this.l)return this.l[e.type+!0](o.event?o.event(e):e)}function R(e,t,r,n,i,a,c,s,l,u){var f,p,d,y,h,b,w,k,S,E,j,x,P,A,C,z=t.type;if(void 0!==t.constructor)return null;128&r.__u&&(l=!!(32&r.__u),a=[s=t.__e=r.__e]),(f=o.__b)&&f(t);e:if("function"==typeof z)try{if(k=t.props,S=(f=z.contextType)&&n[f.__c],E=f?S?S.props.value:f.__:n,r.__c?w=(p=t.__c=r.__c).__=p.__E:("prototype"in z&&z.prototype.render?t.__c=p=new z(k,E):(t.__c=p=new _(k,E),p.constructor=z,p.render=L),S&&S.sub(p),p.props=k,p.state||(p.state={}),p.context=E,p.__n=n,d=p.__d=!0,p.__h=[],p._sb=[]),null==p.__s&&(p.__s=p.state),null!=z.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=m({},p.__s)),m(p.__s,z.getDerivedStateFromProps(k,p.__s))),y=p.props,h=p.state,p.__v=t,d)null==z.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==z.getDerivedStateFromProps&&k!==y&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(k,E),!p.__e&&(null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(k,p.__s,E)||t.__v===r.__v)){for(t.__v!==r.__v&&(p.props=k,p.state=p.__s,p.__d=!1),t.__e=r.__e,t.__k=r.__k,t.__k.forEach((function(e){e&&(e.__=t)})),j=0;j<p._sb.length;j++)p.__h.push(p._sb[j]);p._sb=[],p.__h.length&&c.push(p);break e}null!=p.componentWillUpdate&&p.componentWillUpdate(k,p.__s,E),null!=p.componentDidUpdate&&p.__h.push((function(){p.componentDidUpdate(y,h,b)}))}if(p.context=E,p.props=k,p.__P=e,p.__e=!1,x=o.__r,P=0,"prototype"in z&&z.prototype.render){for(p.state=p.__s,p.__d=!1,x&&x(t),f=p.render(p.props,p.state,p.context),A=0;A<p._sb.length;A++)p.__h.push(p._sb[A]);p._sb=[]}else do{p.__d=!1,x&&x(t),f=p.render(p.props,p.state,p.context),p.state=p.__s}while(p.__d&&++P<25);p.state=p.__s,null!=p.getChildContext&&(n=m(m({},n),p.getChildContext())),d||null==p.getSnapshotBeforeUpdate||(b=p.getSnapshotBeforeUpdate(y,h)),O(e,v(C=null!=f&&f.type===g&&null==f.key?f.props.children:f)?C:[C],t,r,n,i,a,c,s,l,u),p.base=t.__e,t.__u&=-161,p.__h.length&&c.push(p),w&&(p.__E=p.__=null)}catch(e){t.__v=null,l||null!=a?(t.__e=s,t.__u|=l?160:32,a[a.indexOf(s)]=null):(t.__e=r.__e,t.__k=r.__k),o.__e(e,t,r)}else null==a&&t.__v===r.__v?(t.__k=r.__k,t.__e=r.__e):t.__e=M(r.__e,t,r,n,i,a,c,l,u);(f=o.diffed)&&f(t)}function D(e,t,r){for(var n=0;n<r.length;n++)U(r[n],r[++n],r[++n]);o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function M(e,r,n,o,i,a,c,s,l){var u,p,d,m,h,b,g,_=n.props,k=r.props,S=r.type;if("svg"===S&&(i=!0),null!=a)for(u=0;u<a.length;u++)if((h=a[u])&&"setAttribute"in h==!!S&&(S?h.localName===S:3===h.nodeType)){e=h,a[u]=null;break}if(null==e){if(null===S)return document.createTextNode(k);e=i?document.createElementNS("http://www.w3.org/2000/svg",S):document.createElement(S,k.is&&k),a=null,s=!1}if(null===S)_===k||s&&e.data===k||(e.data=k);else{if(a=a&&t.call(e.childNodes),_=n.props||f,!s&&null!=a)for(_={},u=0;u<e.attributes.length;u++)_[(h=e.attributes[u]).name]=h.value;for(u in _)h=_[u],"children"==u||("dangerouslySetInnerHTML"==u?d=h:"key"===u||u in k||N(e,u,null,h,i));for(u in k)h=k[u],"children"==u?m=h:"dangerouslySetInnerHTML"==u?p=h:"value"==u?b=h:"checked"==u?g=h:"key"===u||s&&"function"!=typeof h||_[u]===h||N(e,u,h,_[u],i);if(p)s||d&&(p.__html===d.__html||p.__html===e.innerHTML)||(e.innerHTML=p.__html),r.__k=[];else if(d&&(e.innerHTML=""),O(e,v(m)?m:[m],r,n,o,i&&"foreignObject"!==S,a,c,a?a[0]:n.__k&&w(n,0),s,l),null!=a)for(u=a.length;u--;)null!=a[u]&&y(a[u]);s||(u="value",void 0!==b&&(b!==e[u]||"progress"===S&&!b||"option"===S&&b!==_[u])&&N(e,u,b,_[u],!1),u="checked",void 0!==g&&g!==e[u]&&N(e,u,g,_[u],!1))}return e}function U(e,t,r){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,r)}}function q(e,t,r){var n,i;if(o.unmount&&o.unmount(e),(n=e.ref)&&(n.current&&n.current!==e.__e||U(n,null,t)),null!=(n=e.__c)){if(n.componentWillUnmount)try{n.componentWillUnmount()}catch(e){o.__e(e,t)}n.base=n.__P=null,e.__c=void 0}if(n=e.__k)for(i=0;i<n.length;i++)n[i]&&q(n[i],t,r||"function"!=typeof e.type);r||null==e.__e||y(e.__e),e.__=e.__e=e.__d=void 0}function L(e,t,r){return this.constructor(e,r)}function B(e,r,n){var i,a,c,s;o.__&&o.__(e,r),a=(i="function"==typeof n)?null:n&&n.__k||r.__k,c=[],s=[],R(r,e=(!i&&n||r).__k=h(g,null,[e]),a||f,f,void 0!==r.ownerSVGElement,!i&&n?[n]:a?null:r.firstChild?t.call(r.childNodes):null,c,!i&&n?n:a?a.__e:r.firstChild,i,s),e.__d=void 0,D(c,e,s)}function F(e,t){B(e,t,F)}function H(e,r,n){var o,i,a,c,s=m({},e.props);for(a in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),r)"key"==a?o=r[a]:"ref"==a?i=r[a]:s[a]=void 0===r[a]&&void 0!==c?c[a]:r[a];return arguments.length>2&&(s.children=arguments.length>3?t.call(arguments,2):n),b(e.type,s,o||e.key,i||e.ref,null)}t=p.slice,o={__e:function(e,t,r,n){for(var o,i,a;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),a=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,n||{}),a=o.__d),a)return o.__E=o}catch(t){e=t}throw e}},i=0,_.prototype.setState=function(e,t){var r;r=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=m({},this.state),"function"==typeof e&&(e=e(m({},r),this.props)),e&&m(r,e),null!=e&&this.__v&&(t&&this._sb.push(t),E(this))},_.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),E(this))},_.prototype.render=g,a=[],s="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,l=function(e,t){return e.__v.__b-t.__v.__b},j.__r=0,u=0;var V,K,W,$,G=0,Z=[],J=[],Y=o,Q=Y.__b,X=Y.__r,ee=Y.diffed,te=Y.__c,re=Y.unmount,ne=Y.__;function oe(e,t){Y.__h&&Y.__h(K,e,G||t),G=0;var r=K.__H||(K.__H={__:[],__h:[]});return e>=r.__.length&&r.__.push({__V:J}),r.__[e]}function ie(e){return G=1,ae(he,e)}function ae(e,t,r){var n=oe(V++,2);if(n.t=e,!n.__c&&(n.__=[r?r(t):he(void 0,t),function(e){var t=n.__N?n.__N[0]:n.__[0],r=n.t(t,e);t!==r&&(n.__N=[r,n.__[1]],n.__c.setState({}))}],n.__c=K,!K.u)){var o=function(e,t,r){if(!n.__c.__H)return!0;var o=n.__c.__H.__.filter((function(e){return!!e.__c}));if(o.every((function(e){return!e.__N})))return!i||i.call(this,e,t,r);var a=!1;return o.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(a=!0)}})),!(!a&&n.__c.props===e)&&(!i||i.call(this,e,t,r))};K.u=!0;var i=K.shouldComponentUpdate,a=K.componentWillUpdate;K.componentWillUpdate=function(e,t,r){if(this.__e){var n=i;i=void 0,o(e,t,r),i=n}a&&a.call(this,e,t,r)},K.shouldComponentUpdate=o}return n.__N||n.__}function ce(e,t){var r=oe(V++,3);!Y.__s&&ye(r.__H,t)&&(r.__=e,r.i=t,K.__H.__h.push(r))}function se(e,t){var r=oe(V++,4);!Y.__s&&ye(r.__H,t)&&(r.__=e,r.i=t,K.__h.push(r))}function le(e){return G=5,ue((function(){return{current:e}}),[])}function ue(e,t){var r=oe(V++,7);return ye(r.__H,t)?(r.__V=e(),r.i=t,r.__h=e,r.__V):r.__}function fe(){for(var e;e=Z.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(ve),e.__H.__h.forEach(me),e.__H.__h=[]}catch(t){e.__H.__h=[],Y.__e(t,e.__v)}}Y.__b=function(e){K=null,Q&&Q(e)},Y.__=function(e,t){e&&t.__k&&t.__k.__m&&(e.__m=t.__k.__m),ne&&ne(e,t)},Y.__r=function(e){X&&X(e),V=0;var t=(K=e.__c).__H;t&&(W===K?(t.__h=[],K.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=J,e.__N=e.i=void 0}))):(t.__h.forEach(ve),t.__h.forEach(me),t.__h=[],V=0)),W=K},Y.diffed=function(e){ee&&ee(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==Z.push(t)&&$===Y.requestAnimationFrame||(($=Y.requestAnimationFrame)||de)(fe)),t.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==J&&(e.__=e.__V),e.i=void 0,e.__V=J}))),W=K=null},Y.__c=function(e,t){t.some((function(e){try{e.__h.forEach(ve),e.__h=e.__h.filter((function(e){return!e.__||me(e)}))}catch(r){t.some((function(e){e.__h&&(e.__h=[])})),t=[],Y.__e(r,e.__v)}})),te&&te(e,t)},Y.unmount=function(e){re&&re(e);var t,r=e.__c;r&&r.__H&&(r.__H.__.forEach((function(e){try{ve(e)}catch(e){t=e}})),r.__H=void 0,t&&Y.__e(t,r.__v))};var pe="function"==typeof requestAnimationFrame;function de(e){var t,r=function(){clearTimeout(n),pe&&cancelAnimationFrame(t),setTimeout(e)},n=setTimeout(r,100);pe&&(t=requestAnimationFrame(r))}function ve(e){var t=K,r=e.__c;"function"==typeof r&&(e.__c=void 0,r()),K=t}function me(e){var t=K;e.__c=e.__(),K=t}function ye(e,t){return!e||e.length!==t.length||t.some((function(t,r){return t!==e[r]}))}function he(e,t){return"function"==typeof t?t(e):t}function be(e,t){for(var r in t)e[r]=t[r];return e}function ge(e,t){for(var r in e)if("__source"!==r&&!(r in t))return!0;for(var n in t)if("__source"!==n&&e[n]!==t[n])return!0;return!1}function _e(e,t){this.props=e,this.context=t}(_e.prototype=new _).isPureReactComponent=!0,_e.prototype.shouldComponentUpdate=function(e,t){return ge(this.props,e)||ge(this.state,t)};var we=o.__b;o.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),we&&we(e)};var ke="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911,Se=function(e,t){return null==e?null:A(A(e).map(t))},Ee={map:Se,forEach:Se,count:function(e){return e?A(e).length:0},only:function(e){var t=A(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:A},je=o.__e;o.__e=function(e,t,r,n){if(e.then)for(var o,i=t;i=i.__;)if((o=i.__c)&&o.__c)return null==t.__e&&(t.__e=r.__e,t.__k=r.__k),o.__c(e,t);je(e,t,r,n)};var Oe=o.unmount;function xe(e,t,r){return e&&(e.__c&&e.__c.__H&&(e.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),e.__c.__H=null),null!=(e=be({},e)).__c&&(e.__c.__P===r&&(e.__c.__P=t),e.__c=null),e.__k=e.__k&&e.__k.map((function(e){return xe(e,t,r)}))),e}function Pe(e,t,r){return e&&r&&(e.__v=null,e.__k=e.__k&&e.__k.map((function(e){return Pe(e,t,r)})),e.__c&&e.__c.__P===t&&(e.__e&&r.appendChild(e.__e),e.__c.__e=!0,e.__c.__P=r)),e}function Ae(){this.__u=0,this.t=null,this.__b=null}function Ce(e){var t=e.__.__c;return t&&t.__a&&t.__a(e)}function ze(){this.u=null,this.o=null}o.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&32&e.__u&&(e.type=null),Oe&&Oe(e)},(Ae.prototype=new _).__c=function(e,t){var r=t.__c,n=this;null==n.t&&(n.t=[]),n.t.push(r);var o=Ce(n.__v),i=!1,a=function(){i||(i=!0,r.__R=null,o?o(c):c())};r.__R=a;var c=function(){if(! --n.__u){if(n.state.__a){var e=n.state.__a;n.__v.__k[0]=Pe(e,e.__c.__P,e.__c.__O)}var t;for(n.setState({__a:n.__b=null});t=n.t.pop();)t.forceUpdate()}};n.__u++||32&t.__u||n.setState({__a:n.__b=n.__v.__k[0]}),e.then(a,a)},Ae.prototype.componentWillUnmount=function(){this.t=[]},Ae.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),n=this.__v.__k[0].__c;this.__v.__k[0]=xe(this.__b,r,n.__O=n.__P)}this.__b=null}var o=t.__a&&h(g,null,e.fallback);return o&&(o.__u&=-33),[h(g,null,t.__a?null:e.children),o]};var Ne=function(e,t,r){if(++r[1]===r[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(r=e.u;r;){for(;r.length>3;)r.pop()();if(r[1]<r[0])break;e.u=r=r[2]}};function Te(e){return this.getChildContext=function(){return e.context},e.children}function Ie(e){var t=this,r=e.i;t.componentWillUnmount=function(){B(null,t.l),t.l=null,t.i=null},t.i&&t.i!==r&&t.componentWillUnmount(),t.l||(t.i=r,t.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,r){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),B(h(Te,{context:t.context},e.__v),t.l)}(ze.prototype=new _).__a=function(e){var t=this,r=Ce(t.__v),n=t.o.get(e);return n[0]++,function(o){var i=function(){t.props.revealOrder?(n.push(o),Ne(t,e,n)):o()};r?r(i):i()}},ze.prototype.render=function(e){this.u=null,this.o=new Map;var t=A(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var r=t.length;r--;)this.o.set(t[r],this.u=[1,0,this.u]);return e.children},ze.prototype.componentDidUpdate=ze.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,r){Ne(e,r,t)}))};var Re="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,De=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,Me=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,Ue=/[A-Z0-9]/g,qe="undefined"!=typeof document,Le=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/:/fil|che|ra/).test(e)};function Be(e,t,r){return null==t.__k&&(t.textContent=""),B(e,t),"function"==typeof r&&r(),e?e.__c:null}_.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(_.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var Fe=o.event;function He(){}function Ve(){return this.cancelBubble}function Ke(){return this.defaultPrevented}o.event=function(e){return Fe&&(e=Fe(e)),e.persist=He,e.isPropagationStopped=Ve,e.isDefaultPrevented=Ke,e.nativeEvent=e};var We,$e={enumerable:!1,configurable:!0,get:function(){return this.class}},Ge=o.vnode;o.vnode=function(e){"string"==typeof e.type&&function(e){var t=e.props,r=e.type,n={};for(var o in t){var i=t[o];if(!("value"===o&&"defaultValue"in t&&null==i||qe&&"children"===o&&"noscript"===r||"class"===o||"className"===o)){var a=o.toLowerCase();"defaultValue"===o&&"value"in t&&null==t.value?o="value":"download"===o&&!0===i?i="":"translate"===a&&"no"===i?i=!1:"ondoubleclick"===a?o="ondblclick":"onchange"!==a||"input"!==r&&"textarea"!==r||Le(t.type)?"onfocus"===a?o="onfocusin":"onblur"===a?o="onfocusout":Me.test(o)?o=a:-1===r.indexOf("-")&&De.test(o)?o=o.replace(Ue,"-$&").toLowerCase():null===i&&(i=void 0):a=o="oninput","oninput"===a&&n[o=a]&&(o="oninputCapture"),n[o]=i}}"select"==r&&n.multiple&&Array.isArray(n.value)&&(n.value=A(t.children).forEach((function(e){e.props.selected=-1!=n.value.indexOf(e.props.value)}))),"select"==r&&null!=n.defaultValue&&(n.value=A(t.children).forEach((function(e){e.props.selected=n.multiple?-1!=n.defaultValue.indexOf(e.props.value):n.defaultValue==e.props.value}))),t.class&&!t.className?(n.class=t.class,Object.defineProperty(n,"className",$e)):(t.className&&!t.class||t.class&&t.className)&&(n.class=n.className=t.className),e.props=n}(e),e.$$typeof=Re,Ge&&Ge(e)};var Ze=o.__r;o.__r=function(e){Ze&&Ze(e),We=e.__c};var Je=o.diffed;o.diffed=function(e){Je&&Je(e);var t=e.props,r=e.__e;null!=r&&"textarea"===e.type&&"value"in t&&t.value!==r.value&&(r.value=null==t.value?"":t.value),We=null};var Ye={ReactCurrentDispatcher:{current:{readContext:function(e){return We.__n[e.__c].props.value}}}};function Qe(e){return!!e&&e.$$typeof===Re}function Xe(e){e()}function et(e){var t,r,n=e.v,o=e.__;try{var i=n();return!((t=o)===(r=i)&&(0!==t||1/t==1/r)||t!=t&&r!=r)}catch(e){return!0}}var tt={useState:ie,useId:function(){var e=oe(V++,11);if(!e.__){for(var t=K.__v;null!==t&&!t.__m&&null!==t.__;)t=t.__;var r=t.__m||(t.__m=[0,0]);e.__="P"+r[0]+"-"+r[1]++}return e.__},useReducer:ae,useEffect:ce,useLayoutEffect:se,useInsertionEffect:se,useTransition:function(){return[!1,Xe]},useDeferredValue:function(e){return e},useSyncExternalStore:function(e,t){var r=t(),n=ie({h:{__:r,v:t}}),o=n[0].h,i=n[1];return se((function(){o.__=r,o.v=t,et(o)&&i({h:o})}),[e,r,t]),ce((function(){return et(o)&&i({h:o}),e((function(){et(o)&&i({h:o})}))}),[e]),r},startTransition:Xe,useRef:le,useImperativeHandle:function(e,t,r){G=6,se((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==r?r:r.concat(e))},useMemo:ue,useCallback:function(e,t){return G=8,ue((function(){return e}),t)},useContext:function(e){var t=K.context[e.__c],r=oe(V++,9);return r.c=e,t?(null==r.__&&(r.__=!0,t.sub(K)),t.props.value):e.__},useDebugValue:function(e,t){Y.useDebugValue&&Y.useDebugValue(t?t(e):e)},version:"17.0.2",Children:Ee,render:Be,hydrate:function(e,t,r){return F(e,t),"function"==typeof r&&r(),e?e.__c:null},unmountComponentAtNode:function(e){return!!e.__k&&(B(null,e),!0)},createPortal:function(e,t){var r=h(Ie,{__v:e,i:t});return r.containerInfo=t,r},createElement:h,createContext:function(e,t){var r={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var r,n;return this.getChildContext||(r=[],(n={})[t]=this,this.getChildContext=function(){return n},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&r.some((function(e){e.__e=!0,E(e)}))},this.sub=function(e){r.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){r.splice(r.indexOf(e),1),t&&t.call(e)}}),e.children}};return r.Provider.__=r.Consumer.contextType=r},createFactory:function(e){return h.bind(null,e)},cloneElement:function(e){return Qe(e)?H.apply(null,arguments):e},createRef:function(){return{current:null}},Fragment:g,isValidElement:Qe,isElement:Qe,isFragment:function(e){return Qe(e)&&e.type===g},findDOMNode:function(e){return e&&(e.base||1===e.nodeType&&e)||null},Component:_,PureComponent:_e,memo:function(e,t){function r(e){var r=this.props.ref,n=r==e.ref;return!n&&r&&(r.call?r(null):r.current=null),t?!t(this.props,e)||!n:ge(this.props,e)}function n(t){return this.shouldComponentUpdate=r,h(e,t)}return n.displayName="Memo("+(e.displayName||e.name)+")",n.prototype.isReactComponent=!0,n.__f=!0,n},forwardRef:function(e){function t(t){var r=be({},t);return delete r.ref,e(r,t.ref||null)}return t.$$typeof=ke,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t},flushSync:function(e,t){return e(t)},unstable_batchedUpdates:function(e,t){return e(t)},StrictMode:g,Suspense:Ae,SuspenseList:ze,lazy:function(e){var t,r,n;function o(o){if(t||(t=e()).then((function(e){r=e.default||e}),(function(e){n=e})),n)throw n;if(!r)throw t;return h(r,o)}return o.displayName="Lazy",o.__f=!0,o},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:Ye},rt=(r(9305),r(2733),r(4701),r(1678),r(4382),r(2084),r(9892),r(4962),r(6584),r(4754),r(1908),r(8551),r(94),r(6457),r(8908),r(3810),r(8557),r(3687),r(3994),r(3630),r(2367),r(6437),r(2697),r(1359),r(6216),r(6448),r(7089),r(2688)),nt=r.n(rt),ot=function(e){var t=e.t;return tt.createElement("svg",{role:"img","aria-label":t(["close"]),width:"12",height:"12",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},tt.createElement("title",null,t(["close"])),tt.createElement("line",{x1:"1",y1:"11",x2:"11",y2:"1",strokeWidth:"1"}),tt.createElement("line",{x1:"1",y1:"1",x2:"11",y2:"11",strokeWidth:"1"}))};function it(e){return e.split("-").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join(" ")}function at(e){return function(e){if(Array.isArray(e))return ct(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return ct(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ct(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ct(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function st(e){return st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},st(e)}ot.propTypes={t:nt().func},r(7575),r(646),r(987),r(3819);var lt=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o,i=st(r[0]);o=0===r.length?{}:"string"===i||"number"===i?Array.prototype.slice.call(r):r[0];for(var a=[],c=e.toString();c.length>0;){var s=c.match(/\{(?!\{)([\w\d]+)\}(?!\})/);if(null!==s){var l=c.substr(0,s.index);c=c.substr(s.index+s[0].length);var u=parseInt(s[1]);a.push(l),u!=u?a.push(o[s[1]]):a.push(o[u])}else a.push(c),c=""}return a};function ut(e,t,r){var n=t;Array.isArray(n)||(n=[n]);for(var o=e,i=0;i<n.length;i++){if(void 0===o)return r;if(void 0!==n[i]&&n[i].endsWith("?")){var a,c=n[i].slice(0,n[i].length-1);void 0!==(a=o instanceof Map?o.get(c):o[c])&&"string"==typeof a&&(o=a)}else o=o instanceof Map?o.get(n[i]):o[n[i]]}return void 0===o||"string"!=typeof o?r:""!==o?o:void 0}function ft(e,t,r,n){var o=n,i=!1;"!"===o[0]&&(o=o.slice(1),i=!0),Array.isArray(o)||(o=[o]);var a=ut(e,[t].concat(at(o)));if(void 0===a&&void 0!==r&&(a=ut(e,[r].concat(at(o)))),void 0===a){if(i)return;return["[missing translation: ".concat(t,"/").concat(o.join("/"),"]")]}for(var c=arguments.length,s=new Array(c>4?c-4:0),l=4;l<c;l++)s[l-4]=arguments[l];return s.length>0?lt.apply(void 0,[a].concat(s)):a}const pt=function(e){var t=e.text,r=e.config;if(t instanceof Array||(t=[t]),!0===r.htmlTexts){var n=!1;"<"===t[0][0]&&(n=!0);var o=t.map((function(e,t){return"string"==typeof e?tt.createElement("span",{key:t,dangerouslySetInnerHTML:{__html:e}}):e}));return n?tt.createElement(tt.Fragment,null,o):tt.createElement("span",null,o)}return tt.createElement("span",null,t)};function dt(e){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dt(e)}function vt(){return vt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},vt.apply(this,arguments)}function mt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,yt(n.key),n)}}function yt(e){var t=function(e,t){if("object"!=dt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=dt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==dt(t)?t:String(t)}function ht(e,t,r){return t=gt(t),function(e,t){if(t&&("object"===dt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,bt()?Reflect.construct(t,r||[],gt(e).constructor):t.apply(e,r))}function bt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(bt=function(){return!!e})()}function gt(e){return gt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},gt(e)}function _t(e,t){return _t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_t(e,t)}var wt=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ht(this,t,arguments)}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_t(e,t)}(t,e),r=t,n=[{key:"render",value:function(){var e,t=this.props,r=t.checked,n=t.onlyRequiredEnabled,o=t.onToggle,i=t.name,a=t.lang,c=t.config,s=t.translations,l=t.title,u=t.description,f=t.visible,p=t.t,d=this.props.required||!1,v=this.props.optOut||!1,m=this.props.purposes||[],y="service-item-".concat(i),h="".concat(y,"-title"),b=m.map((function(e){return p(["!","purposes",e,"title?"])||it(e)})).join(", "),g=v?tt.createElement("span",{className:"cm-opt-out",title:p(["service","optOut","description"])},p(["service","optOut","title"])):"",_=d?tt.createElement("span",{className:"cm-required",title:p(["service","required","description"])},p(["service","required","title"])):"";m.length>0&&(e=tt.createElement("p",{className:"purposes"},p(["service",m.length>1?"purposes":"purpose"]),": ",b));var w=u||ft(s,a,"zz",["!","description"])||p(["!",i,"description?"]);return tt.createElement("div",null,tt.createElement("input",{id:y,className:"cm-list-input"+(d?" required":"")+(n?" half-checked only-required":""),"aria-labelledby":"".concat(h),"aria-describedby":"".concat(y,"-description"),disabled:d,checked:r||d,tabIndex:f?"0":"-1",type:"checkbox",onChange:function(e){o(e.target.checked)}}),tt.createElement("label",vt({htmlFor:y,className:"cm-list-label"},d?{tabIndex:"0"}:{}),tt.createElement("span",{className:"cm-list-title",id:"".concat(h)},l||ft(s,a,"zz",["!","title"])||p(["!",i,"title?"])||it(i)),_,g,tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(y,"-description")},w&&tt.createElement("p",{className:"cm-list-description"},tt.createElement(pt,{config:c,text:w})),e))}}],n&&mt(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function kt(e){return kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kt(e)}function St(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Et(n.key),n)}}function Et(e){var t=function(e,t){if("object"!=kt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=kt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==kt(t)?t:String(t)}function jt(e,t,r){return t=xt(t),function(e,t){if(t&&("object"===kt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Pt(e)}(e,Ot()?Reflect.construct(t,r||[],xt(e).constructor):t.apply(e,r))}function Ot(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ot=function(){return!!e})()}function xt(e){return xt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},xt(e)}function Pt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function At(e,t){return At=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},At(e,t)}function Ct(){return Ct=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Ct.apply(this,arguments)}var zt=function(e){var t=e.services,r=e.config,n=e.consents,o=e.lang,i=e.toggle,a=e.visible,c=e.t;return t.map((function(e){var t=n[e.name];return tt.createElement("li",{key:e.name,className:"cm-service"},tt.createElement(wt,Ct({checked:t||e.required,onToggle:function(t){i([e],t)},config:r,lang:o,visible:a,t:c},e)))}))},Nt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=jt(this,t,[e]),e.manager.watch(Pt(r)),r.state={consents:e.manager.consents},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&At(e,t)}(t,e),r=t,(n=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t,r){e===this.props.manager&&"consents"===t&&this.setState({consents:r})}},{key:"render",value:function(){var e=this.props,t=e.config,r=e.t,n=e.manager,o=e.lang,i=this.state.consents,a=t.services,c=function(e,t){e.map((function(e){e.required||n.updateConsent(e.name,t)}))},s=tt.createElement(zt,{config:t,lang:o,services:a,t:r,consents:i,toggle:c}),l=a.filter((function(e){return!e.required})),u=l.filter((function(e){return i[e.name]})).length,f=a.filter((function(e){return e.required})).length,p=u===l.length;return a.filter((function(e){return e.required})).length,tt.createElement("ul",{className:"cm-services"},s,!t.hideToggleAll&&l.length>1&&tt.createElement("li",{className:"cm-service cm-toggle-all"},tt.createElement(wt,{name:"disableAll",title:r(["service","disableAll","title"]),description:r(["service","disableAll","description"]),checked:p,config:t,onlyRequiredEnabled:!p&&f>0,onToggle:function(e){c(a,e)},lang:o,t:r})))}}])&&St(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function Tt(e){return Tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tt(e)}function It(){return It=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},It.apply(this,arguments)}function Rt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Dt(n.key),n)}}function Dt(e){var t=function(e,t){if("object"!=Tt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Tt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Tt(t)?t:String(t)}function Mt(e,t,r){return t=qt(t),function(e,t){if(t&&("object"===Tt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Ut()?Reflect.construct(t,r||[],qt(e).constructor):t.apply(e,r))}function Ut(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ut=function(){return!!e})()}function qt(e){return qt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},qt(e)}function Lt(e,t){return Lt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Lt(e,t)}var Bt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=Mt(this,t,[e])).state={servicesVisible:!1},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Lt(e,t)}(t,e),r=t,n=[{key:"render",value:function(){var e,t=this,r=this.props,n=r.allEnabled,o=r.onlyRequiredEnabled,i=r.allDisabled,a=r.services,c=r.config,s=r.onToggle,l=r.name,u=r.lang,f=r.manager,p=r.consents,d=r.title,v=r.description,m=r.t,y=this.state.servicesVisible,h=this.props.required||!1,b=this.props.purposes||[],g="purpose-item-".concat(l),_="".concat(g,"-title"),w=b.map((function(e){return m(["!","purposes",e,"title?"])||it(e)})).join(", "),k=h?tt.createElement("span",{className:"cm-required",title:m(["!","service","required","description"])||""},m(["service","required","title"])):"";b.length>0&&(e=tt.createElement("p",{className:"purposes"},m(["purpose",b.length>1?"purposes":"purpose"]),": ",w));var S=function(e){e.preventDefault();var r="false"!==e.currentTarget.getAttribute("aria-expanded");e.currentTarget.setAttribute("aria-expanded",!r),t.setState({servicesVisible:!y})},E=tt.createElement(zt,{config:c,lang:u,services:a,toggle:function(e,t){e.map((function(e){e.required||f.updateConsent(e.name,t)}))},consents:p,visible:y,t:m}),j=v||m(["!","purposes",l,"description"]);return tt.createElement(tt.Fragment,null,tt.createElement("input",{id:g,className:"cm-list-input"+(h?" required":"")+(n?"":o?" only-required":" half-checked"),"aria-labelledby":"".concat(_),"aria-describedby":"".concat(g,"-description"),disabled:h,checked:n||!i&&!o,type:"checkbox",onChange:function(e){s(e.target.checked)}}),tt.createElement("label",It({htmlFor:g,className:"cm-list-label"},h?{tabIndex:"0"}:{}),tt.createElement("span",{className:"cm-list-title",id:"".concat(_)},d||m(["!","purposes",l,"title?"])||it(l)),k,tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(g,"-description")},j&&tt.createElement("p",{className:"cm-list-description"},tt.createElement(pt,{config:c,text:j})),e),a.length>0&&tt.createElement("div",{className:"cm-services"},tt.createElement("div",{className:"cm-caret"},tt.createElement("a",{href:"#","aria-haspopup":"true","aria-expanded":"false",tabIndex:"0",onClick:S,onKeyDown:function(e){32===e.keyCode&&S(e)}},y&&tt.createElement("span",null,"↑")||tt.createElement("span",null,"↓")," ",a.length," ",m(["purposeItem",a.length>1?"services":"service"]))),tt.createElement("ul",{className:"cm-content"+(y?" expanded":"")},E)))}}],n&&Rt(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function Ft(e){return Ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ft(e)}function Ht(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return Vt(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Vt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function Vt(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Kt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Wt(n.key),n)}}function Wt(e){var t=function(e,t){if("object"!=Ft(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Ft(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ft(t)?t:String(t)}function $t(e,t,r){return t=Zt(t),function(e,t){if(t&&("object"===Ft(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Jt(e)}(e,Gt()?Reflect.construct(t,r||[],Zt(e).constructor):t.apply(e,r))}function Gt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Gt=function(){return!!e})()}function Zt(e){return Zt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Zt(e)}function Jt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Yt(e,t){return Yt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Yt(e,t)}var Qt=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=$t(this,t,[e]),e.manager.watch(Jt(r)),r.state={consents:e.manager.consents},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Yt(e,t)}(t,e),r=t,n=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t,r){e===this.props.manager&&"consents"===t&&this.setState({consents:r})}},{key:"render",value:function(){var e,t=this.props,r=t.config,n=t.t,o=t.manager,i=t.lang,a=this.state.consents,c=r.services,s={},l=Ht(c);try{for(l.s();!(e=l.n()).done;){var u,f=e.value,p=Ht(f.purposes);try{for(p.s();!(u=p.n()).done;){var d=u.value;void 0===s[d]&&(s[d]=[]),s[d].push(f)}}catch(e){p.e(e)}finally{p.f()}}}catch(e){l.e(e)}finally{l.f()}var v=function(e,t){e.map((function(e){var r,n=Ht(s[e]);try{for(n.s();!(r=n.n()).done;){var i=r.value;i.required||o.updateConsent(i.name,t)}}catch(e){n.e(e)}finally{n.f()}}))},m=function(e){var t,r={allEnabled:!0,onlyRequiredEnabled:!0,allDisabled:!0,allRequired:!0},n=Ht(e);try{for(n.s();!(t=n.n()).done;){var o=t.value;o.required||(r.allRequired=!1),a[o.name]?(o.required||(r.onlyRequiredEnabled=!1),r.allDisabled=!1):o.required||(r.allEnabled=!1)}}catch(e){n.e(e)}finally{n.f()}return r.allDisabled&&(r.onlyRequiredEnabled=!1),r},y=r.purposeOrder||[],h=Object.keys(s).sort((function(e,t){return y.indexOf(e)-y.indexOf(t)})).map((function(e){var t=m(s[e]);return tt.createElement("li",{key:e,className:"cm-purpose"},tt.createElement(Bt,{allEnabled:t.allEnabled,allDisabled:t.allDisabled,onlyRequiredEnabled:t.onlyRequiredEnabled,required:t.allRequired,consents:a,name:e,config:r,lang:i,manager:o,onToggle:function(t){v([e],t)},services:s[e],t:n}))})),b=Object.keys(s).filter((function(e){var t,r=Ht(s[e]);try{for(r.s();!(t=r.n()).done;)if(!t.value.required)return!0}catch(e){r.e(e)}finally{r.f()}return!1})),g=m(c);return tt.createElement("ul",{className:"cm-purposes"},h,b.length>1&&tt.createElement("li",{className:"cm-purpose cm-toggle-all"},tt.createElement(Bt,{name:"disableAll",title:n(["service","disableAll","title"]),description:n(["service","disableAll","description"]),allDisabled:g.allDisabled,allEnabled:g.allEnabled,onlyRequiredEnabled:g.onlyRequiredEnabled,onToggle:function(e){v(Object.keys(s),e)},manager:o,consents:a,config:r,lang:i,services:[],t:n})))}}],n&&Kt(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function Xt(e){return Xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xt(e)}function er(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,tr(n.key),n)}}function tr(e){var t=function(e,t){if("object"!=Xt(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Xt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Xt(t)?t:String(t)}function rr(e,t,r){return t=or(t),function(e,t){if(t&&("object"===Xt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,nr()?Reflect.construct(t,r||[],or(e).constructor):t.apply(e,r))}function nr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(nr=function(){return!!e})()}function or(e){return or=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},or(e)}function ir(e,t){return ir=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ir(e,t)}var ar=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),rr(this,t,arguments)}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ir(e,t)}(t,e),r=t,(n=[{key:"componentDidMount",value:function(){this.consentModalRef&&this.consentModalRef.focus()}},{key:"render",value:function(){var e,t,r,n=this,o=this.props,i=o.hide,a=o.confirming,c=o.saveAndHide,s=o.acceptAndHide,l=o.declineAndHide,u=o.config,f=o.manager,p=o.lang,d=o.t,v=u.embedded,m=void 0===u.groupByPurpose||u.groupByPurpose;u.mustConsent||(e=tt.createElement("button",{title:d(["close"]),"aria-label":d(["close"]),className:"hide",type:"button",onClick:i,tabIndex:"0",ref:function(e){n.consentModalRef=e}},tt.createElement(ot,{t:d}))),u.hideDeclineAll||f.confirmed||(t=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-decline cm-btn-danger cn-decline",type:"button",onClick:l},d(["decline"])));var y,h,b,g=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-success cm-btn-info cm-btn-accept",type:"button",onClick:c},d([f.confirmed?"save":"acceptSelected"]));u.acceptAll&&!f.confirmed&&(r=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-success cm-btn-accept-all",type:"button",onClick:s},d(["acceptAll"]))),void 0!==u.privacyPolicy?"string"==typeof u.privacyPolicy?y=u.privacyPolicy:"object"===Xt(u.privacyPolicy)&&(y=u.privacyPolicy[p]||u.privacyPolicy.default):void 0!==(y=d(["!","privacyPolicyUrl"],{lang:p}))&&(y=y.join("")),void 0!==y&&(h=tt.createElement("a",{key:"ppLink",href:y,target:"_blank",rel:"noopener"},d(["privacyPolicy","name"]))),b=m?tt.createElement(Qt,{t:d,config:u,manager:f,lang:p}):tt.createElement(Nt,{t:d,config:u,manager:f,lang:p});var _=tt.createElement("div",{className:"cm-modal cm-klaro"},tt.createElement("div",{className:"cm-header"},e,tt.createElement("h1",{className:"title"},tt.createElement(pt,{config:u,text:d(["consentModal","title"])})),tt.createElement("p",null,tt.createElement(pt,{config:u,text:[d(["consentModal","description"])].concat(h&&[" "].concat(d(["privacyPolicy","text"],{privacyPolicy:h}))||[])}))),tt.createElement("div",{className:"cm-body"},b),tt.createElement("div",{className:"cm-footer"},tt.createElement("div",{className:"cm-footer-buttons"},t,g,r),!u.disablePoweredBy&&tt.createElement("p",{className:"cm-powered-by"},tt.createElement("a",{target:"_blank",href:u.poweredBy||"https://kiprotect.com/klaro",rel:"noopener"},d(["poweredBy"])))));return v?tt.createElement("div",{id:"cookieScreen",className:"cookie-modal cm-embedded"},_):tt.createElement("div",{id:"cookieScreen",className:"cookie-modal"},tt.createElement("div",{className:"cm-bg",onClick:i}),_)}}])&&er(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function cr(e){return cr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},cr(e)}function sr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function lr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,yr(n.key),n)}}function ur(e,t,r){return t=pr(t),function(e,t){if(t&&("object"===cr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return dr(e)}(e,fr()?Reflect.construct(t,r||[],pr(e).constructor):t.apply(e,r))}function fr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(fr=function(){return!!e})()}function pr(e){return pr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},pr(e)}function dr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function vr(e,t){return vr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},vr(e,t)}function mr(e,t,r){return(t=yr(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function yr(e){var t=function(e,t){if("object"!=cr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=cr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==cr(t)?t:String(t)}r(2745);var hr=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),mr(dr(r=ur(this,t,[e])),"executeButtonClicked",(function(e,t,n){var o=r.state.modal,i=0;e&&(i=r.props.manager.changeAll(t));var a=r.props.manager.confirmed;if(r.props.manager.saveAndApplyConsents(n),e&&!a&&(o||r.props.config.mustConsent)){var c=function(){r.setState({confirming:!1}),r.props.hide()};r.setState({confirming:!0}),0===i?c():setTimeout(c,800)}else r.props.hide()})),mr(dr(r),"saveAndHide",(function(){r.executeButtonClicked(!1,!1,"save")})),mr(dr(r),"acceptAndHide",(function(){r.executeButtonClicked(!0,!0,"accept")})),mr(dr(r),"declineAndHide",(function(){r.executeButtonClicked(!0,!1,"decline")})),r.state={modal:e.modal,confirming:!1},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&vr(e,t)}(t,e),r=t,n=[{key:"componentDidUpdate",value:function(e){e.modal!==this.props.modal&&this.setState({modal:this.props.modal}),this.noticeRef&&this.noticeRef.focus()}},{key:"render",value:function(){var e,t,r,n=this,o=this.props,i=o.lang,a=o.config,c=o.show,s=o.manager,l=o.testing,u=o.t,f=this.state,p=f.confirming,d=f.modal,v=a.embedded,m=a.noticeAsModal,y=a.hideLearnMore,h=a.purposeOrder||[],b=function(e){for(var t=new Set([]),r=0;r<e.services.length;r++)for(var n=e.services[r].purposes||[],o=0;o<n.length;o++)t.add(n[o]);return Array.from(t)}(a).filter((function(e){return"functional"!==e})).sort((function(e,t){return h.indexOf(e)-h.indexOf(t)})),g=b.map((function(e){return u(["!","purposes",e,"title?"])||it(e)}));t=1===g.length?g[0]:[].concat((r=g.slice(0,-2),function(e){if(Array.isArray(e))return sr(e)}(r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return sr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?sr(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[g.slice(-2).join(" & ")]).join(", "),void 0!==a.privacyPolicy?"string"==typeof a.privacyPolicy?e=a.privacyPolicy:"object"===cr(a.privacyPolicy)&&(e=a.privacyPolicy[i]||a.privacyPolicy.default):void 0!==(e=u(["!","privacyPolicyUrl"],{lang:i}))&&(e=e.join(""));var _,w=function(e){e.preventDefault(),n.setState({modal:!0})};if(s.changed&&(_=tt.createElement("p",{className:"cn-changes"},u(["consentNotice","changeDescription"]))),!c&&!l&&!p)return tt.createElement("div",null);var k,S=(!a.mustConsent||m)&&!s.confirmed&&!a.noNotice,E=a.hideDeclineAll?"":tt.createElement("button",{className:"cm-btn cm-btn-danger cn-decline",type:"button",onClick:this.declineAndHide},u(["decline"])),j=a.acceptAll?tt.createElement("button",{className:"cm-btn cm-btn-success",type:"button",onClick:this.acceptAndHide},u(["ok"])):tt.createElement("button",{className:"cm-btn cm-btn-success",type:"button",onClick:this.saveAndHide},u(["ok"])),O=function(){return m?tt.createElement("button",{key:"learnMoreLink",className:"cm-btn cm-btn-lern-more cm-btn-info",type:"button",onClick:w},u(["consentNotice","learnMore"])):tt.createElement("a",{key:"learnMoreLink",className:"cm-link cn-learn-more",href:"#",onClick:w},u(["consentNotice","learnMore"]))};if(void 0!==e&&(k=tt.createElement("a",{key:"ppLink",href:e},u(["privacyPolicy","name"]))),d||s.confirmed&&!l||!s.confirmed&&a.mustConsent)return tt.createElement(ar,{t:u,lang:i,config:a,hide:function(){a.mustConsent&&!a.acceptAll||(s.confirmed&&!l?n.props.hide():n.setState({modal:!1}),setTimeout((function(){n.noticeRef&&n.noticeRef.focus()}),1))},confirming:p,declineAndHide:this.declineAndHide,saveAndHide:this.saveAndHide,acceptAndHide:this.acceptAndHide,manager:s});var x=tt.createElement("div",{role:"dialog","aria-describedby":"id-cookie-notice","aria-labelledby":"id-cookie-title",id:"klaro-cookie-notice",tabIndex:"0",autoFocus:!0,ref:function(e){n.noticeRef=e},className:"cookie-notice ".concat(S||l?"":"cookie-notice-hidden"," ").concat(m?"cookie-modal-notice":""," ").concat(v?"cn-embedded":"")},tt.createElement("div",{className:"cn-body"},u(["!","consentNotice","title"])&&tt.createElement("h2",{id:"id-cookie-title"},u(["consentNotice","title"])),tt.createElement("p",{id:"id-cookie-notice"},tt.createElement(pt,{config:a,text:u(["consentNotice","description"],{purposes:tt.createElement("strong",{key:"strong"},t),privacyPolicy:k,learnMoreLink:O()})})),l&&tt.createElement("p",null,u(["consentNotice","testing"])),_,tt.createElement("div",{className:"cn-ok"},!y&&O(),tt.createElement("div",{className:"cn-buttons"},E,j))));return m?tt.createElement("div",{id:"cookieScreen",className:"cookie-modal"},tt.createElement("div",{className:"cm-bg"}),x):x}}],n&&lr(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);function br(e){return br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},br(e)}function gr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,_r(n.key),n)}}function _r(e){var t=function(e,t){if("object"!=br(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=br(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==br(t)?t:String(t)}function wr(e,t,r){return t=Sr(t),function(e,t){if(t&&("object"===br(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Er(e)}(e,kr()?Reflect.construct(t,r||[],Sr(e).constructor):t.apply(e,r))}function kr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(kr=function(){return!!e})()}function Sr(e){return Sr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Sr(e)}function Er(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jr(e,t){return jr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},jr(e,t)}var Or=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=wr(this,t,[e]),e.manager.watch(Er(r)),r.state={show:e.show>0||!e.manager.confirmed},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&jr(e,t)}(t,e),r=t,(n=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t){e===this.props.manager&&"applyConsents"===t&&(!this.props.config.embedded&&this.props.manager.confirmed?this.setState({show:!1}):this.forceUpdate())}},{key:"notifyApi",value:function(){var e=this.props,t=e.api,r=e.modal,n=e.show,o=e.config;if(void 0!==t){if(r||n>0)return;this.props.manager.confirmed||this.props.manager.auxiliaryStore.getWithKey("shown-before")||(t.update(this,"showNotice",{config:o}),this.props.manager.auxiliaryStore.setWithKey("shown-before",!0))}}},{key:"componentDidMount",value:function(){this.notifyApi()}},{key:"componentDidUpdate",value:function(e){if(e.show!==this.props.show){this.notifyApi();var t=this.props.show>0||!this.props.manager.confirmed;t!==this.state.show&&this.setState({show:t})}}},{key:"render",value:function(){var e=this,t=this.props,r=t.config,n=t.t,o=t.lang,i=t.testing,a=t.manager,c=t.modal,s=this.state.show,l=r.additionalClass,u=r.embedded,f=r.stylePrefix;return tt.createElement("div",{lang:o,className:(f||"klaro")+(void 0!==l?" "+l:"")},tt.createElement(hr,{key:"app-"+this.props.show,t:n,testing:i,show:s,lang:o,modal:c,hide:function(){u||e.setState({show:!1})},config:r,manager:a}))}}])&&gr(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component),xr=r(2690);r(76),r(7132),r(4062);var Pr=r(5482);function Ar(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||Cr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cr(e,t){if(e){if("string"==typeof e)return zr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?zr(e,t):void 0}}function zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Nr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Tr(e){for(var t=new Map([]),r=0,n=Object.keys(e);r<n.length;r++){var o=n[r],i=e[o];"string"==typeof o&&("string"==typeof i||null===i?t.set(o,i):t.set(o,Tr(i)))}return t}function Ir(e,t,r,n){var o=function(e,t,r){if(r instanceof Map){var n=new Map([]);Ir(n,r,!0,!1),e.set(t,n)}else e.set(t,r)};if(!(t instanceof Map&&e instanceof Map))throw new Error("Parameters are not maps!");void 0===r&&(r=!0),void 0===n&&(n=!1),n&&(e=new e.constructor(e));var i,a=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return Nr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Nr(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}(t.keys());try{for(a.s();!(i=a.n()).done;){var c=i.value,s=t.get(c),l=e.get(c);if(e.has(c))if(s instanceof Map&&l instanceof Map)e.set(c,Ir(l,s,r,n));else{if(!r)continue;o(e,c,s)}else o(e,c,s)}}catch(e){a.e(e)}finally{a.f()}return e}var Rr={top:{_meta:{incompatibleWith:["bottom"]},"notice-top":"20px","notice-bottom":"auto"},bottom:{_meta:{incompatibleWith:["top"]},"notice-bottom":"20px","notice-top":"auto"},left:{_meta:{incompatibleWith:["wide"]},"notice-left":"20px","notice-right":"auto"},right:{_meta:{incompatibleWith:["wide"]},"notice-right":"20px","notice-left":"auto"},wide:{"notice-left":"20px","notice-right":"auto","notice-max-width":"calc(100vw - 60px)","notice-position":"fixed"},light:{"button-text-color":"#fff",dark1:"#fafafa",dark2:"#777",dark3:"#555",light1:"#444",light2:"#666",light3:"#111",green3:"#f00"}};function Dr(e){return Dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dr(e)}function Mr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Ur(n.key),n)}}function Ur(e){var t=function(e,t){if("object"!=Dr(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Dr(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Dr(t)?t:String(t)}function qr(e,t,r){return t=Br(t),function(e,t){if(t&&("object"===Dr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Lr()?Reflect.construct(t,r||[],Br(e).constructor):t.apply(e,r))}function Lr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Lr=function(){return!!e})()}function Br(e){return Br=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Br(e)}function Fr(e,t){return Fr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Fr(e,t)}new Map([]);var Hr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),qr(this,t,arguments)}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Fr(e,t)}(t,e),r=t,(n=[{key:"render",value:function(){return tt.createElement("div",null)}}])&&Mr(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component),Vr=["value","onChange"],Kr=["name","children","className","value","label","description","onChange"],Wr=["t","field","children","prefix","config","className","updateConfig"];function $r(e){return function(e){if(Array.isArray(e))return Gr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Gr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Gr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Zr(){return Zr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Zr.apply(this,arguments)}function Jr(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var Yr=function(e){var t=e.value,r=e.onChange,n=Jr(e,Vr);return tt.createElement("input",Zr({className:"cm-input",onChange:function(e){return r(e.target.value)},value:t},n))},Qr=function(e){var t=e.name,r=e.children,n=e.className,o=e.value,i=e.label,a=e.description,c=e.onChange,s=Jr(e,Kr);return tt.createElement("div",{className:"cm-retracting-label-input"+(n?" "+n:"")},tt.createElement(Yr,Zr({"aria-labelledby":t+"-label"},s,{value:o,onChange:c,className:"cm-input",placeholder:" "})),tt.createElement("span",{id:t+"-label","aria-hidden":"true",className:"cm-label"},i),tt.createElement("p",{className:"cm-description"},a),r)},Xr=function(e){var t=e.t,r=e.field,n=e.children,o=e.prefix,i=e.config,a=e.className,c=e.updateConfig,s=Jr(e,Wr);return tt.createElement(Qr,Zr({description:t(["fields"].concat($r(o||[]),[r.name,"description"])),value:i[r.name]||"",label:t(["fields"].concat($r(o||[]),[r.name,"label"]))},s,{className:a,name:r.name,onChange:function(e){return c([r.name],e)},children:n}))};Xr.propTypes={className:""},Xr.propTypes={className:nt().string},r(6281),r(9425),r(7456);var en=function(e){var t,r=e.search,n=e.disabled,o=e.label,i=e.description,a=e.onSelect,c=e.setSearch,s=e.candidates,l=s.slice(0,10).map((function(e){return tt.createElement("li",{onClick:function(){return a(e)},key:e.name,className:"cm-candidate"},e.value,e.description&&tt.createElement("p",null,e.description))}));return s.length>10&&l.push(tt.createElement("li",{key:"hasMore",className:"cm-candidate"},"...")),l.length>0&&(t=tt.createElement("ul",{className:"cm-candidates"},l)),tt.createElement("div",{className:"cm-search-select"},tt.createElement("form",{onSubmit:function(e){e.preventDefault(),a()}},tt.createElement("fieldset",{disabled:n},tt.createElement(Qr,{onChange:c,label:o,disabled:n,description:i,autoComplete:"off",value:r},t))))};function tn(e){return function(e){if(Array.isArray(e))return on(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||nn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||nn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nn(e,t){if(e){if("string"==typeof e)return on(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?on(e,t):void 0}}function on(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var an=function(e){var t=e.field,r=e.disabled,n=e.config,o=e.prefix,i=e.t,a=e.updateConfig,c=rn(ie(""),2),s=c[0],l=c[1],u=i.tv.languages,f=function(){return Array.from(Object.entries(u)).filter((function(e){var r=rn(e,1)[0];return!n[t.name].includes(r)})).map((function(e){var t=rn(e,2),r=t[0],n=t[1];return{name:r,value:"".concat(n.en," - ").concat(n[r]," (").concat(r,")")}}))},p=rn(ie(f()),2),d=p[0],v=p[1],m=rn(ie(!1),2),y=m[0],h=m[1],b=new Set(n[t.name]),g=n[t.name].map((function(e){return tt.createElement("li",{key:e},e,": ",i(["languages",e])," ",tt.createElement("a",{onClick:function(){a([t.name],n[t.name].filter((function(t){return t!==e}))),h(!0)}},"⤬"))}));return ce((function(){y&&(v(f()),h(!1))})),tt.createElement("div",{className:"cm-language-select"},tt.createElement("ul",{className:"cm-languages"},g),tt.createElement(en,{disabled:r,search:s,onSelect:function(e){n[t.name].find((function(t){return t===e.name}))||(n[t.name].push(e.name),a([t.name],n[t.name])),l(""),h(!0)},setSearch:function(e){var t=Array.from(Object.entries(u)).filter((function(e){var t=rn(e,2),r=t[0],n=t[1];return!b.has(r)&&(n[r].toLowerCase().includes(s.toLowerCase())||n.en.toLowerCase().includes(s.toLowerCase()))})),r=t.map((function(e){return{name:e[0],value:"".concat(e[1].en," - ").concat(e[1][e[0]]," (").concat(e[0],")")}}));r.length>10&&(r=[]),v(r),l(e)},candidates:d,label:i(["fields"].concat(tn(o||[]),[t.name,"label"])),description:i(["fields"].concat(tn(o||[]),[t.name,"description"]))}))},cn=function(e){var t=e.t,r=e.field,n=e.config,o=e.updateConfig,i=r.choices.map((function(e){return tt.createElement("option",{key:e,value:e},t(["fields",r.name,"title"]),": ",t(["fields",r.name,e]))}));return tt.createElement("div",{className:"cm-select"},tt.createElement("select",{value:n[r.name],onChange:function(e){return o([r.name],e.target.value)}},i),tt.createElement("p",{className:"cm-description"},t(["fields",r.name,"description"])))};function sn(e){return function(e){if(Array.isArray(e))return ln(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return ln(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ln(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ln(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var un=function(e){var t=e.t,r=e.field,n=e.prefix,o=e.config,i=e.updateConfig,a=r.name,c=o[a];return tt.createElement("div",{className:"cm-switch-container"},tt.createElement("input",{id:"fields-"+a,className:"cm-list-input","aria-describedby":"".concat(a,"-description"),checked:c,type:"checkbox",onChange:function(e){return i([a],e.target.checked)}}),tt.createElement("label",{htmlFor:"fields-"+a,className:"cm-list-label"},tt.createElement("span",{className:"cm-list-title"},t(["fields"].concat(sn(n||[]),[a,"label"]))),tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(a,"-description")},tt.createElement("p",{className:"cm-list-description"},t(["fields"].concat(sn(n||[]),[a,"description"])))))};function fn(e){return fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fn(e)}function pn(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,dn(n.key),n)}}function dn(e){var t=function(e,t){if("object"!=fn(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=fn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==fn(t)?t:String(t)}function vn(e,t,r){return t=yn(t),function(e,t){if(t&&("object"===fn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,mn()?Reflect.construct(t,r||[],yn(e).constructor):t.apply(e,r))}function mn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(mn=function(){return!!e})()}function yn(e){return yn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},yn(e)}function hn(e,t){return hn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},hn(e,t)}var bn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),vn(this,t,arguments)}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&hn(e,t)}(t,e),r=t,(n=[{key:"render",value:function(){return tt.createElement("div",null)}}])&&pn(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component),gn=["t","field","config","className","updateConfig"];function _n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var wn=function(e){var t=e.updateConfig,r=e.config,n=e.cookie,o=e.t,i=function(e,o){var i;t(["services",r._id,"cookies",n._id].concat(function(e){if(Array.isArray(e))return _n(e)}(i=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||function(e,t){if(e){if("string"==typeof e)return _n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_n(e,t):void 0}}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o)},a=["pattern","path","domain"].map((function(e){return tt.createElement(Xr,{key:e,t:o,field:{name:e},config:n,prefix:["cookies"],updateConfig:i})}));return tt.createElement("div",{className:"cm-cookie-form"},tt.createElement("fieldset",null,a),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("div",{className:"cm-control"}),tt.createElement("button",{className:"cm-control-button cm-delete",onClick:function(){return t(["services",r._id,"cookies",n._id],null)}},o(["cookies","delete"]))))},kn=function(e){var t=e.t,r=(e.field,e.config),n=(e.className,e.updateConfig),o=(function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}}(e,gn),r.cookies.map((function(e){return tt.createElement(wn,{t,config:r,key:e._id,cookie:e,updateConfig:n})})));return 0===o.length&&(o=tt.createElement("p",{className:"cm-no-cookies"},t(["cookies","noCookies"]))),tt.createElement("div",{className:"cm-cookie-config"},tt.createElement("h3",null,t(["cookies","title"])),tt.createElement("div",{className:"cm-cookie-forms"},o),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement("button",{className:"cm-control-button",onClick:function(){return n(["services",r._id,"cookies",null],{})}},t(["cookies","add"])))))};function Sn(e){return function(e){if(Array.isArray(e))return On(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||jn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function En(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||jn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jn(e,t){if(e){if("string"==typeof e)return On(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?On(e,t):void 0}}function On(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var xn=function(e){var t=e.field,r=e.disabled,n=e.prefix,o=e.config,i=e.t,a=e.updateConfig,c=En(ie(""),2),s=c[0],l=c[1],u=En(ie(!1),2),f=u[0],p=u[1],d=i.tv.purposes,v=new Set(o[t.name]),m=function(){return Array.from(Object.entries(d)).filter((function(e){var t=En(e,1)[0];return!v.has(t)})).map((function(e){var t=En(e,2),r=t[0],n=t[1];return{name:r,description:i(["purposes",r,"description"]),value:"en"===i.lang?"".concat(n.title.en):"".concat(n.title.en," - ").concat(i(["purposes",r,"title"]))}}))},y=En(ie(m()),2),h=y[0],b=y[1],g=o[t.name].map((function(e){return tt.createElement("li",{key:e},e," ",tt.createElement("a",{onClick:function(){p(!0),a([t.name],o[t.name].filter((function(t){return t!==e})))}},"⤬"))}));return ce((function(){f&&(b(m()),p(!1))})),tt.createElement("div",{className:"cm-purpose-select"},tt.createElement("ul",{className:"cm-purposes"},g),tt.createElement(en,{disabled:r,search:s,onSelect:function(e){o[t.name].find((function(t){return t===e.name}))||(o[t.name].push(e.name),a([t.name],o[t.name])),l(""),p(!0)},setSearch:function(e){var t=Array.from(Object.entries(d)).filter((function(t){var r=En(t,2),n=r[0];return r[1],!v.has(n)&&(""===e||n.toLowerCase().includes(s.toLowerCase())||i(["purposes",n,"title"]).toLowerCase().includes(s.toLowerCase()))})),r=t.map((function(e){return{name:e[0],description:i(["purposes",e[0],"description"]),value:"".concat(e[1].title.en," - ").concat(i(["purposes",e[0],"title"]))}}));r.length>10&&(r=[]),""!==e&&r.push({name:e,description:i(["purpose","descriptionNotice"]),value:"".concat(e," (").concat(i(["purpose","add"]),")")}),b(r),l(e)},candidates:h,label:i(["fields"].concat(Sn(n||[]),[t.name,"label"])),description:i(["fields"].concat(Sn(n||[]),[t.name,"description"]))}))};function Pn(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return An(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?An(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function An(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Cn(e,t,r){var n=e[t];if(void 0!==n){var o,i=Pn(r);try{for(i.s();!(o=i.n()).done;){var a=o.value;if(void 0===n)return;n=n[a]}}catch(e){i.e(e)}finally{i.f()}return n}}function zn(e,t,r){var n,o=e,i=Pn(r);try{for(i.s();!(n=i.n()).done;){var a=n.value;if(void 0===o)break;o=o[a]}}catch(e){i.e(e)}finally{i.f()}return void 0!==o&&(o=o[t]),o}function Nn(e){return function(e){if(Array.isArray(e))return Rn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||In(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||In(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function In(e,t){if(e){if("string"==typeof e)return Rn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Rn(e,t):void 0}}function Rn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Dn=function(e){var t=e.field,r=e.services,n=e.prefix,o=(e.config,e.t),i=e.updateConfig,a=Tn(ie(""),2),c=a[0],s=a[1],l=Tn(ie(!1),2),u=l[0],f=l[1],p=function(e){return Cn(e.spec.translations||{},o.lang,["title"])||Cn(e.spec.translations||{},"zz",["title"])||it(e.name)},d=function(e){return e.sort((function(e,t){return p(e)>p(t)?1:-1})).map((function(e){return{service:e,name:e.name,value:p(e)}}))},v=Tn(ie(d(r)),2),m=v[0],y=v[1];return ce((function(){u&&(y(d(r)),f(!1))})),tt.createElement("div",{className:"cm-service-select"},tt.createElement(en,{search:c,onSelect:function(e){if(void 0===e){if(!(""!==e&&m.length>0))return;e=m[0]}i(["services",null],e.service.spec),s(""),f(!0)},setSearch:function(e){var t,n=d((t=e)?r.filter((function(e){return p(e).toLowerCase().includes(t.toLowerCase())})):r);""!==e&&n.unshift({name:e,service:{spec:{name:e,cookies:[],purposes:[],requests:[],version:1}},value:"".concat(e," (").concat(o(["fields","services","addNew"]),")")}),y(n),s(e)},candidates:m,label:o(["fields"].concat(Nn(n||[]),[t.name,"label"])),description:o(["fields"].concat(Nn(n||[]),[t.name,"description"]))}))};function Mn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Un=function(e){var t=e.t,r=e.config,n=e.updateConfig,o=new Set,i=r.purposeOrder||[];r.services.forEach((function(e){return e.purposes.forEach((function(e){return o.add(e)}))}));var a=Array.from(o.values()).sort((function(e,t){return i.indexOf(e)-i.indexOf(t)}));o.forEach((function(e){-1===i.indexOf(e)&&i.push(e)}));var c=function(e,t){var r,o=i.indexOf(e),a=function(e){if(Array.isArray(e))return Mn(e)}(r=i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Mn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Mn(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(!(0===o&&-1===t||o===i.length-1&&1===t)){var c=a[o+t];a[o+t]=e,a[o]=c,n(["purposeOrder"],a)}},s=a.map((function(e){var n=Cn(r.translations,t.lang,["purposes",e,"title"]),o=zn(t.tv,t.lang,["purposes",e,"title"]);return tt.createElement("li",{key:e},tt.createElement("span",{className:"cm-buttons"},tt.createElement("a",{className:"cm-btn",onClick:function(){return c(e,-1)}},"↑"),tt.createElement("a",{className:"cm-btn",onClick:function(){return c(e,1)}},"↓")),tt.createElement("span",{className:"cm-value"},n||o||e))}));return tt.createElement("div",{className:"cm-purpose-order"},tt.createElement("h3",null,t(["purposeOrder","title"])),tt.createElement("p",{className:"cm-description"},t(["purposeOrder","description"])),tt.createElement("ul",null,s))};function qn(e){return function(e){if(Array.isArray(e))return Fn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Bn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ln(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||Bn(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bn(e,t){if(e){if("string"==typeof e)return Fn(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Fn(e,t):void 0}}function Fn(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var Hn=function(e){var t=e.field,r=e.disabled,n=e.prefix,o=e.config,i=e.t,a=e.updateConfig,c=Ln(ie(""),2),s=c[0],l=c[1],u=Ln(ie(!1),2),f=u[0],p=u[1],d=i.tv.themes,v=new Set(o[t.name]||[]),m=function(){return Array.from(Object.entries(d)).filter((function(e){var t=Ln(e,1)[0];return!v.has(t)})).map((function(e){var t=Ln(e,2),r=t[0],n=t[1];return{name:r,description:i(["themes",r,"description"]),value:"en"===i.lang?"".concat(n.title.en):"".concat(n.title.en," - ").concat(i(["themes",r,"title"]))}}))},y=Ln(ie(m()),2),h=y[0],b=y[1],g=Array.from(v).map((function(e){return tt.createElement("li",{key:e},e," ",tt.createElement("a",{onClick:function(){p(!0),a([t.name],o[t.name].filter((function(t){return t!==e})))}},"⤬"))}));return ce((function(){f&&(b(m()),p(!1))})),tt.createElement("div",{className:"cm-theme-select"},tt.createElement("ul",{className:"cm-themes"},g),tt.createElement(en,{disabled:r,search:s,onSelect:function(e){var r=o[t.name]||[];r.find((function(t){return t===e.name}))||(r.push(e.name),a([t.name],r)),l(""),p(!0)},setSearch:function(e){var t=Array.from(Object.entries(d)).filter((function(t){var r=Ln(t,2),n=r[0];return r[1],!v.has(n)&&(""===e||n.toLowerCase().includes(s.toLowerCase())||i(["themes",n,"title"]).toLowerCase().includes(s.toLowerCase()))})),r=t.map((function(e){return{name:e[0],description:i(["themes",e[0],"description"]),value:"".concat(i(["themes",e[0],"title"]))}}));r.length>10&&(r=r.slice(0,10)),b(r),l(e)},candidates:h,label:i(["fields"].concat(qn(n||[]),[t.name,"label"])),description:i(["fields"].concat(qn(n||[]),[t.name,"description"]))}))},Vn=r(4452),Kn=r.n(Vn),Wn=function(e){var t=e.className,r=e.children;return tt.createElement("div",{className:Kn()("cm-list",t)},r)},$n=function(e){var t=e.children;return tt.createElement("div",{className:"cm-item cm-is-header"},t)},Gn=function(e){var t=e.children,r=e.size,n=void 0===r?"md":r;return tt.createElement("div",{className:"cm-col cm-is-".concat(n)},t)},Zn=function(e){var t=e.children,r=e.isCard,n=void 0===r||r,o=e.onClick;return tt.createElement("div",{className:Kn()("cm-item",{"cm-is-card":n,"cm-is-clickable":o}),onClick:function(e){return o()}},t)};function Jn(e){return Jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jn(e)}function Yn(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,no(n.key),n)}}function Qn(e,t,r){return t=eo(t),function(e,t){if(t&&("object"===Jn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return to(e)}(e,Xn()?Reflect.construct(t,r||[],eo(e).constructor):t.apply(e,r))}function Xn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Xn=function(){return!!e})()}function eo(e){return eo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},eo(e)}function to(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ro(e,t){return ro=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ro(e,t)}function no(e){var t=function(e,t){if("object"!=Jn(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Jn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Jn(t)?t:String(t)}Zn.propTypes={children:nt().node,isCard:nt().bool,onClick:nt().func};var oo=function(e){var t=e.children;return tt.createElement(ao,{title:tt.createElement("span",{className:"cm-icon"},"…")},tt.createElement("ul",{className:"cm-dropdownmenu"},t))};oo.propTypes={children:nt().node};var io=function(e){var t=e.icon,r=e.children,n=e.onClick;return tt.createElement("li",null,tt.createElement("a",{onClick:function(e){e.preventDefault(),e.stopPropagation(),n()}},t&&tt.createElement("span",{className:"cm-icon"},t),tt.createElement("span",null,r)))};io.propTypes={children:nt().node,icon:nt().string,onClick:nt().func.isRequired};var ao=function(e){function t(e){var r,n,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=to(r=Qn(this,t,[e])),i=function(e){var t=r.state.expanded;e.preventDefault(),e.stopPropagation(),t?r.hide():r.show()},(o=no(o="handleToggle"))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i,r.state={expanded:!1,right:!1},r.ref=tt.createRef(),r.handler=function(e){return r.handleClick(e)},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ro(e,t)}(t,e),r=t,n=[{key:"hide",value:function(){this.setState({expanded:!1}),document.removeEventListener("click",this.handler,!1)}},{key:"show",value:function(){this.setState({expanded:!0}),document.addEventListener("click",this.handler,!1)}},{key:"handleClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.hide()}},{key:"componentWillUnmount",value:function(){this.hide()}},{key:"componentDidMount",value:function(){this.ref.current.getBoundingClientRect().left>.5*window.innerWidth&&this.setState({right:!0})}},{key:"render",value:function(){var e=this.state,t=e.expanded,r=e.right,n=this.props,o=n.title,i=n.children;return tt.createElement("div",{ref:this.ref,className:Kn()("cm-dropdown",{"is-right":r})},tt.createElement("button",{"aria-expanded":t,type:"button",tabIndex:"0",onClick:this.handleToggle},o),tt.createElement("div",{className:Kn()("cm-dropdowncontent",{"cm-dropdownexpanded":t})},i))}}],n&&Yn(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component);ao.propTypes={children:nt().node,title:nt().node.isRequired};const co={cookieConfig:[{name:"pattern",control:"RetractingLabelInput",validators:[]},{name:"path",control:"RetractingLabelInput",validators:[]},{name:"domain",control:"RetractingLabelInput",validators:[]}],serviceConfig:[{name:"name",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"purposes",control:"PurposeSelect",validators:[],default:"klaro"},{name:"default",control:"Switch",validators:[],default:!0},{name:"required",control:"Switch",validators:[],default:!1},{control:"Switch",validators:[],default:!1},{name:"optOut",control:"Switch",validators:[],default:!1},{name:"onlyOnce",control:"Switch",default:!1,validators:[]},{name:"cookies",control:"Cookies",validators:[]}],styling:[{name:"theme",control:"ThemesSelect",validators:[],default:[]}],globals:[{name:"languages",control:"LanguageSelect",validators:[],default:""},{name:"elementID",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"additionalClass",control:"RetractingLabelInput",validators:[],default:""},{name:"storageMethod",control:"Select",choices:["cookie","localStorage"],validators:[],default:"cookie"},{name:"storageName",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"cookieDomain",applicable:function(e){return"cookie"===e.storageMethod},control:"RetractingLabelInput",validators:[],default:""},{name:"cookiePath",applicable:function(e){return"cookie"===e.storageMethod},control:"RetractingLabelInput",validators:[],default:""},{name:"htmlTexts",control:"Switch",validators:[],default:!1},{name:"embedded",control:"Switch",validators:[],default:!1},{name:"groupByPurpose",control:"Switch",validators:[],default:!0},{name:"cookieExpiresAfterDays",applicable:function(e){return"cookie"===e.storageMethod},control:"Range",controlProps:{min:0,max:356},validators:[],default:60},{name:"privacyPolicy",control:"I18nInput",validators:[],controlProps:{default:!0}},{name:"default",control:"Switch",validators:[],default:!1},{name:"mustConsent",control:"Switch",validators:[],default:!1},{name:"acceptAll",control:"Switch",validators:[],default:!0},{name:"hideDeclineAll",control:"Switch",validators:[],default:!1},{name:"hideLearnMore",control:"Switch",validators:[],default:!1},{name:"hideToggleAll",control:"Switch",validators:[],default:!1},{name:"noticeAsModal",control:"Switch",validators:[],default:!1},{name:"disablePoweredBy",control:"Switch",validators:[],default:!1},{name:"purposeOrder",control:"PurposeOrder",validators:[],default:[]}],groups:{}};function so(e){return so="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},so(e)}function lo(e,t,r){return t=function(e){var t=function(e,t){if("object"!=so(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=so(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==so(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function uo(){return uo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},uo.apply(this,arguments)}function fo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var po=function(e){var t=e.t,r=e.service,n=e.onClick,o=e.updateConfig;return tt.createElement(Zn,{onClick:function(){return n(r)},isCard:!0,key:r._id},tt.createElement(Gn,{size:"md"},tt.createElement("p",{className:"cm-name"},r.name)),tt.createElement(Gn,{size:"icon"},tt.createElement(oo,null,tt.createElement(io,{onClick:function(){return o(["services",r._id],null)}},t(["services","delete"])))))},vo=function(e){var t=e.t,r=e.config,n=(e.disabled,e.onClick),o=e.updateConfig,i=r.services.map((function(e){return tt.createElement(po,{key:e._id,updateConfig:o,onClick:n,t,service:e})}));return tt.createElement(tt.Fragment,null,i.length>0&&tt.createElement(Wn,{className:"cm-service-list"},tt.createElement($n,null,tt.createElement(Gn,{size:"md"},t(["services","name"])),tt.createElement(Gn,{size:"icon"},t(["menu"]))),i)||tt.createElement("p",{className:"cm-no-services"},t(["services","noServices"])))},mo=function(e){var t=e.t,r=e.setState,n=e.service,o=e.updateServiceName,i=e.updateConfig;return void 0===n?tt.createElement("div",null):tt.createElement("div",{className:"cm-service-details"},tt.createElement(yo,{setState:r,service:n,updateServiceName:o,t,updateConfig:i}))},yo=function(t){var r=t.service,n=t.setState,o=t.updateServiceName,i=t.disabled,a=t.updateConfig,c=t.t,s=co.serviceConfig.map((function(t){var n=e[t.control];return tt.createElement(n,uo(lo(lo({disabled:i,key:t.name,prefix:["services"],updateConfig:function(e,t){var n;a(["services",r._id].concat(function(e){if(Array.isArray(e))return fo(e)}(n=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return fo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?fo(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),t),"name"===e[0]&&o(t)},config:r,t:c},"key",t.name),"field",t),t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("fieldset",{className:"cm-service-fields",disabled:i},tt.createElement("h2",null,tt.createElement("a",{onClick:function(){n({service:void 0})}},c(["services","title"])," ›")," ",r.name),s))};function ho(e){return ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ho(e)}function bo(e,t,r){return t=function(e){var t=function(e,t){if("object"!=ho(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=ho(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==ho(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function go(){return go=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},go.apply(this,arguments)}const _o={ca:{acceptAll:"Accepta-les totes",acceptSelected:"Accepta les escollides",service:{disableAll:{description:"Useu aquest botó per a habilitar o deshabilitar totes les aplicacions.",title:"Habilita/deshabilita totes les aplicacions"},optOut:{description:"Aquesta aplicació es carrega per defecte, però podeu desactivar-la",title:"(opt-out)"},purpose:"Finalitat",purposes:"Finalitats",required:{description:"Aquesta aplicació es necessita sempre",title:"(necessària)"}},close:"Tanca",consentModal:{description:"Aquí podeu veure i personalitzar la informació que recopilem sobre vós.",privacyPolicy:{name:"política de privadesa",text:"Per a més informació, consulteu la nostra {privacyPolicy}."},title:"Informació que recopilem"},consentNotice:{changeDescription:"Hi ha hagut canvis des de la vostra darrera visita. Actualitzeu el vostre consentiment.",description:"Recopilem i processem la vostra informació personal amb les següents finalitats: {purposes}.",imprint:{name:"Empremta"},learnMore:"Saber-ne més",privacyPolicy:{name:"política de privadesa"}},decline:"Rebutja",ok:"Accepta",poweredBy:"Funciona amb Klaro!",purposeItem:{service:"aplicació",services:"aplicacions"},save:"Desa"},cs:{privacyPolicy:{name:"zásady ochrany soukromí",text:'Pro další informace si přečtete naše <tr-hint v="privacy policy">{privacyPolicy}</tr-hint>.'},consentModal:{title:"Služby, které bychom rádi využili",description:"Zde můžete posoudit a přizpůsobit služby, které bychom rádi na tomto webu používali. Máte to pod kontrolou! Povolte nebo zakažte služby, jak uznáte za vhodné."},consentNotice:{testing:"Testing mode!",changeDescription:"Od vaší poslední návštěvy došlo ke změnám, obnovte prosím svůj souhlas.",description:"„Dobrý den! Můžeme povolit některé další služby pro {purposes}? Svůj souhlas můžete kdykoliv změnit nebo odvolat.“","learnMore|capitalize":"Vyberu si"},účely:{functional:{"title|capitalize":"Poskytování služeb",description:"Tyto služby jsou nezbytné pro správné fungování tohoto webu. Nelze je zde deaktivovat, protože služba by jinak nefungovala správně.\n"},performance:{"title|capitalize":"Optimalizace výkonu",description:"V rámci těchto služeb jsou zpracovávány osobní údaje za účelem optimalizace služeb, které jsou na tomto webu poskytovány.\n"},marketing:{"title|capitalize":"Marketing",description:"V rámci těchto služeb jsou zpracovávány osobní údaje, aby se vám zobrazoval relevantní obsah o produktech, službách nebo tématech, které by vás mohly zajímat."},advertising:{"title|capitalize":"Reklama",description:"V rámci těchto služeb jsou zpracovávány osobní údaje, aby vám zobrazovaly personalizované nebo zájmově orientované reklamy."}},purposeItem:{service:"Jednoduchá služba <tr-snip></tr-snip> , kterou nainstaluji do svého počítače.",services:"Několik jednoduchých služeb <tr-snip></tr-snip> , které nainstaluji do svého počítače."},"ok|capitalize":"To je v pořádku",save:"uložit","decline|capitalize":"Nepřijímám",close:"zavřít",acceptAll:"přijmout vše",acceptSelected:"přijmout vybrané",service:{disableAll:{title:"povolit nebo zakázat všechny služby",description:"Pomocí tohoto přepínače můžete povolit nebo zakázat všechny služby."},optOut:{title:"(opt-out)",description:"Tato služba se načítá ve výchozím nastavení (ale můžete ji zrušit)"},required:{title:"(vždy vyžadováno)",description:"Tato služba je vždy vyžadována"},purposes:"Zpracování  pro účely <tr-snip></tr-snip>",purpose:"Zpracování pro účely <tr-snip></tr-snip>"},poweredBy:"Realizováno pomocí Klaro!",contextualConsent:{description:"Chcete načíst externí obsah dodávaný prostřednictvím {title}?",acceptOnce:"Ano",acceptAlways:"Vždy"}},da:{acceptAll:"Tillad alle",acceptSelected:"Tillad udvalgte",service:{disableAll:{description:"Brug denne kontakt til at aktivere/deaktivere alle apps.",title:"Aktiver/deaktiver alle applikatione"},optOut:{description:"Denne applikation indlæses som standard (men du kan deaktivere den)",title:"Opt-Out"},purpose:"Formål",purposes:"Formål",required:{description:"Denne applikation er altid nødvendig",title:"(Altid nødvendig)"}},close:"Luk",consentModal:{description:"Her kan du se og ændre, hvilke informationer vi gemmer om dig.",privacyPolicy:{name:"Flere informationer finde du under {privacyPolicy}",text:"databeskyttelseserklæring."},title:"Informationer, som vi gemmer"},consentNotice:{changeDescription:"Der har været ændringer siden dit sidste besøg. Opdater dit valg.",description:"Vi gemmer og behandler dine personlige oplysninger til følgende formål: {purposes}.",imprint:{name:""},learnMore:"Læs mere",privacyPolicy:{name:"Datenschutzerklärung"}},decline:"Afvis",ok:"Ok",poweredBy:"Realiseret med Klaro!",purposeItem:{service:"",services:""},save:"Gem"},de:{acceptAll:"Alle akzeptieren",acceptSelected:"Ausgewählte akzeptieren",close:"Schließen",consentModal:{description:"Hier können Sie die Dienste, die wir auf dieser Website nutzen möchten, bewerten und anpassen. Sie haben das Sagen! Aktivieren oder deaktivieren Sie die Dienste, wie Sie es für richtig halten.",privacyPolicy:{name:"Datenschutzerklärung",text:"Um mehr zu erfahren, lesen Sie bitte unsere {privacyPolicy}."},title:"Dienste, die wir nutzen möchten"},consentNotice:{changeDescription:"Seit Ihrem letzten Besuch gab es Änderungen, bitte erneuern Sie Ihre Zustimmung.",title:"Cookie-Einstellungen",description:"Hallo! Könnten wir bitte einige zusätzliche Dienste für {purposes} aktivieren? Sie können Ihre Zustimmung später jederzeit ändern oder zurückziehen.",imprint:{name:"Impressum"},learnMore:"Lassen Sie mich wählen",privacyPolicy:{name:"Datenschutzerklärung"},testing:"Testmodus!"},contextualConsent:{acceptAlways:"Immer",acceptOnce:"Ja",description:"Möchten Sie von {title} bereitgestellte externe Inhalte laden?",descriptionEmptyStore:"Um diesem Dienst dauerhaft zustimmen zu können, müssen Sie {title} in den {link} zustimmen.",modalLinkText:"Cookie-Einstellungen"},decline:"Ich lehne ab",ok:"Das ist ok",poweredBy:"Realisiert mit Klaro!",privacyPolicy:{name:"Datenschutzerklärung",text:"Um mehr zu erfahren, lesen Sie bitte unsere {privacyPolicy}."},purposeItem:{service:"Dienst",services:"Dienste"},purposes:{advertising:{description:"Diese Dienste verarbeiten persönliche Informationen, um Ihnen personalisierte oder interessenbezogene Werbung zu zeigen.",title:"Werbung"},functional:{description:"Diese Dienste sind für die korrekte Funktion dieser Website unerlässlich. Sie können sie hier nicht deaktivieren, da der Dienst sonst nicht richtig funktionieren würde.\n",title:"Dienstbereitstellung"},marketing:{description:"Diese Dienste verarbeiten persönliche Daten, um Ihnen relevante Inhalte über Produkte, Dienstleistungen oder Themen zu zeigen, die Sie interessieren könnten.",title:"Marketing"},performance:{description:"Diese Dienste verarbeiten personenbezogene Daten, um den von dieser Website angebotenen Service zu optimieren.\n",title:"Optimierung der Leistung"}},save:"Speichern",service:{disableAll:{description:"Mit diesem Schalter können Sie alle Dienste aktivieren oder deaktivieren.",title:"Alle Dienste aktivieren oder deaktivieren"},optOut:{description:"Diese Dienste werden standardmäßig geladen (Sie können sich jedoch abmelden)",title:"(Opt-out)"},purpose:"Zweck",purposes:"Zwecke",required:{description:"Dieser Service ist immer erforderlich",title:"(immer erforderlich)"}}},el:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Χρησιμοποίησε αυτό τον διακόπτη για να ενεργοποιήσεις/απενεργοποιήσεις όλες τις εφαρμογές.",title:"Για όλες τις εφαρμογές"},optOut:{description:"Είναι προκαθορισμένο να φορτώνεται, άλλα μπορεί να παραληφθεί",title:"(μη απαιτούμενο)"},purpose:"Σκοπός",purposes:"Σκοποί",required:{description:"Δεν γίνεται να λειτουργήσει σωστά η εφαρμογή χωρίς αυτό",title:"(απαιτούμενο)"}},close:"Κλείσιμο",consentModal:{description:"Εδώ μπορείς να δεις και να ρυθμίσεις τις πληροφορίες που συλλέγουμε σχετικά με εσένα.",privacyPolicy:{name:"Πολιτική Απορρήτου",text:"Για περισσότερες πληροφορίες, παρακαλώ διαβάστε την {privacyPolicy}."},title:"Πληροφορίες που συλλέγουμε"},consentNotice:{changeDescription:"Πραγματοποιήθηκαν αλλαγές μετά την τελευταία σας επίσκεψη παρακαλούμε ανανεώστε την συγκατάθεση σας.",description:"Συγκεντρώνουμε και επεξεργαζόμαστε τα προσωπικά δεδομένα σας για τους παρακάτω λόγους: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Περισσότερα",privacyPolicy:{name:"Πολιτική Απορρήτου"}},decline:"Απόρριπτω",ok:"OK",poweredBy:"Υποστηρίζεται από το Klaro!",purposeItem:{service:"",services:""},save:"Αποθήκευση"},en:{acceptAll:"Accept all",acceptSelected:"Accept selected",close:"Close",consentModal:{description:"Here you can assess and customize the services that we'd like to use on this website. You're in charge! Enable or disable services as you see fit.",title:"Services we would like to use"},consentNotice:{changeDescription:"There were changes since your last visit, please renew your consent.",title:"Cookie Consent",description:"Hi! Could we please enable some additional services for {purposes}? You can always change or withdraw your consent later.",learnMore:"Let me choose",testing:"Testing mode!"},contextualConsent:{acceptAlways:"Always",acceptOnce:"Yes",description:"Do you want to load external content supplied by {title}?",descriptionEmptyStore:"To agree to this service permanently, you must accept {title} in the {link}.",modalLinkText:"Consent Manager"},decline:"I decline",ok:"That's ok",poweredBy:"Realized with Klaro!",privacyPolicy:{name:"privacy policy",text:"To learn more, please read our {privacyPolicy}."},purposeItem:{service:"service",services:"services"},purposes:{advertising:{description:"These services process personal information to show you personalized or interest-based advertisements.",title:"Advertising"},functional:{description:"These services are essential for the correct functioning of this website. You cannot disable them here as the service would not work correctly otherwise.\n",title:"Service Provision"},marketing:{description:"These services process personal information to show you relevant content about products, services or topics that you might be interested in.",title:"Marketing"},performance:{description:"These services process personal information to optimize the service that this website offers.\n",title:"Performance Optimization"}},save:"Save",service:{disableAll:{description:"Use this switch to enable or disable all services.",title:"Enable or disable all services"},optOut:{description:"This services is loaded by default (but you can opt out)",title:"(opt-out)"},purpose:"purpose",purposes:"purposes",required:{description:"This services is always required",title:"(always required)"}}},zh:{acceptAll:"照单全收",acceptSelected:"接受选择",close:"密切",consentModal:{description:"在这里，您可以评估和定制我们希望在本网站上使用的服务。您是负责人！您可以根据自己的需要启用或禁用服务。启用或禁用您认为合适的服务。",privacyPolicy:{name:"隐私政策",text:"要了解更多，请阅读我们的{privacyPolicy} 。"},title:"我们想使用的服务"},consentNotice:{changeDescription:"自上次访问后有变化，请更新您的同意。",description:"你好！我们可以为{purposes} 启用一些额外的服务吗？您可以随时更改或撤回您的同意。",imprint:{name:"印记"},learnMore:"让我来选",privacyPolicy:{name:"隐私政策"},testing:"测试模式！"},contextualConsent:{acceptAlways:"总是",acceptOnce:"是的，是的",description:"你想加载由{title} 提供的外部内容吗？"},decline:"我拒绝",ok:"没事的",poweredBy:"与Klaro一起实现!",privacyPolicy:{name:"隐私政策",text:"要了解更多，请阅读我们的{privacyPolicy} 。"},purposeItem:{service:"服务",services:"服务"},purposes:{advertising:{description:"这些服务处理个人信息，向您展示个性化或基于兴趣的广告。",title:"广告宣传"},functional:{description:"这些服务对于本网站的正常运行是必不可少的。您不能在这里禁用它们，否则服务将无法正常运行。\n",title:"服务提供"},marketing:{description:"这些服务会处理个人信息，向您展示您可能感兴趣的产品、服务或主题的相关内容。",title:"市场营销"},performance:{description:"这些服务处理个人信息是为了优化本网站提供的服务。\n",title:"性能优化"}},save:"挽救",service:{disableAll:{description:"使用此开关可启用或禁用所有服务。",title:"启用或停用所有服务"},optOut:{description:"这个服务是默认加载的(但你可以选择退出)",title:"(选择退出)"},purpose:"目的",purposes:"目的",required:{description:"这种服务是必须的",title:"(总是需要)"}}},pt:{acceptAll:"Aceitar todos",acceptSelected:"Aceitar selecionados",close:"Fechar",consentModal:{description:"Aqui você pode avaliar e personalizar os serviços que gostaríamos de usar neste website. Você está no comando! Habilite ou desabilite os serviços como julgar conveniente.",privacyPolicy:{name:"política de privacidade",text:"Para saber mais, por favor, leia nossa {privacyPolicy}."},title:"Serviços que gostaríamos de utilizar"},consentNotice:{changeDescription:"Houve mudanças desde sua última visita, queira renovar seu consentimento.",description:"Olá! Poderíamos, por favor, habilitar alguns serviços adicionais para {purposes}? Você pode sempre mudar ou retirar seu consentimento mais tarde.",imprint:{name:"imprimir"},learnMore:"Deixe-me escolher",privacyPolicy:{name:"política de privacidade"},testing:"Modo de teste!"},contextualConsent:{acceptAlways:"Sempre",acceptOnce:"Sim",description:"Você deseja carregar conteúdo externo fornecido por {title}?"},decline:"Recusar",ok:"Aceito.",poweredBy:"Realizado com Klaro!",privacyPolicy:{name:"política de privacidade",text:"Para saber mais, por favor, leia nossa {privacyPolicy}."},purposeItem:{service:"serviço",services:"serviços"},purposes:{advertising:{description:"Esses serviços processam informações pessoais para mostrar a você anúncios personalizados ou baseados em interesses.",title:"Publicidade"},functional:{description:"Esses serviços são essenciais para o correto funcionamento deste website. Você não pode desativá-los aqui, pois de outra forma o serviço não funcionaria corretamente.\n",title:"Prestação de serviços"},marketing:{description:"Esses serviços processam informações pessoais para mostrar a você conteúdo relevante sobre produtos, serviços ou tópicos que possam ser do seu interesse.",title:"Marketing"},performance:{description:"Esses serviços processam informações pessoais para otimizar o serviço que este website oferece.\n",title:"Otimização do desempenho"}},save:"Salvar",service:{disableAll:{description:"Use essa chave para habilitar ou desabilitar todos os serviços.",title:"Habilitar ou desabilitar todos os serviços"},optOut:{description:"Estes serviços são carregados por padrão (mas o você pode optar por não participar).",title:"(opt-out)"},purpose:"Objetivo",purposes:"Objetivos",required:{description:"Esses serviços são sempre necessários",title:"(sempre necessário)"}}},es:{acceptAll:"Aceptar todas",acceptSelected:"Aceptar seleccionadas",close:"Cerrar",consentModal:{description:"Aquí puede evaluar y personalizar los servicios que nos gustaría utilizar en este sitio web. ¡Usted decide! Habilite o deshabilite los servicios como considere oportuno.",privacyPolicy:{name:"política de privacidad",text:"Para saber más, por favor lea nuestra {privacyPolicy}."},title:"Servicios que nos gustaría utilizar"},consentNotice:{changeDescription:"Ha habido cambios en las cookies desde su última visita. Debe renovar su consentimiento.",description:"¡Hola! ¿Podríamos habilitar algunos servicios adicionales para {purposes}? Siempre podrá cambiar o retirar su consentimiento más tarde.",imprint:{name:"Imprimir"},learnMore:"Quiero elegir",privacyPolicy:{name:"política de privacidad"},testing:"¡Modo de prueba!"},contextualConsent:{acceptAlways:"Siempre",acceptOnce:"Sí",description:"¿Quieres cargar el contenido externo suministrado por {title}?"},decline:"Descartar todas",ok:"De acuerdo",poweredBy:"¡Realizado con Klaro!",privacyPolicy:{name:"política de privacidad",text:"Para saber más, por favor lea nuestra {privacyPolicy}."},purposeItem:{service:"servicio",services:"servicios"},purposes:{advertising:{description:"Estos servicios procesan información personal para mostrarle anuncios personalizados o basados en intereses.",title:"Publicidad"},functional:{description:"Estos servicios son esenciales para el correcto funcionamiento de este sitio web. No puede desactivarlos ya que la página no funcionaría correctamente.",title:"Prestación de servicios"},marketing:{description:"Estos servicios procesan información personal para mostrarle contenido relevante sobre productos, servicios o temas que puedan interesarle.",title:"Marketing"},performance:{description:"Estos servicios procesan información personal para optimizar el servicio que ofrece este sitio.",title:"Optimización del rendimiento"}},save:"Guardar",service:{disableAll:{description:"Utilice este interruptor para activar o desactivar todos los servicios.",title:"Activar o desactivar todos los servicios"},optOut:{description:"Este servicio está habilitado por defecto (pero puede optar por lo contrario)",title:"(desactivar)"},purpose:"Finalidad",purposes:"Finalidades",required:{description:"Este servicio es necesario siempre",title:"(siempre requerido)"}}},fi:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Aktivoi kaikki päälle/pois.",title:"Valitse kaikki"},optOut:{description:"Ladataan oletuksena (mutta voit ottaa sen pois päältä)",title:"(ladataan oletuksena)"},purpose:"Käyttötarkoitus",purposes:"Käyttötarkoitukset",required:{description:"Sivusto vaatii tämän aina",title:"(vaaditaan)"}},close:"Sulje",consentModal:{description:"Voit tarkastella ja muokata sinusta keräämiämme tietoja.",privacyPolicy:{name:"tietosuojasivultamme",text:"Voit lukea lisätietoja {privacyPolicy}."},title:"Keräämämme tiedot"},consentNotice:{changeDescription:"Olemme tehneet muutoksia ehtoihin viime vierailusi jälkeen, tarkista ehdot.",description:"Keräämme ja käsittelemme henkilötietoja seuraaviin tarkoituksiin: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Lue lisää",privacyPolicy:{name:"tietosuojasivultamme"}},decline:"Hylkää",ok:"Hyväksy",poweredBy:"Palvelun tarjoaa Klaro!",purposeItem:{service:"",services:""},save:"Tallenna"},fr:{acceptAll:"Accepter tout",acceptSelected:"Accepter sélectionné",close:"Fermer",consentModal:{description:"Vous pouvez ici évaluer et personnaliser les services que nous aimerions utiliser sur ce site. C'est vous qui décidez ! Activez ou désactivez les services comme bon vous semble.",privacyPolicy:{name:"politique de confidentialité",text:"Pour en savoir plus, veuillez lire notre {privacyPolicy}."},title:"Services que nous souhaitons utiliser"},consentNotice:{changeDescription:"Il y a eu des changements depuis votre dernière visite, veuillez renouveler votre consentement.",description:"Bonjour ! Pourrions-nous activer des services supplémentaires pour {purposes}? Vous pouvez toujours modifier ou retirer votre consentement plus tard.",imprint:{name:"mentions légales"},learnMore:"Laissez-moi choisir",privacyPolicy:{name:"politique de confidentialité"},testing:"Mode test !"},contextualConsent:{acceptAlways:"Toujours",acceptOnce:"Oui",description:"Vous souhaitez charger un contenu externe fourni par {title}?"},decline:"Je refuse",ok:"C'est bon.",poweredBy:"Réalisé avec Klaro !",privacyPolicy:{name:"politique de confidentialité",text:"Pour en savoir plus, veuillez lire notre {privacyPolicy}."},purposeItem:{service:"service",services:"services"},purposes:{advertising:{description:"Ces services traitent les informations personnelles pour vous présenter des publicités personnalisées ou basées sur des intérêts.",title:"Publicité"},functional:{description:"Ces services sont essentiels au bon fonctionnement de ce site. Vous ne pouvez pas les désactiver ici car le service ne fonctionnerait pas correctement autrement.\n",title:"Prestation de services"},marketing:{description:"Ces services traitent les informations personnelles afin de vous présenter un contenu pertinent sur les produits, les services ou les sujets qui pourraient vous intéresser.",title:"Marketing"},performance:{description:"Ces services traitent les informations personnelles afin d'optimiser le service que ce site Web offre.\n",title:"Optimisation de la performance"}},save:"Enregistrer",service:{disableAll:{description:"Utilisez ce commutateur pour activer ou désactiver tous les services.",title:"Activer ou désactiver tous les services"},optOut:{description:"Ce service est chargé par défaut (mais vous pouvez le désactiver)",title:"(opt-out)"},purpose:"Objet",purposes:"Fins",required:{description:"Ce service est toujours nécessaire",title:"(toujours requis)"}}},gl:{acceptAll:"Aceptar todas",acceptSelected:"Aceptar seleccionadas",close:"Pechar",consentModal:{description:"Aquí pode avaliar e personalizar os servizos que nos gustaría utilizar neste sitio web. ¡Vostede decide! Habilite ou deshabilite os servicios como lle conveña.",privacyPolicy:{name:"política de privacidade",text:"Para saber máis, por favor lea a nosa {privacyPolicy}."},title:"Servizos que nos gustaría utilizar"},consentNotice:{changeDescription:"Houbo cambios nas cookies dende a súa última visita. Debe renovar o seu consentimento.",description:"¡Ola! ¿Poderíamos habilitar algúns servizos adicionais para {purposes}? Sempre poderá cambiar ou retirar o séu consentimento máis tarde.",imprint:{name:"Imprimir"},learnMore:"Quero elixir",privacyPolicy:{name:"política de privacidade"},testing:"¡Modo de proba!"},decline:"Descartar todas",ok:"De acordo",poweredBy:"¡Realizado con Klaro!",privacyPolicy:{name:"política de privacidade",text:"Para saber máis, por favor lea a nosa {privacyPolicy}."},purposeItem:{service:"servizo",services:"servizos"},purposes:{advertising:{description:"Estes servizos procesan información persoal para mostrarlle anuncios personalizados ou basados en intereses.",title:"Publicidade"},functional:{description:"Estes servizos son esenciais para o correcto funcionamiento deste sitio web. Non pode desactivalos xa que a páxina non funcionaría correctamente.",title:"Prestación de servizos"},marketing:{description:"Estes servizos procesan información persoal para mostrarlle contido relevante sobre produtos, servizos ou temas que poidan interesarlle.",title:"Marketing"},performance:{description:"Estes servizos procesan información persoal para optimizar o servizo que ofrece este sitio.",title:"Optimización do rendimento"}},save:"Gardar",service:{disableAll:{description:"Utilice este interruptor para activar ou desactivar todos os servizos.",title:"Activar ou desactivar todos os servizos"},optOut:{description:"Este servizo está habilitado por defecto (pero pode optar polo contrario)",title:"(desactivar)"},purpose:"Finalidade",purposes:"Finalidades",required:{description:"Este servizo é necesario sempre",title:"(sempre requirido)"}}},hu:{acceptAll:"Mind elfogad",acceptAll_en:"Accept all",acceptSelected:"Kiválasztottat elfogad",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Használja ezt a kapcsolót az összes alkalmazás engedélyezéséhez/letiltásához.",title:"Összes app átkapcsolása"},optOut:{description:"Ez az alkalmazás alapértelmezés szerint betöltött (de ki lehet kapcsolni)",title:"(leiratkozás)"},purpose:"Cél",purposes:"Célok",required:{description:"Ez az alkalmazás mindig szükséges",title:"(mindig szükséges)"}},close:"Elvet",consentModal:{description:"Itt láthatja és testreszabhatja az önről gyűjtött információkat.",privacyPolicy:{name:"adatvédelmi irányelveinket",text:"További információért kérjük, olvassa el az {privacyPolicy}."},title:"Információk, amiket gyűjtünk"},consentNotice:{changeDescription:"Az utolsó látogatás óta változások történtek, kérjük, frissítse a hozzájárulását.",description:"Személyes adatait összegyűjtjük és feldolgozzuk az alábbi célokra: {purposes}.",imprint:{name:"impresszum",name_en:"imprint"},learnMore:"Tudjon meg többet",privacyPolicy:{name:"adatvédelmi irányelveinket"}},contextualConsent:{acceptAlways:"Mindig",acceptOnce:"Igen",description:"Be akarod tölteni a {title} által szolgáltatott külső tartalmakat?"},decline:"Elutasít",ok:"Elfogad",poweredBy:"Powered by Klaro!",purposeItem:{service:"",services:""},save:"Mentés"},hr:{acceptAll:"",acceptAll_en:"Prihvati sve",acceptSelected:"",acceptSelected_en:"Prihvati odabrane",service:{disableAll:{description:"Koristite ovaj prekidač da omogućite/onemogućite sve aplikacije odjednom.",title:"Izmeijeni sve"},optOut:{description:"Ova aplikacija je učitana automatski (ali je možete onemogućiti)",title:"(onemogućite)"},purpose:"Svrha",purposes:"Svrhe",required:{description:"Ova aplikacija je uvijek obavezna",title:"(obavezna)"}},close:"Zatvori",consentModal:{description:"Ovdje možete vidjeti i podesiti informacije koje prikupljamo o Vama.",privacyPolicy:{name:"pravila privatnosti",text:"Za više informacije pročitajte naša {privacyPolicy}."},title:"Informacije koje prikupljamo"},consentNotice:{changeDescription:"Došlo je do promjena od Vaše posljednjeg posjećivanja web stranice, molimo Vas da ažurirate svoja odobrenja.",description:"Mi prikupljamo i procesiramo Vaše osobne podatke radi slijedećeg: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Saznajte više",privacyPolicy:{name:"pravila privatnosti"}},decline:"Odbij",ok:"U redu",poweredBy:"Pokreće Klaro!",purposeItem:{service:"",services:""},save:"Spremi"},it:{acceptAll:"Accettare tutti",acceptSelected:"Accettare selezionato",close:"Chiudi",consentModal:{description:"Qui può valutare e personalizzare i servizi che vorremmo utilizzare su questo sito web. È lei il responsabile! Abilitare o disabilitare i servizi come meglio crede.",privacyPolicy:{name:"informativa sulla privacy",text:"Per saperne di più, legga la nostra {privacyPolicy}."},title:"Servizi che desideriamo utilizzare"},consentNotice:{changeDescription:"Ci sono stati dei cambiamenti rispetto alla sua ultima visita, la preghiamo di rinnovare il suo consenso.",description:"Salve, possiamo attivare alcuni servizi aggiuntivi per {purposes}? Può sempre modificare o ritirare il suo consenso in un secondo momento.",imprint:{name:"impronta"},learnMore:"Lasciatemi scegliere",privacyPolicy:{name:"informativa sulla privacy"},testing:"Modalità di test!"},contextualConsent:{acceptAlways:"Sempre",acceptOnce:"Sì",description:"Vuole caricare contenuti esterni forniti da {title}?"},decline:"Rifiuto",ok:"Va bene così",poweredBy:"Realizzato con Klaro!",privacyPolicy:{name:"informativa sulla privacy",text:"Per saperne di più, legga la nostra {privacyPolicy}."},purposeItem:{service:"servizio",services:"servizi"},purposes:{advertising:{description:"Questi servizi elaborano le informazioni personali per mostrarle annunci pubblicitari personalizzati o basati su interessi.",title:"Pubblicità"},functional:{description:"Questi servizi sono essenziali per il corretto funzionamento di questo sito web. Non può disattivarli qui perché altrimenti il servizio non funzionerebbe correttamente.\n",title:"Fornitura di servizi"},marketing:{description:"Questi servizi elaborano le informazioni personali per mostrarle contenuti rilevanti su prodotti, servizi o argomenti che potrebbero interessarla.",title:"Marketing"},performance:{description:"Questi servizi elaborano le informazioni personali per ottimizzare il servizio offerto da questo sito web.\n",title:"Ottimizzazione delle prestazioni"}},save:"Salva",service:{disableAll:{description:"Utilizzi questo interruttore per attivare o disattivare tutti i servizi.",title:"Attivare o disattivare tutti i servizi"},optOut:{description:"Questo servizio è caricato di default (ma è possibile scegliere di non usufruirne)",title:"(opt-out)"},purpose:"Scopo dell",purposes:"Finalità",required:{description:"Questo servizio è sempre richiesto",title:"(sempre richiesto)"}}},nl:{acceptAll:"Accepteer alle",acceptSelected:"Geselecteerde",close:"Sluit",consentModal:{description:"Hier kunt u de diensten die wij op deze website willen gebruiken beoordelen en aanpassen. U heeft de leiding! Schakel de diensten naar eigen inzicht in of uit.",privacyPolicy:{name:"privacybeleid",text:"Voor meer informatie kunt u ons {privacyPolicy} lezen."},title:"Diensten die we graag willen gebruiken"},consentNotice:{changeDescription:"Er waren veranderingen sinds uw laatste bezoek, gelieve uw toestemming te hernieuwen.",description:"Hallo, kunnen wij u een aantal extra diensten aanbieden voor {purposes}? U kunt uw toestemming later altijd nog wijzigen of intrekken.",imprint:{name:"impressum"},learnMore:"Laat me kiezen",privacyPolicy:{name:"privacybeleid"},testing:"Testmodus!"},contextualConsent:{acceptAlways:"Altijd",acceptOnce:"Ja",description:"Wilt u externe content laden die door {title} wordt aangeleverd ?"},decline:"Ik weiger",ok:"Dat is oké",poweredBy:"Gerealiseerd met Klaro!",privacyPolicy:{name:"privacybeleid",text:"Voor meer informatie kunt u ons {privacyPolicy} lezen."},purposeItem:{service:"service",services:"diensten"},purposes:{advertising:{description:"Deze diensten verwerken persoonlijke informatie om u gepersonaliseerde of op interesse gebaseerde advertenties te tonen.",title:"Reclame"},functional:{description:"Deze diensten zijn essentieel voor het correct functioneren van deze website. U kunt ze hier niet uitschakelen omdat de dienst anders niet correct zou werken.\n",title:"Dienstverlening"},marketing:{description:"Deze diensten verwerken persoonlijke informatie om u relevante inhoud te tonen over producten, diensten of onderwerpen waarin u geïnteresseerd zou kunnen zijn.",title:"Marketing"},performance:{description:"Deze diensten verwerken persoonlijke informatie om de service die deze website biedt te optimaliseren.\n",title:"Optimalisatie van de prestaties"}},save:"Opslaan",service:{disableAll:{description:"Gebruik deze schakelaar om alle diensten in of uit te schakelen.",title:"Alle diensten in- of uitschakelen"},optOut:{description:"Deze diensten worden standaard geladen (maar u kunt zich afmelden)",title:"(opt-out)"},purpose:"Verwerkingsdoel",purposes:"Verwerkingsdoeleinden",required:{description:"Deze diensten zijn altijd nodig",title:"(altijd nodig)"}}},no:{acceptAll:"Godtar alle",acceptSelected:"Godtar valgt",service:{disableAll:{description:"Bruk denne for å skru av/på alle apper.",title:"Bytt alle apper"},optOut:{description:"Denne appen er lastet som standard (men du kan skru det av)",title:"(opt-out)"},purpose:"Årsak",purposes:"Årsaker",required:{description:"Denne applikasjonen er alltid påkrevd",title:"(alltid påkrevd)"}},close:"",close_en:"Close",consentModal:{description:"Her kan du se og velge hvilken informasjon vi samler inn om deg.",privacyPolicy:{name:"personvernerklæring",text:"For å lære mer, vennligst les vår {privacyPolicy}."},title:"Informasjon vi samler inn"},consentNotice:{changeDescription:"Det har skjedd endringer siden ditt siste besøk, vennligst oppdater ditt samtykke.",description:"Vi samler inn og prosesserer din personlige informasjon av følgende årsaker: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Lær mer",privacyPolicy:{name:"personvernerklæring"}},decline:"Avslå",ok:"OK",poweredBy:"Laget med Klaro!",purposeItem:{service:"",services:""},save:"Opslaan"},oc:{acceptAll:"Tot acceptar",acceptSelected:"Acceptar çò seleccionat",close:"Tampar",consentModal:{description:"Aquí podètz mesurar e personalizar los servicis que volriam utilizar sus aqueste site web. Avètz lo darrièr mot ! Activatz o desactivatz segon vòstra causida.",title:"Servicis que volriam utilizar"},consentNotice:{changeDescription:"I aguèt de modificacions dempuèi vòstra darrièra visita, mercés de repassar vòstre consentiment.",description:"Adieu ! Poiriam activar mai de servici per {purposes} ? Podètz totjorn modificar o tirar vòstre consentiment mai tard.",learnMore:"Me daissar causir",testing:"Mòde tèst !"},contextualConsent:{acceptAlways:"Totjorn",acceptOnce:"Òc",description:"Volètz cargar de contenguts extèrn provesits per {title} ?"},decline:"Refusi",ok:"Es bon",poweredBy:"Realizat amb Klaro !",privacyPolicy:{name:"politica de confidencialitat",text:"Per ne saber mai, vejatz nòstra {privacyPolicy}."},purposeItem:{service:"servici",services:"servicis"},purposes:{advertising:{description:"Aquestes servicis tractan d’informacions personalas per vos mostrar de reclamas personalizadas o basadas suls interèsses.",title:"Reclama"},functional:{description:"Aquestes servicis son essencials pel foncionament corrèct d’aqueste site web. Los podètz pas desactivar aquí pr’amor que lo servici foncionariá pas coma cal autrament.\n",title:"Servici de provision"},marketing:{description:"Aquestes servicis tractan d’informacions personalas per vos mostrar de contenguts a prepaus de produits, de servicis o tèmas que poirián vos interessar.",title:"Marketing"},performance:{description:"Aquestes servicis tractan d’informacions per optimizar lo servici qu’aqueste site web prepausa.\n",title:"Optimizacion de las performanças"}},save:"Salvar",service:{disableAll:{description:"Utilizatz aqueste alternator per activar o desactivar totes los servicis.",title:"Activar o desactivar totes los servicis"},optOut:{description:"Aqueste servici es cargar per defaut (mas lo podètz desactivar)",title:"(opt-out)"},purpose:"finalitat",purposes:"finalitat",required:{description:"Aqueste servici es totjorn requesit",title:"(totjorn requesit)"}}},ro:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Utilizați acest switch pentru a activa/dezactiva toate aplicațiile.",title:"Comutați între toate aplicațiile"},optOut:{description:"Această aplicație este încărcată în mod implicit (dar puteți renunța)",title:"(opt-out)"},purpose:"Scop",purposes:"Scopuri",required:{description:"Această aplicație este întotdeauna necesară",title:"(întotdeauna necesar)"}},close:"",close_en:"Close",consentModal:{description:"Aici puteți vedea și personaliza informațiile pe care le colectăm despre dvs.",privacyPolicy:{name:"politica privacy",text:"Pentru a afla mai multe, vă rugăm să citiți {privacyPolicy}."},title:"Informațiile pe care le colectăm"},consentNotice:{changeDescription:"Au existat modificări de la ultima vizită, vă rugăm să actualizați consimțământul.",description:"Colectăm și procesăm informațiile dvs. personale în următoarele scopuri: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Află mai multe",privacyPolicy:{name:"politica privacy"}},decline:"Renunță",ok:"OK",poweredBy:"Realizat de Klaro!",purposeItem:{service:"",services:""},save:"Salvează"},sr:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Koristite ovaj prekidač da omogućite/onesposobite sve aplikacije odjednom.",title:"Izmeni sve"},optOut:{description:"Ova aplikacija je učitana automatski (ali je možete onesposobiti)",title:"(onesposobite)"},purpose:"Svrha",purposes:"Svrhe",required:{description:"Ova aplikacija je uvek neophodna",title:"(neophodna)"}},close:"Zatvori",consentModal:{description:"Ovde možete videti i podesiti informacije koje prikupljamo o Vama.",privacyPolicy:{name:"politiku privatnosti",text:"Za više informacije pročitajte našu {privacyPolicy}."},title:"Informacije koje prikupljamo"},consentNotice:{changeDescription:"Došlo je do promena od Vaše poslednje posete, molimo Vas da ažurirate svoja odobrenja.",description:"Mi prikupljamo i procesiramo Vaše lične podatke radi sledećeg: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Saznajte više",privacyPolicy:{name:"politiku privatnosti"}},decline:"Odbij",ok:"U redu",poweredBy:"Pokreće Klaro!",purposeItem:{service:"",services:""},save:"Sačuvaj"},sr_cyrl:{consentModal:{title:"Информације које прикупљамо",description:"Овде можете видет и подесити информације које прикупљамо о Вама.\n",privacyPolicy:{name:"политику приватности",text:"За више информација прочитајте нашу {privacyPolicy}.\n"}},consentNotice:{changeDescription:"Дошло је до промена од Ваше последнје посете, молимо Вас да ажурирате своја одобрења.",description:"Ми прикупљамо и процесирамо Ваше личне податке ради следећег: {purposes}.\n",learnMore:"Сазнајте више",privacyPolicy:{name:"политику приватности"}},ok:"У реду",save:"Сачувај",decline:"Одбиј",close:"Затвори",service:{disableAll:{title:"Измени све",description:"Користите овај прекидач да омогућите/онеспособите све апликације одједном."},optOut:{title:"(онеспособите)",description:"Ова апликација је учитана аутоматски (али је можете онеспособити)"},required:{title:"(неопходна)",description:"Ова апликација је увек неопходна."},purposes:"Сврхе",purpose:"Сврха"},poweredBy:"Покреће Кларо!"},sv:{acceptAll:"Acceptera alla",acceptSelected:"Acceptera markerat",service:{disableAll:{description:"Använd detta reglage för att aktivera/avaktivera samtliga appar.",title:"Ändra för alla appar"},optOut:{description:"Den här appen laddas som standardinställning (men du kan avaktivera den)",title:"(Avaktivera)"},purpose:"Syfte",purposes:"Syften",required:{description:"Den här applikationen krävs alltid",title:"(Krävs alltid)"}},close:"Stäng",consentModal:{description:"Här kan du se och anpassa vilken information vi samlar om dig.",privacyPolicy:{name:"Integritetspolicy",text:"För att veta mer, läs vår {privacyPolicy}."},title:"Information som vi samlar"},consentNotice:{changeDescription:"Det har skett förändringar sedan ditt senaste besök, var god uppdatera ditt medgivande.",description:"Vi samlar och bearbetar din personliga data i följande syften: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Läs mer",privacyPolicy:{name:"Integritetspolicy"}},decline:"Avböj",ok:"OK",poweredBy:"Körs på Klaro!",purposeItem:{service:"",services:""},save:"Spara"},tr:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Toplu açma/kapama için bu düğmeyi kullanabilirsin.",title:"Tüm uygulamaları aç/kapat"},optOut:{description:"Bu uygulama varsayılanda yüklendi (ancak iptal edebilirsin)",title:"(isteğe bağlı)"},purpose:"Amaç",purposes:"Amaçlar",required:{description:"Bu uygulama her zaman gerekli",title:"(her zaman gerekli)"}},close:"Kapat",consentModal:{description:"Hakkınızda topladığımız bilgileri burada görebilir ve özelleştirebilirsiniz.",privacyPolicy:{name:"Gizlilik Politikası",text:"Daha fazlası için lütfen {privacyPolicy} sayfamızı okuyun."},title:"Sakladığımız bilgiler"},consentNotice:{changeDescription:"Son ziyaretinizden bu yana değişiklikler oldu, lütfen seçiminizi güncelleyin.",description:"Kişisel bilgilerinizi aşağıdaki amaçlarla saklıyor ve işliyoruz: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Daha fazla bilgi",privacyPolicy:{name:"Gizlilik Politikası"}},decline:"Reddet",ok:"Tamam",poweredBy:"Klaro tarafından geliştirildi!",purposeItem:{service:"",services:""},save:"Kaydet"},pl:{acceptAll:"Zaakceptuj wszystkie",acceptSelected:"Zaakceptuj wybrane",close:"Zamknij",consentModal:{description:"Tutaj mogą Państwo ocenić i dostosować usługi, które chcielibyśmy wykorzystać na tej stronie. Włączaj lub wyłączaj usługi według własnego uznania.",privacyPolicy:{name:"polityką prywatności",text:"Aby dowiedzieć się więcej, prosimy o zapoznanie się z naszą {privacyPolicy}."},title:"Usługi, z których chcielibyśmy skorzystać"},consentNotice:{changeDescription:"Od Twojej ostatniej wizyty nastąpiły zmiany, prosimy o odnowienie zgody.",description:"Czy możemy włączyć dodatkowe usługi dla {purposes}? W każdej chwili mogą Państwo później zmienić lub wycofać swoją zgodę.",imprint:{name:"Imprint"},learnMore:"Pozwól mi wybrać",privacyPolicy:{name:"polityka prywatności"},testing:"Tryb testowy!"},contextualConsent:{acceptAlways:"Zawsze",acceptOnce:"Tak",description:"Czy chcą Państwo załadować treści zewnętrzne dostarczane przez {title}?"},decline:"Odmawiam",ok:"Ok",poweredBy:"Technologia dostarczona przez Klaro",privacyPolicy:{name:"polityka prywatności",text:"Aby dowiedzieć się więcej, prosimy o zapoznanie się z naszą {privacyPolicy}."},purposeItem:{service:"usługa",services:"usługi"},purposes:{advertising:{description:"Usługi te przetwarzają dane osobowe w celu pokazania Państwu spersonalizowanych lub opartych na zainteresowaniach reklam.",title:"Reklama"},functional:{description:"Usługi te są niezbędne do prawidłowego funkcjonowania niniejszej strony internetowej. Nie mogą Państwo ich tutaj wyłączyć, ponieważ w przeciwnym razie strona nie działałaby prawidłowo.\n",title:"Świadczenie usług"},marketing:{description:"Usługi te przetwarzają dane osobowe w celu pokazania Państwu istotnych treści dotyczących produktów, usług lub tematów, którymi mogą być Państwo zainteresowani.",title:"Marketing"},performance:{description:"Usługi te przetwarzają dane osobowe w celu optymalizacji usług oferowanych przez tę stronę.\n",title:"Optymalizacja wydajności"}},save:"Zapisz",service:{disableAll:{description:"Za pomocą tego przełącznika można włączać lub wyłączać wszystkie usługi.",title:"Włącz lub wyłącz wszystkie usługi"},optOut:{description:"Ta usługa jest domyślnie załadowana (ale mogą Państwo z niej zrezygnować)",title:"(opt-out)"},purpose:"Cel",purposes:"Cele",required:{description:"Usługi te są zawsze wymagane",title:"(zawsze wymagane)"}}},ru:{acceptAll:"Принять всё",acceptSelected:"Принять выбранные",service:{disableAll:{description:"Используйте этот переключатель, чтобы включить/отключить все приложения.",title:"Переключить все приложения"},optOut:{description:"Это приложение включено по умолчанию (но вы можете отказаться)",title:"(отказаться)"},purpose:"Намерение",purposes:"Намерения",required:{description:"Это обязательное приложение",title:"(всегда обязательный)"}},close:"Закрыть",consentModal:{description:"Здесь вы можете просмотреть и настроить, какую информацию о вас мы храним.",privacyPolicy:{name:"Соглашение",text:"Чтобы узнать больше, пожалуйста, прочитайте наше {privacyPolicy}."},title:"Информация, которую мы сохраняем"},consentNotice:{changeDescription:"Со времени вашего последнего визита произошли изменения, обновите своё согласие.",description:"Мы собираем и обрабатываем вашу личную информацию для следующих целей: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Настроить",privacyPolicy:{name:"политика конфиденциальности"}},decline:"Отклонить",ok:"Принять",poweredBy:"Работает на Кларо!",purposeItem:{service:"",services:""},save:"Сохранить"}};function wo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ko(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ko(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ko(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function So(e){return So="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},So(e)}function Eo(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,jo(n.key),n)}}function jo(e){var t=function(e,t){if("object"!=So(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=So(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==So(t)?t:String(t)}var Oo=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=null}var t,r;return t=e,(r=[{key:"get",value:function(){return this.value}},{key:"set",value:function(e){this.value=e}},{key:"delete",value:function(){this.value=null}}])&&Eo(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function xo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Po(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Po(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Po(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r(4362),r(9102);var Ao=function(e){var t=e.t,r=e.config,n=e.onConfigAction,o=e.onClick;return tt.createElement(Zn,{onClick:function(){return o(r)},isCard:!0,key:r.name},tt.createElement(Gn,{size:"icon cm-status"},tt.createElement("span",{title:r.status,className:"cm-status-is-"+r.status},"active"===r.status?tt.createElement("span",null,"⊕"):tt.createElement("span",null,"⊗"))),tt.createElement(Gn,{size:"lg cm-name"},tt.createElement("p",null,"default"===r.name?t(["configs","default","title"]):r.name)),tt.createElement(Gn,{size:"icon"},tt.createElement(oo,null,!1,tt.createElement(io,{onClick:function(){return n(r,"activate")}},t(["configs","activate"])),tt.createElement(io,{onClick:function(){return n(r,"deactivate")}},t(["configs","deactivate"])))))},Co=function(e){var t=e.t,r=e.configs,n=e.onConfigAction,o=e.onClick,i=(e.disabled,r.map((function(e){return tt.createElement(Ao,{onClick:o,onConfigAction:n,key:e.name,t,config:e})})));return tt.createElement(Wn,{className:"cm-config-list"},tt.createElement($n,null,tt.createElement(Gn,{size:"icon"},t(["configs","status"])),tt.createElement(Gn,{size:"lg"},t(["configs","name"])),tt.createElement(Gn,{size:"icon"},t(["menu"]))),i)},zo=function(e){var t=e.t,r=e.configs,n=e.onClick,o=e.onConfigAction,i=e.disabled;return tt.createElement("div",{className:"cm-ide-configs"},tt.createElement("p",{className:"cm-section-description"},t(["configs","description"])),tt.createElement(Co,{t,configs:r,disabled:i,onConfigAction:o,onClick:n}),!1)};function No(){return No=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},No.apply(this,arguments)}function To(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Io(e){return Io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Io(e)}function Ro(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Do(n.key),n)}}function Do(e){var t=function(e,t){if("object"!=Io(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Io(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Io(t)?t:String(t)}function Mo(e,t,r){return t=qo(t),function(e,t){if(t&&("object"===Io(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Uo()?Reflect.construct(t,r||[],qo(e).constructor):t.apply(e,r))}function Uo(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Uo=function(){return!!e})()}function qo(e){return qo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},qo(e)}function Lo(e,t){return Lo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Lo(e,t)}var Bo=function(e){function t(e){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(r=Mo(this,t,[e])).state={active:!1},r}var r,n;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Lo(e,t)}(t,e),r=t,(n=[{key:"render",value:function(){var e=this,t=this.state.active;return tt.createElement("div",{className:"cm-tabs"+(this.state.active?" cm-tabs-active":""),onClick:function(){return e.setState({active:!t})}},tt.createElement("span",{className:"cm-tabs-more"},"∨"),tt.createElement("ul",null,this.props.children))}}])&&Ro(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}(tt.Component),Fo=function(e){var t=e.active,r=e.children,n=(e.href,e.icon),o=e.params,i=e.onClick;return tt.createElement("li",{className:t?"cm-tab-is-active":""},tt.createElement("a",{params:o,onClick:i},n&&tt.createElement("span",{className:"cm-tabs-icon cm-tabs-is-small"},n),r))};function Ho(e){return Ho="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ho(e)}function Vo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||Wo(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ko(e){return function(e){if(Array.isArray(e))return $o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Wo(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wo(e,t){if(e){if("string"==typeof e)return $o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?$o(e,t):void 0}}function $o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}Fo.propTypes={active:nt().bool,children:nt().node.isRequired,href:nt().string,icon:nt().node,params:nt().object,onClick:nt().func};var Go=function(e){var t=e.hintKey,r=e.translationKey,n=e.noDefault,o=e.onChange,i=e.name,a=e.translations,c=e.languages,s=e.t,l=(e.config,e.value,e.fallbackValue,[].concat(Ko(n?[]:["zz"]),Ko(c))),u=s(["translations"].concat(Ko(t),["description"]),{name:i}),f=l.map((function(e){var n=Cn(a,e,r),c=zn(s.tv,e,r),l=n&&n===c||!n&&void 0!==c,u=s(["translations"].concat(Ko(t),["zz"===e?"defaultLabel":"label"]),{name:i,language:s(["languages",e])});return tt.createElement("li",{key:e},tt.createElement("span",{className:"cm-lang"},"zz"!==e?e:"_"),tt.createElement(Qr,{onChange:function(t){o(e,t===c||""===t?void 0:t)},label:[].concat(Ko(u),Ko(l?[" "].concat(Ko(s(["translations","defaultValue"]))):[])),value:n||c||""}))}));return tt.createElement("div",{className:"cm-translations-for-key"},tt.createElement("h4",null,s(["translations"].concat(Ko(t),["label"]),{name:i})),tt.createElement("p",null,u),tt.createElement("ul",null,f))},Zo={services:function(e){var t=e.t,r=e.config,n=e.updateConfig,o=r.services.map((function(e){return tt.createElement(tt.Fragment,{key:e.name},tt.createElement("h3",null,e.name),tt.createElement(Go,{onChange:function(t,r){return function(e,t,r){n(["services",e._id,"translations",t,"title"],r)}(e,t,r)},t,hintKey:["services","title"],translationKey:["title"],name:e.name,translations:e.translations||{},languages:r.languages}),tt.createElement(Go,{onChange:function(t,r){return function(e,t,r){n(["services",e._id,"translations",t,"description"],r)}(e,t,r)},t,hintKey:["services","description"],translationKey:["description"],name:e.name,translations:e.translations||{},noDefault:!0,languages:r.languages}))}));return tt.createElement(tt.Fragment,null,o.length>0&&o||tt.createElement("p",{className:"cm-section-description"},t(["translations","noTranslations"])))},purposes:function(e){var t=e.t,r=e.config,n=e.updateConfig,o=new Set;r.services.forEach((function(e){return e.purposes.forEach((function(e){return o.add(e)}))}));var i=Array.from(o.keys()).map((function(e){return tt.createElement(tt.Fragment,{key:e},tt.createElement("h3",null,e),tt.createElement(Go,{t,onChange:function(t,r){return function(e,t,r){n(["translations",t,"purposes",e,"title"],r)}(e,t,r)},translationKey:["purposes",e,"title"],hintKey:["purposes","title"],name:e,translations:r.translations,languages:r.languages}),tt.createElement(Go,{t,onChange:function(t,r){return function(e,t,r){n(["translations",t,"purposes",e,"description"],r)}(e,t,r)},hintKey:["purposes","description"],translationKey:["purposes",e,"description"],name:e,translations:r.translations,noDefault:!0,languages:r.languages}))}));return tt.createElement(tt.Fragment,null,i.length>0&&i||tt.createElement("p",{className:"cm-section-description"},t(["translations","noTranslations"])))},privacyPolicyUrl:function(e){var t=e.t,r=e.config,n=e.updateConfig;return tt.createElement(Go,{t,hintKey:["privacyPolicyUrl"],name:"privacyPolicyUrl",translationKey:["privacyPolicyUrl"],translations:r.translations,languages:r.languages,onChange:function(e,t){n(["translations",e,"privacyPolicyUrl"],t)}})},ui:function(e){var t=e.t,r=e.config,n=e.updateConfig;return function e(o,i){for(var a=[],c=function(){var o,c=Vo(l[s],2),u=c[0],f=c[1];if(0===i.length&&("purposes"===u||"services"===u))return 1;var p=[].concat(Ko(i),[u]);o="object"===Ho(f)?e(f,p):tt.createElement(Go,{onChange:function(e,t){return n(["translations",e].concat(Ko(p)),t,!0)},t,hintKey:p,noDefault:!0,translationKey:p,name:p.join("."),key:p.join("."),translations:r.translations,languages:r.languages}),a.push(tt.createElement("div",{key:p.join("."),className:"cm-key-translations"},o))},s=0,l=Object.entries(o);s<l.length;s++)c();return tt.createElement(tt.Fragment,null,a)}(_o.en,[])}};function Jo(e){return Jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jo(e)}var Yo=["state","setState","className","onConfigAction","configs","t"];function Qo(){return Qo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Qo.apply(this,arguments)}function Xo(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ei(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,ri(n.key),n)}}function ti(e,t,r){return t&&ei(e.prototype,t),r&&ei(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function ri(e){var t=function(e,t){if("object"!=Jo(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=Jo(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Jo(t)?t:String(t)}function ni(e,t,r){return t=ii(t),function(e,t){if(t&&("object"===Jo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,oi()?Reflect.construct(t,r||[],ii(e).constructor):t.apply(e,r))}function oi(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(oi=function(){return!!e})()}function ii(e){return ii=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ii(e)}function ai(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ci(e,t)}function ci(e,t){return ci=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ci(e,t)}tt.Component;var si={globals:function(t){var r=t.config,n=t.disabled,o=t.controls,i=t.updateConfig,a=t.t,c=co.globals.map((function(t){var c=o[t.control]||e[t.control];return tt.createElement(c,go(bo(bo({disabled:n,key:t.name,updateConfig:i,config:r,t:a},"key",t.name),"field",t),t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},a(["globals","description"])),tt.createElement("fieldset",{className:"cm-global-fields",disabled:n},c))},services:function(e){var t,r=e.t,n=(e.tt,e.state),o=e.services,i=e.setState,a=e.config,c=e.disabled,s=e.updateConfig,l=(n=n||{service:void 0}).service,u=[];return void 0!==o&&(u=o.filter((function(e){return void 0===a.services.find((function(t){return t.name===e.name||t.id===e.id}))}))),t=void 0!==l?tt.createElement(mo,{setState:i,updateServiceName:function(e){return i({service:e})},t:r,updateConfig:s,service:a.services.find((function(e){return e.name===l}))}):tt.createElement(tt.Fragment,null,tt.createElement(vo,{t:r,config:a,onClick:function(e){return i({service:e.name})},updateConfig:s,disabled:c}),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement(Dn,{services:u,updateConfig:s,config:a,field:{name:"services"},t:r})))),tt.createElement("div",{className:"cm-ide-services"},tt.createElement("p",{className:"cm-section-description"},r(["services","description"])),t)},translations:function(e){var t=e.t,r=e.state,n=e.setState,o=e.config,i=e.updateConfig,a=Zo[(r=r||{tab:"services"}).tab],c=Array.from(Object.entries(Zo)).map((function(e){var o=Vo(e,2),i=o[0];return o[1],tt.createElement(Fo,{active:i===r.tab,onClick:function(){return n({tab:i})},key:i},t(["translations","headers",i]))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},t(["translations","description"])),tt.createElement(Bo,null,c),tt.createElement("div",{className:"cm-translations-fields"},tt.createElement(a,{t,config:o,updateConfig:i})))},testing:function(e){var t=e.t,r=e.config,n=wo(ie(0),2),o=n[0],i=n[1],a=wo(ie(""),2),c=a[0],s=a[1],l=wo(ie(r.languages.length>0?r.languages[0]:"en"),2),u=l[0],f=l[1],p=wo(ie(new Oo),2),d=p[0],v=p[1],m=new Oo,y=new xr.default(r,d,m),h=function(e){var t=new Map;return Ir(t,Tr(_o)),Ir(t,Tr(e.translations||{})),t}(r),b=r.languages.map((function(e){return tt.createElement("option",{key:e,value:e},t(["languages",e])," (",e,")")})),g=function(){window.open(c+"#klaro-testing&klaro-config=".concat(r.name))},_=le(null);return ce((function(){!function(e,t,r){if(void 0!==e.styling){var n=Object.assign({},e.styling);if(void 0!==n.theme){var o=n.theme;o instanceof Array||(o=[o]),n={};var i,a=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=Cr(e))){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}(o);try{for(a.s();!(i=a.n()).done;){var c=t[i.value];if(void 0!==c)for(var s=0,l=Object.entries(c);s<l.length;s++){var u=Ar(l[s],2),f=u[0],p=u[1];f.startsWith("_")||(n[f]=p)}}}catch(e){a.e(e)}finally{a.f()}for(var d=0,v=Object.entries(e.styling);d<v.length;d++){var m=Ar(v[d],2),y=m[0],h=m[1];"theme"!==y&&(n[y]=h)}}void 0===r&&(r=document.documentElement);for(var b=0,g=Object.entries(n);b<g.length;b++){var _=Ar(g[b],2),w=_[0],k=_[1];r.style.setProperty("--"+w,k)}window.document.documentMode&&r===document.documentElement&&(0,Pr.N3)(n)}}(r,Rr,_.current)})),tt.createElement("div",{className:"cm-demo"},tt.createElement("p",{className:"cm-section-description"},t(["demo","description"])),tt.createElement("form",{onSubmit:g},tt.createElement("div",{className:"cm-config-controls"},tt.createElement(Qr,{value:c,onChange:s,label:t(["demo","testOnSite","label"])}),tt.createElement("button",{className:"cm-control-button cm-success",onClick:function(e){e.preventDefault(),g()}},t(["demo","testOnSite","button"])))),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("div",{className:"cm-control"},tt.createElement("select",{value:u,onChange:function(e){return f(e.target.value)}},b)),tt.createElement("div",{className:"cm-control"},tt.createElement("button",{className:"cm-control-button cm-secondary",onClick:function(){v(new Oo),i(o+1)}},t(["demo","reset"])),tt.createElement("button",{className:"cm-control-button",onClick:function(){i(o+1)}},t(["demo","showManager"])))),tt.createElement("div",{ref:_},tt.createElement(Or,{t:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return ft.apply(void 0,[h,u,r.fallbackLang||"zz"].concat(t))},lang:u,manager:y,config:r,show:o})))},json:function(e){var t=e.t,r=e.config,n=e.updateConfig,o=le(null),i=xo(ie(),2),a=i[0],c=i[1],s=xo(ie(),2),l=s[0],u=s[1],f=JSON.stringify(r,void 0,2),p=new Blob([f],{type:"application/json"}),d=URL.createObjectURL(p);return tt.createElement("div",{className:"cm-json"},tt.createElement("h3",{className:"cm-space-lg"},t(["json","importExport"])),a&&tt.createElement("p",{className:"cm-message cm-error"},a),l&&tt.createElement("p",{className:"cm-message cm-success"},l),tt.createElement("form",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement("label",{htmlFor:"cm-file-import",className:"cm-upload-label"},tt.createElement("a",{className:"cm-control-button cm-success"},"↥ ",t(["json","import"]))),tt.createElement("input",{onChange:function(){var e=function(e){var t=e.current.files[0];if(t)return new Promise((function(e,r){var n=new FileReader;n.onload=function(){return e(n.result)},n.onerror=r,n.readAsText(t)}))}(o);u(),c(),e.then((function(e){try{var r=JSON.parse(e);n([],r),u(t(["json","success"]))}catch(e){console.log(e),c(t(["json","invalidJSON"]))}})),e.catch((function(){return c(t(["json","cannotReadFile"]))}))},ref:o,className:"cm-file-import",id:"cm-file-import",type:"file"}),tt.createElement("a",{download:"klaro-config.json",href:d,className:"cm-control-button cm-primary"},"↧ ",t(["json","export"])))),tt.createElement("p",null,t(["json","rawText"])),tt.createElement("pre",null,tt.createElement("code",null,JSON.stringify(r,void 0,2))))},styling:function(t){var r=t.config,n=t.disabled,o=t.controls,i=t.updateConfig,a=t.t,c=co.styling.map((function(t){var c=o[t.control]||e[t.control];return tt.createElement(c,No({disabled:n,prefix:["styling"],updateConfig:function(e,t){return i(["styling"].concat(function(e){if(Array.isArray(e))return To(e)}(r=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return To(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?To(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),t,!0);var r},config:r.styling||{themes:[]},t:a,key:t.name,field:t},t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},a(["styling","description"])),tt.createElement("fieldset",{className:"cm-styling-fields",disabled:n},c))}},li=function(e){function t(e){return Xo(this,t),ni(this,t,[e])}return ai(t,e),ti(t,[{key:"render",value:function(){var e,t=this.props,r=t.state,n=t.setState,o=t.className,i=t.onConfigAction,a=t.configs,c=t.t,s=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(t,Yo),l=r.activeConfig;if(void 0!==l){var u=a.find((function(e){return e.name===l}));e=tt.createElement(ui,Qo({state:r.configState,setState:function(e){var t=Object.assign({},r);t.configState=e,n(t)},t:c,unsetConfig:function(){n({activeConfig:void 0})},config:u},s))}else e=tt.createElement(zo,{onConfigAction:i,onClick:function(e){return n({activeConfig:e.name})},configs:a,t:c});return tt.createElement("div",{className:o||"klaro-ide"},e)}}]),t}(tt.Component),ui=function(e){function t(){return Xo(this,t),ni(this,t,arguments)}return ai(t,e),ti(t,[{key:"render",value:function(){var e=this.props,t=e.t,r=e.disabled,n=e.controls,o=e.setState,i=e.config,a=e.services,c=e.unsetConfig,s=e.saveConfig,l=e.resetConfig,u=e.updateConfig,f=(e.deleteConfig,this.props.state||{tab:"services"}),p=f.tab,d=si[p],v=f[p],m=["services","globals","translations","json","styling","testing"].map((function(e){return tt.createElement(Fo,{key:e,onClick:function(){return function(e){return o({tab:e})}(e)},active:p===e},t(["ide",e]))}));return tt.createElement(tt.Fragment,null,tt.createElement("div",{className:"cm-config-controls"},tt.createElement("h2",null,tt.createElement("a",{onClick:function(){return c()}},t(["configs","title"])," ›")," ","default"===i.name?t(["configs","default","title"]):i.name),tt.createElement("fieldset",null,tt.createElement("button",{disabled:r||!i.modified,className:"cm-control-button cm-secondary",onClick:function(e){return e.preventDefault()||l(i.name)}},t(["config","reset"])),tt.createElement("button",{disabled:r||!i.modified,className:"cm-control-button",onClick:function(e){return e.preventDefault()||s(i.name)}},t(["config","save"])),!1)),tt.createElement(Bo,{key:"tabs"},m),tt.createElement(d,{state:v,setState:function(e){var t=Object.assign({},f);t[p]=e,o(t)},disabled:r,services:a,config:i,updateConfig:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return u.apply(void 0,[i.name].concat(t))},controls:n,t}))}}]),t}(tt.Component);tt.Component;var fi,pi=Tr({});function di(e){var t=function(e){if(void 0!==e&&void 0!==e.lang&&"zz"!==e.lang)return e.lang;var t=(("string"==typeof window.language?window.language:null)||document.documentElement.lang||(void 0!==e&&void 0!==e.languages&&void 0!==e.languages[0]?e.languages[0]:"en")).toLowerCase(),r=new RegExp("^([\\w]+)-([\\w]+)$").exec(t);return null===r?t:r[1]}(e),r=function(e,t){var r=function(e,t){return(e.elementID||"klaro")+(t?"-ide":"")}(e,t),n=document.getElementById(r);return null===n&&((n=document.createElement("div")).id=r,document.body.appendChild(n)),n}(e,!0),n=Be(tt.createElement(li,{t:function(){for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return ft.apply(void 0,[pi,t,e.fallbackLang||"en"].concat(n))},lang:t,config:e}),r);return n}function vi(e){di(e=e||fi)}function mi(){return"v"==="v0.7.19"[0]?"v0.7.19".slice(1):"v0.7.19"}function yi(){vi()}!function(){var e=(0,Pr.XZ)("klaro");if(void 0!==e){var t=e.getAttribute("data-config")||"klaroConfig";fi=window[t];var r=e.getAttribute("data-style-prefix");void 0===r&&(fi.stylePrefix=r),void 0!==fi&&(/complete|interactive|loaded/.test(document.readyState)?yi():window.addEventListener("DOMContentLoaded",yi))}}()})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,