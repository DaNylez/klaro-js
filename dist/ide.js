/*! For license information please see ide.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ide=t():e.ide=t()}(self,(()=>(()=>{var e={2690:(e,t,n)=>{"use strict";function r(){for(var e=document.cookie.split(";"),t=[],n=new RegExp("^\\s*([^=]+)\\s*=\\s*(.*?)$"),r=0;r<e.length;r++){var o=e[r],i=n.exec(o);null!==i&&t.push({name:i[1],value:i[2]})}return t}function o(e,t,n){var r=e+"=; Max-Age=-99999999;";document.cookie=r,r+=" path="+(t||"/")+";",document.cookie=r,void 0!==n&&(r+=" domain="+n+";",document.cookie=r)}n.d(t,{default:()=>I}),n(9305),n(2733),n(4701),n(1678),n(4776),n(4382),n(9892),n(4962),n(6584),n(9336),n(4754),n(1908),n(94),n(7132),n(6457),n(8908),n(3810),n(8557),n(646),n(5021),n(3687),n(2745),n(3994),n(3062),n(4062),n(3630),n(2367);var i=n(5482);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function c(e,t,n){return t=l(t),function(e,t){if(t&&("object"===a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,s()?Reflect.construct(t,n||[],l(e).constructor):t.apply(e,n))}function s(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(s=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,m(r.key),r)}}function A(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function m(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=a(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(t)?t:String(t)}n(6437),n(2697),n(1359);var v=function(){function e(){p(this,e),this.value=null}return A(e,[{key:"get",value:function(){return this.value}},{key:"set",value:function(e){this.value=e}},{key:"delete",value:function(){this.value=null}}]),e}(),h=function(){function e(t){p(this,e),this.cookieName=t.storageName,this.cookieDomain=t.cookieDomain,this.cookiePath=t.cookiePath,this.cookieExpiresAfterDays=t.cookieExpiresAfterDays}return A(e,[{key:"get",value:function(){var e=function(e){for(var t=r(),n=0;n<t.length;n++)if(t[n].name===e)return t[n];return null}(this.cookieName);return e?e.value:null}},{key:"set",value:function(e){return function(e,t,n,r,o){var i="";if(n){var a=new Date;a.setTime(a.getTime()+24*n*60*60*1e3),i="; expires="+a.toUTCString()}void 0!==r&&(i+="; domain="+r),i+=void 0!==o?"; path="+o:"; path=/",document.cookie=e+"="+(t||"")+i+"; SameSite=Lax"}(this.cookieName,e,this.cookieExpiresAfterDays,this.cookieDomain,this.cookiePath)}},{key:"delete",value:function(){return o(this.cookieName)}}]),e}(),b=function(){function e(t,n){p(this,e),this.key=t.storageName,this.handle=n}return A(e,[{key:"get",value:function(){return this.handle.getItem(this.key)}},{key:"getWithKey",value:function(e){return this.handle.getItem(e)}},{key:"set",value:function(e){return this.handle.setItem(this.key,e)}},{key:"setWithKey",value:function(e,t){return this.handle.setItem(e,t)}},{key:"delete",value:function(){return this.handle.removeItem(this.key)}},{key:"deleteWithKey",value:function(e){return this.handle.removeItem(e)}}]),e}(),y=function(e){function t(e){return p(this,t),c(this,t,[e,localStorage])}return u(t,e),A(t)}(b),g=function(e){function t(e){return p(this,t),c(this,t,[e,sessionStorage])}return u(t,e),A(t)}(b);const C={cookie:h,test:v,localStorage:y,sessionStorage:g};function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function w(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=_(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function x(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||_(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function j(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){var r,o,i;r=e,o=t,i=n[t],(o=B(o))in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,B(r.key),r)}}function B(e){var t=function(e,t){if("object"!=k(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=k(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==k(t)?t:String(t)}var I=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.config=t,this.store=void 0!==n?n:new C[this.storageMethod](this),void 0===this.store&&(this.store=C.cookie),this.auxiliaryStore=void 0!==r?r:new g(this),this.consents=this.defaultConsents,this.confirmed=!1,this.changed=!1,this.states={},this.initialized={},this.executedOnce={},this.watchers=new Set([]),this.loadConsents(),this.applyConsents(),this.savedConsents=j({},this.consents)}var t,n;return t=e,(n=[{key:"storageMethod",get:function(){return this.config.storageMethod||"cookie"}},{key:"storageName",get:function(){return this.config.storageName||this.config.cookieName||"klaro"}},{key:"cookieDomain",get:function(){return this.config.cookieDomain||void 0}},{key:"cookiePath",get:function(){return this.config.cookiePath||void 0}},{key:"cookieExpiresAfterDays",get:function(){return this.config.cookieExpiresAfterDays||120}},{key:"defaultConsents",get:function(){for(var e={},t=0;t<this.config.services.length;t++){var n=this.config.services[t];e[n.name]=this.getDefaultConsent(n)}return e}},{key:"watch",value:function(e){this.watchers.has(e)||this.watchers.add(e)}},{key:"unwatch",value:function(e){this.watchers.has(e)&&this.watchers.delete(e)}},{key:"notify",value:function(e,t){var n=this;this.watchers.forEach((function(r){r.update(n,e,t)}))}},{key:"getService",value:function(e){var t=this.config.services.filter((function(t){return t.name===e}));if(t.length>0)return t[0]}},{key:"getDefaultConsent",value:function(e){var t=e.default||e.required;return void 0===t&&(t=this.config.default),void 0===t&&(t=!1),t}},{key:"changeAll",value:function(e){var t=this,n=0;return this.config.services.filter((function(e){return!e.contextualConsentOnly})).map((function(r){r.required||t.config.required||e?t.updateConsent(r.name,!0)&&n++:t.updateConsent(r.name,!1)&&n++})),n}},{key:"updateConsent",value:function(e,t){var n=(this.consents[e]||!1)!==t;return this.consents[e]=t,this.notify("consents",this.consents),n}},{key:"resetConsents",value:function(){this.consents=this.defaultConsents,this.states={},this.confirmed=!1,this.applyConsents(),this.savedConsents=j({},this.consents),this.store.delete(),this.notify("consents",this.consents)}},{key:"getConsent",value:function(e){return this.consents[e]||!1}},{key:"loadConsents",value:function(){var e=this.store.get();return null!==e&&(this.consents=JSON.parse(decodeURIComponent(e)),this._checkConsents(),this.notify("consents",this.consents)),this.consents}},{key:"saveAndApplyConsents",value:function(e){this.saveConsents(e),this.applyConsents()}},{key:"changedConsents",value:function(){for(var e={},t=0,n=Object.entries(this.consents);t<n.length;t++){var r=x(n[t],2),o=r[0],i=r[1];this.savedConsents[o]!==i&&(e[o]=i)}return e}},{key:"saveConsents",value:function(e){var t=encodeURIComponent(JSON.stringify(this.consents));this.store.set(t),this.confirmed=!0,this.changed=!1;var n=this.changedConsents();this.savedConsents=j({},this.consents),this.notify("saveConsents",{changes:n,consents:this.consents,type:e||"script"})}},{key:"applyConsents",value:function(e,t,n){function r(e,t){if(void 0!==e)return("function"==typeof e?e:new Function("opts",e))(t)}for(var o=0,i=0;i<this.config.services.length;i++){var a=this.config.services[i];if(void 0===n||n===a.name){var c=a.vars||{},s={service:a,config:this.config,vars:c};this.initialized[a.name]||(this.initialized[a.name]=!0,r(a.onInit,s))}}for(var l=0;l<this.config.services.length;l++){var u=this.config.services[l];if(void 0===n||n===u.name){var d=this.states[u.name],p=u.vars||{},f=void 0!==u.optOut?u.optOut:this.config.optOut||!1,A=void 0!==u.required?u.required:this.config.required||!1,m=this.confirmed||f||e||t,v=this.getConsent(u.name)&&m||A,h={service:u,config:this.config,vars:p,consents:this.consents,confirmed:this.confirmed};d!==v&&o++,e||(r(v?u.onAccept:u.onDecline,h),this.updateServiceElements(u,v),this.updateServiceStorage(u,v),void 0!==u.callback&&u.callback(v,u),void 0!==this.config.callback&&this.config.callback(v,u),this.states[u.name]=v)}}return this.notify("applyConsents",o,n),o}},{key:"updateServiceElements",value:function(e,t){if(t){if(e.onlyOnce&&this.executedOnce[e.name])return;this.executedOnce[e.name]=!0}for(var n=document.querySelectorAll("[data-name='"+e.name+"']"),r=0;r<n.length;r++){var o=n[r],a=o.parentElement,c=(0,i.RT)(o),s=c.type,l=c.src,u=c.href,d=["href","src","type"];if("placeholder"!==s)if("IFRAME"===o.tagName){if(t&&o.src===l){console.debug("Skipping ".concat(o.tagName," for service ").concat(e.name,", as it already has the correct type..."));continue}var p,f=document.createElement(o.tagName),A=w(o.attributes);try{for(A.s();!(p=A.n()).done;){var m=p.value;f.setAttribute(m.name,m.value)}}catch(e){A.e(e)}finally{A.f()}f.innerText=o.innerText,f.text=o.text,t?(void 0!==c["original-display"]&&(f.style.display=c["original-display"]),void 0!==c.src&&(f.src=c.src)):(f.src="",void 0!==c["modified-by-klaro"]&&void 0!==c["original-display"]?f.setAttribute("data-original-display",c["original-display"]):(void 0!==o.style.display&&f.setAttribute("data-original-display",o.style.display),f.setAttribute("data-modified-by-klaro","yes")),f.style.display="none"),a.insertBefore(f,o),a.removeChild(o)}else if("SCRIPT"===o.tagName||"LINK"===o.tagName){if(t&&o.type===(s||"")&&o.src===l){console.debug("Skipping ".concat(o.tagName," for service ").concat(e.name,", as it already has the correct type or src..."));continue}var v,h=document.createElement(o.tagName),b=w(o.attributes);try{for(b.s();!(v=b.n()).done;){var y=v.value;h.setAttribute(y.name,y.value)}}catch(e){b.e(e)}finally{b.f()}h.innerText=o.innerText,h.text=o.text,t?(h.type=s||"",void 0!==l&&(h.src=l),void 0!==u&&(h.href=u)):h.type="text/plain",a.insertBefore(h,o),a.removeChild(o)}else{if(t){var g,C=w(d);try{for(C.s();!(g=C.n()).done;){var k=g.value,x=c[k];void 0!==x&&(void 0===c["original-"+k]&&(c["original-"+k]=o[k]),o[k]=x)}}catch(e){C.e(e)}finally{C.f()}void 0!==c.title&&(o.title=c.title),void 0!==c["original-display"]?o.style.display=c["original-display"]:o.style.removeProperty("display")}else{void 0!==c.title&&o.removeAttribute("title"),void 0===c["original-display"]&&void 0!==o.style.display&&(c["original-display"]=o.style.display),o.style.display="none";var _,E=w(d);try{for(E.s();!(_=E.n()).done;){var S=_.value;void 0!==c[S]&&(void 0!==c["original-"+S]?o[S]=c["original-"+S]:o.removeAttribute(S))}}catch(e){E.e(e)}finally{E.f()}}(0,i.X7)(c,o)}else t?(o.style.display="none",c["original-display"]=o.style.display):o.style.display=c["original-display"]||"block"}}},{key:"updateServiceStorage",value:function(e,t){if(!t&&void 0!==e.cookies&&e.cookies.length>0)for(var n=r(),i=0;i<e.cookies.length;i++){var a=e.cookies[i],c=void 0,s=void 0;if(a instanceof Array){var l=x(a,3);a=l[0],c=l[1],s=l[2]}else if(a instanceof Object&&!(a instanceof RegExp)){var u=a;a=u.pattern,c=u.path,s=u.domain}if(void 0!==a){a instanceof RegExp||(a=a.startsWith("^")?new RegExp(a):new RegExp("^"+a.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")+"$"));for(var d=0;d<n.length;d++){var p=n[d];null!==a.exec(p.name)&&(console.debug("Deleting cookie:",p.name,"Matched pattern:",a,"Path:",c,"Domain:",s),o(p.name,c,s),void 0===s&&o(p.name,c,"."+window.location.hostname))}}}}},{key:"_checkConsents",value:function(){for(var e=!0,t=new Set(this.config.services.map((function(e){return e.name}))),n=new Set(Object.keys(this.consents)),r=0,o=Object.keys(this.consents);r<o.length;r++){var i=o[r];t.has(i)||delete this.consents[i]}var a,c=w(this.config.services);try{for(c.s();!(a=c.n()).done;){var s=a.value;n.has(s.name)||(this.consents[s.name]=this.getDefaultConsent(s),e=!1)}}catch(e){c.e(e)}finally{c.f()}this.confirmed=e,e||(this.changed=!0)}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}()},5482:(e,t,n)=>{"use strict";function r(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(e){if(null!==document.currentScript&&void 0!==document.currentScript)return document.currentScript;for(var t=document.getElementsByTagName("script"),n=0;n<t.length;n++){var r=t[n];if(r.src.includes(e))return r}return null}function a(e){for(var t={},n=0;n<e.attributes.length;n++){var r=e.attributes[n];r.name.startsWith("data-")&&(t[r.name.slice(5)]=r.value)}return t}function c(e,t){for(var n=Object.keys(e),r=0;r<n.length;r++){var o=n[r],i=e[o];t[o]!==i&&t.setAttribute("data-"+o,i)}}function s(e){var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=r(e))){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,c=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return c=e.done,e},e:function(e){s=!0,a=e},f:function(){try{c||null==n.return||n.return()}finally{if(s)throw a}}}}(document.querySelectorAll("style[data-context=klaro-styles]"));try{for(n.s();!(t=n.n()).done;){var o=t.value,i=o.innerText;void 0!==o.styleSheet&&(i=o.styleSheet.cssText);for(var a=function(){var e,t,n=(e=s[c],t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],a=n[1],l=new RegExp("([a-z0-9-]+):[^;]+;[\\s\\n]*\\1:\\s*var\\(--"+o+",\\s*[^\\)]+\\)","g");i=i.replace(l,(function(e,t){return"".concat(t,": ").concat(a,"; ").concat(t,": var(--").concat(o,", ").concat(a,")")}))},c=0,s=Object.entries(e);c<s.length;c++)a();var l=document.createElement("style");l.setAttribute("type","text/css"),l.setAttribute("data-context","klaro-styles"),void 0!==l.styleSheet?l.styleSheet.cssText=i:l.innerText=i,o.parentElement.appendChild(l),o.parentElement.removeChild(o)}}catch(e){n.e(e)}finally{n.f()}}n.d(t,{N3:()=>s,RT:()=>a,X7:()=>c,XZ:()=>i}),n(9305),n(2733),n(4701),n(4776),n(9892),n(6281),n(4962),n(9336),n(1908),n(7132),n(3810),n(8557),n(646),n(5021),n(3687),n(9425),n(3994),n(3062),n(4062),n(2367)},5514:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var r=n(4942),o=n.n(r),i=n(278),a=n.n(i)()(o());a.push([e.id,'.klaro-ide .cm-switch-container{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8);display:block;position:relative;padding:10px;padding-left:66px;line-height:20px;vertical-align:middle;min-height:40px}.klaro-ide .cm-switch-container:last-child{border-bottom:0}.klaro-ide .cm-switch-container:first-child{margin-top:0}.klaro-ide .cm-switch-container p{margin-top:0}.klaro-ide .cm-switch{position:relative;display:inline-block;width:50px;height:30px}.klaro-ide .cm-list-input:checked+.cm-list-label .slider{background-color:#1a936f;background-color:var(--green1, #1a936f)}.klaro-ide .cm-list-input.half-checked:checked+.cm-list-label .slider{background-color:#1a936f;background-color:var(--green1, #1a936f);opacity:.6}.klaro-ide .cm-list-input.half-checked:checked+.cm-list-label .slider::before{-ms-transform:translateX(10px);transform:translateX(10px)}.klaro-ide .cm-list-input.only-required+.cm-list-label .slider{background-color:#24cc9a;background-color:var(--green2, #24cc9a);opacity:.8}.klaro-ide .cm-list-input.only-required+.cm-list-label .slider::before{-ms-transform:translateX(10px);transform:translateX(10px)}.klaro-ide .cm-list-input.required:checked+.cm-list-label .slider{background-color:#24cc9a;background-color:var(--green2, #24cc9a);opacity:.8;cursor:not-allowed}.klaro-ide .slider{box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19)}.klaro-ide .cm-list-input{position:absolute;top:0;left:0;opacity:0;width:50px;height:30px}.klaro-ide .cm-list-title{font-size:.9em;font-weight:600}.klaro-ide .cm-list-description{color:#7c7c7c;color:var(--dark3, #7c7c7c);font-size:.9em;padding-top:4px}.klaro-ide .cm-list-label .cm-switch{position:absolute;left:0}.klaro-ide .cm-list-label .slider{background-color:#f2f2f2;background-color:var(--white2, #f2f2f2);position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;transition:.4s;width:50px;display:inline-block}.klaro-ide .cm-list-label .slider::before{background-color:#e6e6e6;background-color:var(--white3, #e6e6e6);position:absolute;content:"";height:20px;width:20px;left:5px;bottom:5px;transition:.4s}.klaro-ide .cm-list-label .slider.round{border-radius:30px}.klaro-ide .cm-list-label .slider.round::before{border-radius:50%}.klaro-ide .cm-list-label input:focus+.slider{box-shadow-color:#48dfb2;box-shadow-color:var(--green3, #48dfb2);box-shadow:0 0 1px var(--box-shadow-color, green3)}.klaro-ide .cm-list-label input:checked+.slider::before{-ms-transform:translateX(20px);transform:translateX(20px)}.klaro-ide .cm-list-input:focus+.cm-list-label .slider{box-shadow:0 4px 6px 0 rgba(125,125,125,.2),5px 5px 10px 0 rgba(125,125,125,.19)}.klaro-ide .cm-list-input:checked+.cm-list-label .slider::before{-ms-transform:translateX(20px);transform:translateX(20px)}.klaro-ide .cm-language-select,.klaro-ide .cm-theme-select,.klaro-ide .cm-purpose-select{border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#fff;background-color:var(--white1, #fff);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#c8c8c8;border-color:var(--light2, #c8c8c8);box-shadow:0 2px 5px 0 rgba(0,0,0,.11);padding:12px;margin-bottom:12px}.klaro-ide .cm-language-select ul.cm-languages,.klaro-ide .cm-language-select ul.cm-themes,.klaro-ide .cm-language-select ul.cm-purposes,.klaro-ide .cm-theme-select ul.cm-languages,.klaro-ide .cm-theme-select ul.cm-themes,.klaro-ide .cm-theme-select ul.cm-purposes,.klaro-ide .cm-purpose-select ul.cm-languages,.klaro-ide .cm-purpose-select ul.cm-themes,.klaro-ide .cm-purpose-select ul.cm-purposes{margin-top:-4px}.klaro-ide .cm-language-select ul.cm-languages li,.klaro-ide .cm-language-select ul.cm-themes li,.klaro-ide .cm-language-select ul.cm-purposes li,.klaro-ide .cm-theme-select ul.cm-languages li,.klaro-ide .cm-theme-select ul.cm-themes li,.klaro-ide .cm-theme-select ul.cm-purposes li,.klaro-ide .cm-purpose-select ul.cm-languages li,.klaro-ide .cm-purpose-select ul.cm-themes li,.klaro-ide .cm-purpose-select ul.cm-purposes li{color:#fafafa;color:var(--light1, #fafafa);border-radius:4px;border-radius:var(--border-radius, 4px);border-width:1px;border-width:var(--border-width, 1px);border-style:solid;border-style:var(--border-style, solid);border-color:#24cc9a;border-color:var(--green2, #24cc9a);background-color:#1a936f;background-color:var(--green1, #1a936f);display:inline-block;margin-right:4px;margin-top:4px;padding:2px 4px;font-size:.9em}.klaro-ide .cm-language-select ul.cm-languages li a,.klaro-ide .cm-language-select ul.cm-themes li a,.klaro-ide .cm-language-select ul.cm-purposes li a,.klaro-ide .cm-theme-select ul.cm-languages li a,.klaro-ide .cm-theme-select ul.cm-themes li a,.klaro-ide .cm-theme-select ul.cm-purposes li a,.klaro-ide .cm-purpose-select ul.cm-languages li a,.klaro-ide .cm-purpose-select ul.cm-themes li a,.klaro-ide .cm-purpose-select ul.cm-purposes li a{color:#fff;color:var(--white1, #fff)}.klaro-ide .cm-search-select{margin-top:12px;margin-bottom:12px;display:flex}.klaro-ide .cm-search-select input:not(:focus)~.cm-candidates{display:none}.klaro-ide .cm-search-select .cm-candidates:hover{display:block !important}.klaro-ide .cm-search-select .cm-candidates{background-color:#fff;background-color:var(--white1, #fff);border-radius:4px;border-radius:var(--border-radius, 4px);border-width:1px;border-width:var(--border-width, 1px);border-style:solid;border-style:var(--border-style, solid);border-color:#f2f2f2;border-color:var(--white2, #f2f2f2);position:absolute;top:55px;left:0;z-index:10;margin-bottom:10px;width:100%}.klaro-ide .cm-search-select .cm-candidates .cm-candidate{border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-color:#7c7c7c;border-bottom-color:var(--dark3, #7c7c7c);padding:12px;cursor:pointer}.klaro-ide .cm-search-select .cm-candidates .cm-candidate p{color:#5c5c5c;color:var(--dark2, #5c5c5c);font-size:.9em}.klaro-ide .cm-search-select .cm-candidates .cm-candidate:last-child{border-bottom-style:none}.klaro-ide .cm-obj-selector{position:relative;display:inline-block;margin-bottom:10px;margin-right:20px;width:100%;height:40px;overflow:visible}@media(min-width: 768px){.klaro-ide .cm-obj-selector{width:300px}}.klaro-ide .cm-obj-selector span.cm-obj-selector-more{display:block;position:absolute;right:.5em;padding-top:.6em;padding-right:.3em;z-index:2;pointer-events:none;-ms-transform:scaleY(0.6) scaleX(0.8);transform:scaleY(0.6) scaleX(0.8);font-weight:800}.klaro-ide .cm-obj-selector ul{background-color:#fff;background-color:var(--white1, #fff);top:0;left:0;z-index:1;margin:0;display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap}.klaro-ide .cm-obj-selector ul li{background-color:#fff;background-color:var(--white1, #fff);border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#f2f2f2;border-bottom-color:var(--white2, #f2f2f2);box-shadow:0 2px 5px 0 rgba(0,0,0,.33);margin:0;width:auto;display:none;width:100%;order:2}.klaro-ide .cm-obj-selector ul li:last-child{border-bottom-style:none}.klaro-ide .cm-obj-selector ul li.cm-obj-is-active{background-color:#c8c8c8;background-color:var(--light2, #c8c8c8);display:flex;order:1}.klaro-ide .cm-obj-selector ul li a.cm-obj-item{width:100%;padding:8px;padding-right:40px}.klaro-ide .cm-obj-selector ul li.cm-obj-add{padding:8px;display:none;justify-content:space-between;order:3}.klaro-ide .cm-obj-selector ul li.cm-obj-add input{color:#333;color:var(--dark1, #333);border-color:#5c5c5c;border-color:var(--dark2, #5c5c5c);border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);flex-grow:1;flex-shrink:1;padding:4px;font-size:.9em}.klaro-ide .cm-obj-selector ul li.cm-obj-add a.cm-btn{color:#fff;color:var(--white1, #fff);border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#7c7c7c;background-color:var(--dark3, #7c7c7c);padding:8px;flex-grow:0;flex-shrink:0;margin-left:10px;width:auto;display:inline-block}.klaro-ide .cm-obj-selector ul:not(.cm-is-active) li.cm-obj-is-active{background-color:#fff;background-color:var(--white1, #fff)}.klaro-ide .cm-obj-selector ul.cm-is-active{z-index:4}.klaro-ide .cm-obj-selector ul.cm-is-active li{display:flex}.klaro-ide .cm-switch{padding:12px}.klaro-ide p.cm-description{color:#5c5c5c;color:var(--dark2, #5c5c5c);font-size:.9em;padding-top:2px;margin-bottom:4px}.klaro-ide .cm-select{margin-top:16px}.klaro-ide .cm-select select{background-color:#fff;background-color:var(--white1, #fff);color:#5c5c5c;color:var(--dark2, #5c5c5c);border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-color:#f2f2f2;border-color:var(--white2, #f2f2f2);display:block;width:100%;padding:12px 5px;font-size:.9em;text-indent:5px}.klaro-ide .cm-select select[disabled]{background-color:#c8c8c8;background-color:var(--light2, #c8c8c8)}.klaro-ide .cm-retracting-label-input{display:inline-block;position:relative;width:100%;padding:10px 0 6px;margin-top:4px}.klaro-ide .cm-retracting-label-input>.cm-label{background-color:#fff;background-color:var(--white1, #fff);border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#c8c8c8;border-color:var(--light2, #c8c8c8);position:absolute;top:16px;left:8px;white-space:nowrap;text-overflow:ellipsis;max-width:calc(100% - 16px);overflow:hidden;pointer-events:none;transition:transform 150ms cubic-bezier(0.47, 0, 0.74, 0.71),opacity 150ms cubic-bezier(0.47, 0, 0.74, 0.71),color 150ms cubic-bezier(0.47, 0, 0.74, 0.71);padding:0 8px;-ms-transform:scale(0.75) translateX(-16%) translateY(-26px);transform:scale(0.75) translateX(-16%) translateY(-26px)}.klaro-ide .cm-input{border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#fafafa;background-color:var(--light1, #fafafa);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#1a936f;border-color:var(--green1, #1a936f);font-size:.9em;box-sizing:border-box;padding:12px 18px;width:100%}.klaro-ide .cm-input[disabled]{background-color:#c8c8c8;background-color:var(--light2, #c8c8c8)}@media(min-width: 768px){.klaro-ide .cm-tabs span.cm-more{display:none}}.klaro-ide .cm-tabs{position:relative;display:flex;align-items:stretch;justify-content:space-between;white-space:nowrap}@media(min-width: 768px){.klaro-ide .cm-tabs span.cm-tabs-more{display:none}}@media(max-width: 768px){.klaro-ide .cm-tabs{border-radius:4px;border-radius:var(--border-radius, 4px);border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#fff;background-color:var(--white1, #fff);box-shadow:0 2px 5px 0 rgba(0,0,0,.33)}.klaro-ide .cm-tabs span.cm-tabs-more{display:block;position:absolute;right:.5em;padding-top:.6em;padding-right:.3em;-ms-transform:scaleY(0.6) scaleX(0.8);transform:scaleY(0.6) scaleX(0.8);font-weight:800}.klaro-ide .cm-tabs ul{flex-wrap:wrap}.klaro-ide .cm-tabs ul li{display:block;position:relative;width:100%;text-align:left}.klaro-ide .cm-tabs ul li a{justify-content:left;border-bottom:0 !important}.klaro-ide .cm-tabs:not(.cm-tabs-active) ul li:not(.cm-tab-is-active){display:none}.klaro-ide .cm-tabs.cm-tabs-active ul li{order:2;display:block}.klaro-ide .cm-tabs.cm-tabs-active ul li.cm-tab-is-active{background-color:#c8c8c8;background-color:var(--light2, #c8c8c8);order:1}}.klaro-ide .cm-tabs:not(:last-child){margin-bottom:1.5rem}.klaro-ide .cm-tabs ul{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8);align-items:center;display:flex;width:100%;flex-grow:1;flex-shrink:0;justify-content:flex-start;margin:0;padding:0}.klaro-ide .cm-tabs ul li{display:block}.klaro-ide .cm-tabs ul li a{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8);color:#5c5c5c;color:var(--dark2, #5c5c5c);display:flex;align-items:flex-start;justify-content:left;margin-bottom:-1px;padding:.5em 1em}.klaro-ide .cm-tabs ul li.cm-tab-is-active a{color:#2581c4;color:var(--blue1, #2581c4);border-bottom-color:#2581c4;border-bottom-color:var(--blue1, #2581c4)}@media(max-width: 767px){.klaro-ide .cm-tabs.tabs-active{position:relative;min-height:40px;overflow:visible;z-index:10}.klaro-ide .cm-tabs.tabs-active ul{background-color:#fff;background-color:var(--white1, #fff);display:flex;flex-direction:column;flex-wrap:wrap;position:absolute;width:100%;height:auto;box-shadow:0 2px 5px 0 rgba(0,0,0,.33)}.klaro-ide .cm-tabs.tabs-active ul li{margin:0 !important}.klaro-ide .cm-tabs.tabs-active ul li:not(.cm-tab-is-active){order:2;display:block}.klaro-ide .cm-tabs.tabs-active ul li.cm-tab-is-active{background-color:#fafafa;background-color:var(--light1, #fafafa);order:1;display:block}}.klaro-ide .cm-list .cm-item{display:flex;flex-direction:row;align-items:center;padding:8px;display:flex;flex-direction:row;align-items:top;justify-items:flex-end}@media(min-width: 768px){.klaro-ide .cm-list .cm-item span.cm-is-action{display:none}.klaro-ide .cm-list .cm-item:hover span.cm-is-action{display:inline-block}}.klaro-ide .cm-list .cm-item:last-child{border-bottom:0}.klaro-ide .cm-list .cm-item:nth-child(2n){background-color:#fafafa;background-color:var(--light1, #fafafa)}.klaro-ide .cm-list .cm-item.cm-is-header{font-weight:600;margin-bottom:4px;background:none}.klaro-ide .cm-list .cm-item.cm-is-card{background-color:#fff;background-color:var(--white1, #fff);border-radius:4px;border-radius:var(--border-radius, 4px);box-shadow:0 2px 5px 0 rgba(0,0,0,.33);margin-bottom:24px}.klaro-ide .cm-list .cm-item.cm-is-clickable{cursor:pointer}.klaro-ide .cm-list .cm-item.cm-is-expandable{cursor:pointer}.klaro-ide .cm-list .cm-item form{margin:0}.klaro-ide .cm-list .cm-item form label.label{font-weight:300}.klaro-ide .cm-list .cm-item span.cm-is-action{position:absolute;right:1rem;top:1rem}.klaro-ide .cm-list .cm-item .cm-col{align-content:center;flex-basis:0;margin:8px;flex-grow:1}.klaro-ide .cm-list .cm-item .cm-col.cm-is-xs{flex-grow:1}.klaro-ide .cm-list .cm-item .cm-col.cm-is-sm{flex-grow:2}.klaro-ide .cm-list .cm-item .cm-col.cm-is-md{flex-grow:5}.klaro-ide .cm-list .cm-item .cm-col.cm-is-lg{flex-grow:10}.klaro-ide .cm-list .cm-item .cm-col.cm-is-xl{flex-grow:20}.klaro-ide .cm-list .cm-item .cm-col.cm-is-icon{flex-basis:50px;text-align:right;flex-grow:0}.klaro-ide .cm-list .cm-item .cm-content{flex:10}.klaro-ide .cm-dropdown{position:relative}.klaro-ide .cm-dropdown>button{display:inline-flex;vertical-align:middle;align-items:center;justify-content:center;width:2em;height:2em;font-size:1em;border:0;background-color:rgba(0,0,0,0)}.klaro-ide .cm-dropdown>button:focus,.klaro-ide .cm-dropdown>button:hover{background-color:#fafafa;background-color:var(--light1, #fafafa);border-radius:25px}.klaro-ide .cm-dropdown>.cm-dropdowncontent{background-color:#fff;background-color:var(--white1, #fff);display:none;box-shadow:0 2px 5px 0 rgba(0,0,0,.33);width:auto}.klaro-ide .cm-dropdown>.cm-dropdowncontent.cm-dropdownexpanded{border-radius:4px;border-radius:var(--border-radius, 4px);display:block;position:absolute;top:35px;z-index:100;left:0}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu{border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#5c5c5c;border-color:var(--dark2, #5c5c5c);list-style:none;text-align:left;max-width:300px;min-width:200px;padding-top:.25rem;padding-bottom:.25rem}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu li{height:auto}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu li a{display:block;padding:8px;padding-left:16px}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu li a span{display:inline-flex;align-items:center}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu li a .icon{margin-right:.45em}.klaro-ide .cm-dropdown>.cm-dropdowncontent ul.cm-dropdownmenu li a:hover{background-color:#2581c4;background-color:var(--blue1, #2581c4);color:#fff;color:var(--white1, #fff)}.klaro-ide .cm-dropdown.is-right .cm-dropdowncontent.cm-dropdownexpanded{right:0;left:auto}.klaro-ide label{display:inline-block}.klaro-ide .cm-global-fields,.klaro-ide .cm-config-controls,.klaro-ide .cm-translations-fields,.klaro-ide .cm-service-fields{max-width:600px}.klaro-ide .cm-json .cm-file-import{display:none}.klaro-ide .cm-json .cm-upload-label{cursor:pointer}.klaro-ide .cm-json .cm-upload-label button{pointer-events:none}.klaro-ide .cm-json pre code{white-space:pre-wrap}.klaro-ide .cm-message{padding:12px}.klaro-ide .cm-message.cm-error,.klaro-ide .cm-message.cm-success{border-radius:4px;border-radius:var(--border-radius, 4px);color:#fff;color:var(--white1, #fff);box-shadow:0 2px 5px 0 rgba(0,0,0,.11);margin-bottom:24px}.klaro-ide .cm-message.cm-error{background-color:#e15669;background-color:var(--red2, #e15669)}.klaro-ide .cm-message.cm-success{background:#24cc9a;background:var(--green2, #24cc9a)}.klaro-ide .cm-space-sm{margin-bottom:8px !important}.klaro-ide .cm-space-md{margin-bottom:12px !important}.klaro-ide .cm-space-lg{margin-bottom:24px !important}.klaro-ide .cm-json h1,.klaro-ide .cm-json h2,.klaro-ide .cm-json h3,.klaro-ide .cm-json h4,.klaro-ide .cm-global-fields h1,.klaro-ide .cm-global-fields h2,.klaro-ide .cm-global-fields h3,.klaro-ide .cm-global-fields h4,.klaro-ide .cm-config-controls h1,.klaro-ide .cm-config-controls h2,.klaro-ide .cm-config-controls h3,.klaro-ide .cm-config-controls h4,.klaro-ide .cm-translations-fields h1,.klaro-ide .cm-translations-fields h2,.klaro-ide .cm-translations-fields h3,.klaro-ide .cm-translations-fields h4,.klaro-ide .cm-service-fields h1,.klaro-ide .cm-service-fields h2,.klaro-ide .cm-service-fields h3,.klaro-ide .cm-service-fields h4{font-size:2em;text-transform:uppercase;margin-top:10px;margin-bottom:10px;font-weight:600}.klaro-ide .cm-json h1,.klaro-ide .cm-global-fields h1,.klaro-ide .cm-config-controls h1,.klaro-ide .cm-translations-fields h1,.klaro-ide .cm-service-fields h1{border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#c8c8c8;border-color:var(--light2, #c8c8c8);text-transform:none;margin-bottom:20px;display:inline-block}.klaro-ide .cm-json h2,.klaro-ide .cm-global-fields h2,.klaro-ide .cm-config-controls h2,.klaro-ide .cm-translations-fields h2,.klaro-ide .cm-service-fields h2{font-size:1.6em}.klaro-ide .cm-json h3,.klaro-ide .cm-global-fields h3,.klaro-ide .cm-config-controls h3,.klaro-ide .cm-translations-fields h3,.klaro-ide .cm-service-fields h3{font-size:1.3em}.klaro-ide .cm-json h4,.klaro-ide .cm-global-fields h4,.klaro-ide .cm-config-controls h4,.klaro-ide .cm-translations-fields h4,.klaro-ide .cm-service-fields h4{font-size:1em;font-weight:600}.klaro-ide p.cm-section-description{color:#5c5c5c;color:var(--dark2, #5c5c5c);text-align:justify;margin-top:8px;margin-bottom:24px}.klaro-ide .cm-purpose-order ul{margin-top:12px;margin-bottom:12px}.klaro-ide .cm-purpose-order ul li{display:flex}.klaro-ide .cm-purpose-order ul li span.cm-buttons{border-radius:4px;border-radius:var(--border-radius, 4px);flex-grow:0;box-shadow:0 2px 5px 0 rgba(0,0,0,.11)}.klaro-ide .cm-purpose-order ul li span.cm-buttons a{padding:12px;display:inline-block}.klaro-ide .cm-purpose-order ul li span.cm-buttons a:hover{background:#1a936f;background:var(--green1, #1a936f)}.klaro-ide .cm-purpose-order ul li span.cm-value{flex-grow:1;padding:12px}.klaro-ide .cm-translations-fields .cm-translations-for-key{border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#fff;background-color:var(--white1, #fff);box-shadow:0 2px 5px 0 rgba(0,0,0,.11);padding:12px;margin-bottom:24px}.klaro-ide .cm-translations-fields .cm-translations-for-key li{display:flex;justify-content:space-between;align-items:flex-start}.klaro-ide .cm-translations-fields .cm-translations-for-key li span.cm-lang{font-family:Courier;display:block;padding:20px;margin-top:5px;flex-grow:0}.klaro-ide .cm-service-list .cm-status,.klaro-ide .cm-config-list .cm-status{text-align:left}.klaro-ide .cm-service-list .cm-status span,.klaro-ide .cm-config-list .cm-status span{padding-left:10px}.klaro-ide .cm-service-list .cm-status .cm-status-is-active,.klaro-ide .cm-config-list .cm-status .cm-status-is-active{color:#1a936f;color:var(--green1, #1a936f)}.klaro-ide .cm-service-list .cm-status .cm-status-is-inactive,.klaro-ide .cm-config-list .cm-status .cm-status-is-inactive{color:#da2c43;color:var(--red1, #da2c43)}.klaro-ide .cm-service-list .cm-name,.klaro-ide .cm-config-list .cm-name{text-transform:uppercase;font-weight:600}.klaro-ide p.cm-no-cookies,.klaro-ide p.cm-no-services{margin-top:6px;margin-bottom:6px;font-weight:600}.klaro-ide .cm-cookie-config .cm-cookie-forms .cm-cookie-form{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8)}.klaro-ide .cm-demo .cm-config-controls .cm-retracting-label-input{width:auto;flex-grow:1;margin-right:12px}.klaro-ide .cm-demo .cm-config-controls:first-child{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8)}.klaro-ide .cm-config-controls{margin-top:8px;margin-bottom:24px;max-width:none;display:flex;flex-wrap:wrap;width:100%;align-items:baseline;justify-content:space-between}.klaro-ide .cm-config-controls h2{margin-right:24px;display:block;flex-grow:1}.klaro-ide .cm-config-controls .cm-control{flex-shrink:1;display:inline-block;margin-bottom:20px}.klaro-ide .cm-config-controls .cm-control .cm-retracting-label-input{max-width:400px;display:block}.klaro-ide .cm-config-controls .cm-control input{max-width:400px}.klaro-ide .cm-config-controls .cm-control select{border-color:#1a936f;border-color:var(--green1, #1a936f);border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#fff;background-color:var(--white1, #fff);padding:12px;margin-bottom:12px;display:block}.klaro-ide .cm-config-controls .cm-control-button{border-radius:4px;border-radius:var(--border-radius, 4px);background-color:#459cdc;background-color:var(--blue2, #459cdc);color:#fff;color:var(--white1, #fff);border-style:none;padding:12px;margin-top:4px;cursor:pointer;box-shadow:0 2px 5px 0 rgba(0,0,0,.33);margin-right:6px}.klaro-ide .cm-config-controls .cm-control-button.cm-delete{background-color:#e77887;background-color:var(--red3, #e77887);float:right}.klaro-ide .cm-config-controls .cm-control-button.cm-secondary{background-color:#e15669;background-color:var(--red2, #e15669)}.klaro-ide .cm-config-controls .cm-control-button.cm-success{background-color:#1a936f;background-color:var(--green1, #1a936f)}.klaro-ide .cm-config-controls .cm-control-button:disabled{background-color:#fafafa;background-color:var(--light1, #fafafa);color:#333;color:var(--dark1, #333);cursor:not-allowed}.klaro-ide .cookie-modal .cm-modal.cm-ide{background-color:#333;background-color:var(--dark1, #333);color:#fafafa;color:var(--light1, #fafafa);z-index:1001;box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19);width:100%;max-height:98%;top:50%;-ms-transform:translateY(-50%);transform:translateY(-50%);position:fixed;overflow:auto}@media(min-width: 1020px){.klaro-ide .cookie-modal .cm-modal.cm-ide{border-radius:4px;border-radius:var(--border-radius, 4px);position:relative;margin:0 auto;max-width:1000px;height:auto;width:auto}}',"",{version:3,sources:["webpack://./scss/switch.scss","webpack://./scss/vars.scss","webpack://./scss/controls.scss","webpack://./scss/tabs.scss","webpack://./scss/list.scss","webpack://./scss/dropdown.scss","webpack://./scss/ide.scss","webpack://./scss/modal.scss"],names:[],mappings:"AAEA,gCC2HI,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CDvHA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,iBAAA,CACA,gBAAA,CACA,qBAAA,CACA,eAAA,CAEA,2CACI,eAAA,CAGJ,4CACI,YAAA,CAGJ,kCACI,YAAA,CAIR,sBACI,iBAAA,CACA,oBAAA,CACA,UAAA,CACA,WAAA,CAGJ,yDC0FI,wBAAA,CACA,uCAAA,CDvFJ,sECsFI,wBAAA,CACA,uCAAA,CDrFA,UAAA,CAEA,8EAEI,8BAAA,CACA,0BAAA,CAIR,+DC2EI,wBAAA,CACA,uCAAA,CD1EA,UAAA,CAEA,uEAEI,8BAAA,CACA,0BAAA,CAIR,kECgEI,wBAAA,CACA,uCAAA,CD/DA,UAAA,CACA,kBAAA,CAGJ,mBACI,oEC5DoB,CD+DxB,0BACI,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAGJ,0BACI,cAAA,CACA,eAAA,CAGJ,gCCwCI,aAAA,CACA,2BAAA,CDvCA,cAAA,CACA,eAAA,CAMA,qCACI,iBAAA,CACA,MAAA,CAGJ,kCC0BA,wBAAA,CACA,uCAAA,CDvBI,iBAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CAEA,cAAA,CACA,UAAA,CACA,oBAAA,CAGJ,0CCUA,wBAAA,CACA,uCAAA,CDPI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,UAAA,CAEA,cAAA,CAIJ,wCACI,kBAAA,CAGJ,gDACI,iBAAA,CAGJ,8CCbA,wBAAA,CACA,uCAAA,CDcI,kDAAA,CAGJ,wDAEI,8BAAA,CACA,0BAAA,CAIR,uDACI,gFAAA,CAIJ,iEAEI,8BAAA,CACA,0BAAA,CE1JJ,yFDyHI,iBAAA,CACA,uCAAA,CADA,qBAAA,CACA,oCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,mCAAA,CChHA,sCDLqB,CCMrB,YAAA,CACA,kBAAA,CAEA,+YAGI,eAAA,CAEA,0aDsGJ,aAAA,CACA,4BAAA,CADA,iBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,kBAAA,CACA,uCAAA,CADA,oBAAA,CACA,mCAAA,CADA,wBAAA,CACA,uCAAA,CC/FQ,oBAAA,CACA,gBAAA,CACA,cAAA,CACA,eAAA,CACA,cAAA,CAEA,4bDwFR,UAAA,CACA,yBAAA,CClFJ,6BAEI,eAAA,CACA,kBAAA,CACA,YAAA,CAEA,8DACI,YAAA,CAGJ,kDACI,wBAAA,CAGJ,4CDmEA,qBAAA,CACA,oCAAA,CADA,iBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,kBAAA,CACA,uCAAA,CADA,oBAAA,CACA,mCAAA,CC5DI,iBAAA,CACA,QAAA,CACA,MAAA,CACA,UAAA,CACA,kBAAA,CACA,UAAA,CAEA,0DDoDJ,uBAAA,CACA,4CAAA,CADA,yBAAA,CACA,8CAAA,CADA,2BAAA,CACA,yCAAA,CCjDQ,YAAA,CACA,cAAA,CAEA,4DD6CR,aAAA,CACA,2BAAA,CC5CY,cAAA,CAGJ,qEACI,wBAAA,CAMhB,4BACI,iBAAA,CACA,oBAAA,CACA,kBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CAEA,yBATJ,4BAUQ,WAAA,CAAA,CAGJ,sDACI,aAAA,CACA,iBAAA,CACA,UAAA,CACA,gBAAA,CACA,kBAAA,CACA,SAAA,CACA,mBAAA,CACA,qCAAA,CAAA,iCAAA,CACA,eAAA,CAGJ,+BDQA,qBAAA,CACA,oCAAA,CCLI,KAAA,CACA,MAAA,CACA,SAAA,CACA,QAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,cAAA,CAEA,kCDLJ,qBAAA,CACA,oCAAA,CADA,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CCWQ,sCD/HY,CCgIZ,QAAA,CACA,UAAA,CACA,YAAA,CACA,UAAA,CACA,OAAA,CAEA,6CACI,wBAAA,CAGJ,mDDvBR,wBAAA,CACA,uCAAA,CCwBY,YAAA,CACA,OAAA,CAGJ,gDACI,UAAA,CACA,WAAA,CACA,kBAAA,CAIR,6CACI,WAAA,CACA,YAAA,CACA,6BAAA,CACA,OAAA,CAEA,mDD1CR,UAAA,CACA,wBAAA,CADA,oBAAA,CACA,kCAAA,CADA,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CC+CY,WAAA,CACA,aAAA,CACA,WAAA,CACA,cAAA,CAGJ,sDDtDR,UAAA,CACA,yBAAA,CADA,iBAAA,CACA,uCAAA,CADA,wBAAA,CACA,sCAAA,CCyDY,WAAA,CACA,WAAA,CACA,aAAA,CACA,gBAAA,CACA,UAAA,CACA,oBAAA,CAKJ,sEDpER,qBAAA,CACA,oCAAA,CCwEI,4CACI,SAAA,CAEA,+CACI,YAAA,CAMhB,sBACI,YAAA,CAGJ,4BDvFI,aAAA,CACA,2BAAA,CCwFA,cAAA,CACA,eAAA,CACA,iBAAA,CAGJ,sBACI,eAAA,CAEA,6BDjGA,qBAAA,CACA,oCAAA,CADA,aAAA,CACA,2BAAA,CADA,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,oBAAA,CACA,mCAAA,CCwGI,aAAA,CACA,UAAA,CACA,gBAAA,CACA,cAAA,CACA,eAAA,CAEA,uCD/GJ,wBAAA,CACA,uCAAA,CCqHJ,sCACI,oBAAA,CACA,iBAAA,CACA,UAAA,CACA,kBAAA,CACA,cAAA,CAEA,gDD7HA,qBAAA,CACA,oCAAA,CADA,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,mCAAA,CCkII,iBAAA,CACA,QAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CACA,2BAAA,CACA,eAAA,CACA,mBAAA,CACA,0JAAA,CAGA,aAAA,CACA,4DAAA,CAAA,wDAAA,CAYR,qBD3JI,iBAAA,CACA,uCAAA,CADA,wBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,mCAAA,CCmKA,cAAA,CAEA,qBAAA,CACA,iBAAA,CACA,UAAA,CAEA,+BD1KA,wBAAA,CACA,uCAAA,CE5HJ,yBACI,iCACI,YAAA,CAAA,CAIR,oBACI,iBAAA,CACA,YAAA,CACA,mBAAA,CACA,6BAAA,CACA,kBAAA,CAEA,yBACI,sCACI,YAAA,CAAA,CAIR,yBAbJ,oBFqHI,iBAAA,CACA,uCAAA,CADA,iBAAA,CACA,uCAAA,CADA,qBAAA,CACA,oCAAA,CErGI,sCFfgB,CEiBhB,sCACI,aAAA,CACA,iBAAA,CACA,UAAA,CACA,gBAAA,CACA,kBAAA,CACA,qCAAA,CAAA,iCAAA,CACA,eAAA,CAGJ,uBACI,cAAA,CAEA,0BACI,aAAA,CACA,iBAAA,CACA,UAAA,CACA,eAAA,CAEA,4BACI,oBAAA,CACA,0BAAA,CAOJ,sEACI,YAAA,CAMR,yCACI,OAAA,CACA,aAAA,CAEA,0DF2DZ,wBAAA,CACA,uCAAA,CE1DgB,OAAA,CAAA,CAMhB,qCACI,oBAAA,CAGJ,uBF+CA,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CE5CI,kBAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CACA,aAAA,CACA,0BAAA,CACA,QAAA,CACA,SAAA,CAEA,0BACI,aAAA,CAEA,4BF+BR,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CADA,aAAA,CACA,2BAAA,CE3BY,YAAA,CACA,sBAAA,CACA,oBAAA,CACA,kBAAA,CACA,gBAAA,CAIA,6CFkBZ,aAAA,CACA,2BAAA,CADA,2BAAA,CACA,yCAAA,CERA,yBADJ,gCAEQ,iBAAA,CACA,eAAA,CACA,gBAAA,CACA,UAAA,CAEA,mCFCJ,qBAAA,CACA,oCAAA,CAAA,YAAA,CECQ,qBAAA,CACA,cAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,sCF1HY,CE4HZ,sCACI,mBAAA,CAGJ,6DACI,OAAA,CACA,aAAA,CAGJ,uDFlBR,wBAAA,CACA,uCAAA,CEmBY,OAAA,CACA,aAAA,CAAA,CC9IZ,6BACI,YAAA,CACA,kBAAA,CACA,kBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,eAAA,CACA,sBAAA,CAEA,yBACI,+CACI,YAAA,CAIA,qDACI,oBAAA,CAAA,CAKZ,wCACI,eAAA,CAGJ,2CH+FJ,wBAAA,CACA,uCAAA,CG5FI,0CACI,eAAA,CACA,iBAAA,CACA,eAAA,CAGJ,wCHqFJ,qBAAA,CACA,oCAAA,CADA,iBAAA,CACA,uCAAA,CGnFQ,sCHjCY,CGkCZ,kBAAA,CAGJ,6CACI,cAAA,CAGJ,8CACI,cAAA,CAGJ,kCACI,QAAA,CAEA,8CACI,eAAA,CAIR,+CACI,iBAAA,CACA,UAAA,CACA,QAAA,CAGJ,qCACI,oBAAA,CACA,YAAA,CACA,UAAA,CACA,WAAA,CAEA,8CACI,WAAA,CAGJ,8CACI,WAAA,CAGJ,8CACI,WAAA,CAGJ,8CACI,YAAA,CAGJ,8CACI,YAAA,CAGJ,gDACI,eAAA,CACA,gBAAA,CACA,WAAA,CAIR,yCACI,OAAA,CCrGZ,wBACI,iBAAA,CAEA,+BACI,mBAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CACA,SAAA,CACA,UAAA,CACA,aAAA,CAGA,QAAA,CACA,8BAAA,CAEA,0EJ2GJ,wBAAA,CACA,uCAAA,CIzGQ,kBAAA,CAIR,4CJoGA,qBAAA,CACA,oCAAA,CInGI,YAAA,CACA,sCJlBgB,CImBhB,UAAA,CAEA,gEJ8FJ,iBAAA,CACA,uCAAA,CI7FQ,aAAA,CACA,iBAAA,CACA,QAAA,CACA,WAAA,CACA,MAAA,CAGJ,+DJqFJ,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,kCAAA,CI/EQ,eAAA,CACA,eAAA,CACA,eAAA,CACA,eAAA,CACA,kBAAA,CACA,qBAAA,CAEA,kEACI,WAAA,CAEA,oEACI,aAAA,CACA,WAAA,CACA,iBAAA,CAEA,yEACI,mBAAA,CACA,kBAAA,CAGJ,0EACI,kBAAA,CAGJ,0EJsDhB,wBAAA,CACA,sCAAA,CADA,UAAA,CACA,yBAAA,CI9CA,yEACI,OAAA,CACA,SAAA,CCrEJ,iBACI,oBAAA,CAGJ,6HAII,eAAA,CAKA,oCACI,YAAA,CAGJ,qCACI,cAAA,CAEA,4CACI,mBAAA,CAIR,6BACI,oBAAA,CAIR,uBACI,YAAA,CAEA,kEL+EJ,iBAAA,CACA,uCAAA,CADA,UAAA,CACA,yBAAA,CK5EQ,sCLzCa,CK0Cb,kBAAA,CAGJ,gCLuEJ,wBAAA,CACA,qCAAA,CKpEI,kCLmEJ,kBAAA,CACA,iCAAA,CK/DA,wBACI,4BAAA,CAGJ,wBACI,6BAAA,CAGJ,wBACI,6BAAA,CAQA,goBAII,aAAA,CACA,wBAAA,CACA,eAAA,CACA,kBAAA,CACA,eAAA,CAGJ,gKLkCJ,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,mCAAA,CK/BQ,mBAAA,CACA,kBAAA,CACA,oBAAA,CAGJ,gKACI,eAAA,CAGJ,gKACI,eAAA,CAGJ,gKACI,aAAA,CACA,eAAA,CAIR,oCLWA,aAAA,CACA,2BAAA,CKVI,kBAAA,CACA,cAAA,CACA,kBAAA,CAIA,gCACI,eAAA,CACA,kBAAA,CAEA,mCACI,YAAA,CAEA,mDLJZ,iBAAA,CACA,uCAAA,CKKgB,WAAA,CACA,sCL3HK,CK6HL,qDACI,YAAA,CACA,oBAAA,CAEA,2DLbpB,kBAAA,CACA,iCAAA,CKkBY,iDACI,WAAA,CACA,YAAA,CAOZ,4DL5BJ,iBAAA,CACA,uCAAA,CADA,qBAAA,CACA,oCAAA,CK8BQ,sCLnJa,CKoJb,YAAA,CACA,kBAAA,CAEA,+DACI,YAAA,CACA,6BAAA,CACA,sBAAA,CAEA,4EACI,mBAAA,CACA,aAAA,CACA,YAAA,CACA,cAAA,CACA,WAAA,CAQZ,6EACI,eAAA,CAEA,uFACI,iBAAA,CAGJ,uHL5DR,aAAA,CACA,4BAAA,CK+DQ,2HLhER,aAAA,CACA,0BAAA,CKoEI,yEACI,wBAAA,CACA,eAAA,CAKR,uDAEI,cAAA,CACA,iBAAA,CACA,eAAA,CAKI,8DLrFR,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CK8FQ,mEACI,UAAA,CACA,WAAA,CACA,iBAAA,CAGJ,oDLrGR,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CK4GA,+BACI,cAAA,CACA,kBAAA,CACA,cAAA,CACA,YAAA,CACA,cAAA,CACA,UAAA,CACA,oBAAA,CACA,6BAAA,CAEA,kCACI,iBAAA,CACA,aAAA,CACA,WAAA,CAGJ,2CACI,aAAA,CACA,oBAAA,CACA,kBAAA,CAEA,sEACI,eAAA,CACA,aAAA,CAGJ,iDACI,eAAA,CAGJ,kDL3IR,oBAAA,CACA,mCAAA,CADA,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,iBAAA,CACA,uCAAA,CADA,qBAAA,CACA,oCAAA,CKgJY,YAAA,CACA,kBAAA,CACA,aAAA,CAIR,kDLvJJ,iBAAA,CACA,uCAAA,CADA,wBAAA,CACA,sCAAA,CADA,UAAA,CACA,yBAAA,CK4JQ,iBAAA,CACA,YAAA,CACA,cAAA,CACA,cAAA,CACA,sCLpRY,CKqRZ,gBAAA,CAEA,4DLpKR,wBAAA,CACA,qCAAA,CKqKY,WAAA,CAGJ,+DLzKR,wBAAA,CACA,qCAAA,CK4KQ,6DL7KR,wBAAA,CACA,uCAAA,CKgLQ,2DLjLR,wBAAA,CACA,uCAAA,CADA,UAAA,CACA,wBAAA,CKmLY,kBAAA,CAOJ,0CL3LR,qBAAA,CACA,mCAAA,CADA,aAAA,CACA,4BAAA,CMzHA,YAAA,CACA,oENEoB,CAAA,UAAA,CMCpB,cAAA,CAEA,OAAA,CACA,8BAAA,CAAA,0BAAA,CAEA,cAAA,CACA,aAAA,CAEA,0BDuSQ,0CL3LR,iBAAA,CACA,uCAAA,CM3GI,iBAAA,CACA,aAAA,CACA,gBDoS+B,CCnS/B,WAAA,CACA,UAAA,CAAA",sourcesContent:["/* The switch - the box around the slider */\n\n.cm-switch-container {\n    @include var(border-bottom-style, border-style);\n    @include var(border-bottom-width, border-width);\n    @include var(border-bottom-color, light2);\n\n    display: block;\n    position: relative;\n    padding: 10px;\n    padding-left: 66px;\n    line-height: 20px;\n    vertical-align: middle;\n    min-height: 40px;\n\n    &:last-child {\n        border-bottom: 0;\n    }\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    p {\n        margin-top: 0;\n    }\n}\n\n.cm-switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 30px;\n}\n\n.cm-list-input:checked + .cm-list-label .slider {\n    @include var(background-color, green1);\n}\n\n.cm-list-input.half-checked:checked + .cm-list-label .slider {\n    @include var(background-color, green1);\n    opacity: 0.6;\n\n    &::before {\n        -webkit-transform: translateX(10px);\n        -ms-transform: translateX(10px);\n        transform: translateX(10px);\n    }\n}\n\n.cm-list-input.only-required + .cm-list-label .slider {\n    @include var(background-color, green2);\n    opacity: 0.8;\n\n    &::before {\n        -webkit-transform: translateX(10px);\n        -ms-transform: translateX(10px);\n        transform: translateX(10px);\n    }\n}\n\n.cm-list-input.required:checked + .cm-list-label .slider {\n    @include var(background-color, green2);\n    opacity: 0.8;\n    cursor: not-allowed;\n}\n\n.slider {\n    box-shadow: $cm-box-shadow-dark-md;\n}\n\n.cm-list-input {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    width: 50px;\n    height: 30px;\n}\n\n.cm-list-title {\n    font-size: 0.9em;\n    font-weight: 600;\n}\n\n.cm-list-description {\n    @include var(color, dark3);\n    font-size: 0.9em;\n    padding-top: 4px;\n}\n\n.cm-list-label {\n    /* The slider */\n\n    .cm-switch {\n        position: absolute;\n        left: 0;\n    }\n\n    .slider {\n\n        @include var(background-color, white2);\n\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n        width: 50px;\n        display: inline-block;\n    }\n\n    .slider::before {\n\n        @include var(background-color, white3);\n\n        position: absolute;\n        content: '';\n        height: 20px;\n        width: 20px;\n        left: 5px;\n        bottom: 5px;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n\n    /* Rounded sliders */\n    .slider.round {\n        border-radius: 30px;\n    }\n\n    .slider.round::before {\n        border-radius: 50%;\n    }\n\n    input:focus + .slider {\n        @include var(box-shadow-color, green3);\n        box-shadow: 0 0 1px var(--box-shadow-color, green3);\n    }\n\n    input:checked + .slider::before {\n        -webkit-transform: translateX(20px);\n        -ms-transform: translateX(20px);\n        transform: translateX(20px);\n    }\n}\n\n.cm-list-input:focus + .cm-list-label .slider {\n    box-shadow: 0 4px 6px 0 rgba(125, 125, 125, 0.2),\n        5px 5px 10px 0 rgba(125, 125, 125, 0.19);\n}\n\n.cm-list-input:checked + .cm-list-label .slider::before {\n    -webkit-transform: translateX(20px);\n    -ms-transform: translateX(20px);\n    transform: translateX(20px);\n}\n","@use \"sass:map\";\n@use 'sass:color';\n\n/*\nWe declare all variables here as default so that they are easy to override...\n*/\n\n/* Border, shadows, ... */\n$cm-box-shadow-dark-md: 0 4px 6px 0 rgba(0, 0, 0, 0.2), 5px 5px 10px 0 rgba(0, 0, 0, 0.19) !default;\n$cm-box-shadow-light-sm: 0 2px 5px 0 rgba(0, 0, 0, 0.11) !default;\n$cm-box-shadow-dark-sm: 0 2px 5px 0 rgba(0, 0, 0, 0.33) !default;\n\n/*\nVariables that begin with $var- should NEVER be used directly in CSS rules.\nthey should only be included via the \"@include var(property, var-name)\"\nmechanism.\n*/\n\n/* Border styles */\n$var-border-radius: 4px !default;\n$var-border-style: solid !default;\n$var-border-width: 1px !default;\n\n/* Cookie notice positioning */\n$var-notice-right: 20px !default;\n$var-notice-left: auto !default;\n$var-notice-top: auto !default;\n$var-notice-bottom: 20px !default;\n$var-notice-max-width: 400px !default;\n$var-notice-position: fixed !default;\n\n/* Text colors */\n$var-button-text-color: #fff !default;\n\n/* Font Families */\n$var-font-family: inherit !default;\n$var-title-font-family: inherit !default;\n$var-font-size: 14px !default;\n\n/* White */\n$var-white1: #fff !default;\n$var-white2: color.scale($var-white1, $lightness: -5%) !default;\n$var-white3: color.scale($var-white2, $lightness: -5%) !default;\n\n/* Differently shaded colors */\n\n// light gray\n$var-light1: #fafafa !default;\n$var-light2: color.scale($var-light1, $lightness: -20%) !default;\n$var-light3: color.scale($var-light2, $lightness: -20%) !default;\n\n// dark gray\n$var-dark1: #333 !default;\n$var-dark2: color.scale($var-dark1, $lightness: 20%) !default;\n$var-dark3: color.scale($var-dark2, $lightness: 20%) !default;\n\n// blue\n$var-blue1: #2581c4 !default;\n$var-blue2: color.scale($var-blue1, $lightness: 20%) !default;\n$var-blue3: color.scale($var-blue2, $lightness: 20%) !default;\n\n// green\n$var-green1: #1a936f !default;\n$var-green2: color.scale($var-green1, $lightness: 20%) !default;\n$var-green3: color.scale($var-green2, $lightness: 20%) !default;\n\n// red\n$var-red1: #da2c43 !default;\n$var-red2: color.scale($var-red1, $lightness: 20%) !default;\n$var-red3: color.scale($var-red2, $lightness: 20%) !default;\n\n// all these variables can be tweaked at runtime by specifying them via the\n// 'styling' config parameter.\n$vars: (\n    button-text-color: $var-button-text-color,\n\n    font-size: $var-font-size,\n    font-family: $var-font-family,\n    title-font-family: $var-title-font-family,\n\n    green1: $var-green1,\n    green2: $var-green2,\n    green3: $var-green3,\n\n    blue1: $var-blue1,\n    blue2: $var-blue2,\n    blue3: $var-blue3,\n\n    red1: $var-red1,\n    red2: $var-red2,\n    red3: $var-red3,\n\n    light1: $var-light1,\n    light2: $var-light2,\n    light3: $var-light3,\n\n    dark1: $var-dark1,\n    dark2: $var-dark2,\n    dark3: $var-dark3,\n\n    white1: $var-white1,\n    white2: $var-white2,\n    white3: $var-white3,\n\n    // non-color options\n\n    border-radius: $var-border-radius,\n    border-style: $var-border-style,\n    border-width: $var-border-width,\n    notice-left: $var-notice-left,\n    notice-right: $var-notice-right,\n    notice-top: $var-notice-top,\n    notice-bottom: $var-notice-bottom,\n    notice-max-width: $var-notice-max-width,\n    notice-position: $var-notice-position,\n);\n\n/*\nUse @include var(property, varname) to include a variable, e.g.\n\n    @include var(background-color, white1);\n\nto create a white background.\n*/\n@mixin var($property, $varName) {\n    #{$property}: map.get($vars, $varName);\n    #{$property}: var(--#{$varName}, map.get($vars, $varName));\n}\n\n/* Spacing */\n$cm-space: (\n    xs: 4px,\n    sm: 8px,\n    md: 12px,\n    lg: 24px,\n    xl: 48px,\n    xxl: 96px\n) !default;\n\n/* Breakpoints */\n$cm-desktop: 1024px !default;\n$cm-mobile: 384px !default;\n$cm-tablet: 768px !default;\n","\n@use \"sass:map\";\n@import './vars';\n\n.cm-language-select,\n.cm-theme-select,\n.cm-purpose-select {\n\n    @include var(border-radius, border-radius);\n    @include var(background-color, white1);\n    @include var(border-style, border-style);\n    @include var(border-width, border-width);\n    @include var(border-color, light2);\n\n    box-shadow: $cm-box-shadow-light-sm;\n    padding: map.get($cm-space, md);\n    margin-bottom: map.get($cm-space, md);\n\n    ul.cm-languages,\n    ul.cm-themes,\n    ul.cm-purposes {\n        margin-top: -4px;\n\n        li {\n            @include var(color, light1);\n            @include var(border-radius, border-radius);\n            @include var(border-width, border-width);\n            @include var(border-style, border-style);\n            @include var(border-color, green2);\n            @include var(background-color, green1);\n\n            display: inline-block;\n            margin-right: 4px;\n            margin-top: 4px;\n            padding: 2px 4px;\n            font-size: 0.9em;\n\n            a {\n                @include var(color, white1);\n            }\n        }\n    }\n}\n\n.cm-search-select {\n\n    margin-top: map.get($cm-space, md);\n    margin-bottom: map.get($cm-space, md);\n    display: flex;\n\n    input:not(:focus) ~ .cm-candidates {\n        display: none;\n    }\n\n    .cm-candidates:hover {\n        display: block !important;\n    }\n\n    .cm-candidates {\n\n        @include var(background-color, white1);\n        @include var(border-radius, border-radius);\n        @include var(border-width, border-width);\n        @include var(border-style, border-style);\n        @include var(border-color, white2);\n\n        position: absolute;\n        top: 55px;\n        left: 0;\n        z-index: 10;\n        margin-bottom: 10px;\n        width: 100%;\n\n        .cm-candidate {\n            @include var(border-bottom-width, border-width);\n            @include var(border-bottom-style, border-style);\n            @include var(border-bottom-color, dark3);\n            padding: map.get($cm-space, md);\n            cursor: pointer;\n\n            p {\n                @include var(color, dark2);\n                font-size: 0.9em;\n            }\n\n            &:last-child {\n                border-bottom-style: none;\n            }\n        }\n    }\n}\n\n.cm-obj-selector {\n    position: relative;\n    display: inline-block;\n    margin-bottom: 10px;\n    margin-right: 20px;\n    width: 100%;\n    height: 40px;\n    overflow: visible;\n\n    @media (min-width: $cm-tablet) {\n        width: 300px;\n    }\n\n    span.cm-obj-selector-more {\n        display: block;\n        position: absolute;\n        right: 0.5em;\n        padding-top: 0.6em;\n        padding-right: 0.3em;\n        z-index: 2;\n        pointer-events: none;\n        transform: scaleY(0.6) scaleX(0.8);\n        font-weight: 800;\n    }\n\n    ul {\n\n        @include var(background-color, white1);\n\n        top: 0;\n        left: 0;\n        z-index: 1;\n        margin: 0;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        flex-wrap: wrap;\n\n        li {\n\n            @include var(background-color, white1);\n            @include var(border-bottom-style, border-style);\n            @include var(border-bottom-width, border-width);\n            @include var(border-bottom-color, white2);\n\n            box-shadow: $cm-box-shadow-dark-sm;\n            margin: 0;\n            width: auto;\n            display: none;\n            width: 100%;\n            order: 2;\n\n            &:last-child {\n                border-bottom-style: none;\n            }\n\n            &.cm-obj-is-active {\n                @include var(background-color, light2);\n                display: flex;\n                order: 1;\n            }\n\n            a.cm-obj-item {\n                width: 100%;\n                padding: 8px;\n                padding-right: 40px;\n            }\n        }\n\n        li.cm-obj-add {\n            padding: 8px;\n            display: none;\n            justify-content: space-between;\n            order: 3;\n\n            input {\n                @include var(color, dark1);\n                @include var(border-color, dark2);\n                @include var(border-radius, border-radius);\n                @include var(border-style, border-style);\n                @include var(border-width, border-width);\n                flex-grow: 1;\n                flex-shrink: 1;\n                padding: 4px;\n                font-size: 0.9em;\n            }\n\n            a.cm-btn {\n                @include var(color, white1);\n                @include var(border-radius, border-radius);\n                @include var(background-color, dark3);\n                padding: 8px;\n                flex-grow: 0;\n                flex-shrink: 0;\n                margin-left: 10px;\n                width: auto;\n                display: inline-block;\n            }\n        }\n\n        &:not(.cm-is-active) {\n            li.cm-obj-is-active {\n                @include var(background-color, white1);\n            }\n        }\n\n        &.cm-is-active {\n            z-index: 4;\n\n            li {\n                display: flex;\n            }\n        }\n    }\n}\n\n.cm-switch {\n    padding: 12px;\n}\n\np.cm-description {\n    @include var(color, dark2);\n    font-size: 0.9em;\n    padding-top: 2px;\n    margin-bottom: 4px;\n}\n\n.cm-select {\n    margin-top: 16px;\n\n    select {\n\n        @include var(background-color, white1);\n        @include var(color, dark2);\n        @include var(border-radius, border-radius);\n        @include var(border-style, border-style);\n        @include var(border-color, white2);\n\n        display: block;\n        width: 100%;\n        padding: 12px 5px;\n        font-size: 0.9em;\n        text-indent: 5px;\n\n        &[disabled] {\n            @include var(background-color, light2);\n        }\n\n    }\n}\n\n.cm-retracting-label-input {\n    display: inline-block; // Needed for a bug in Chrome\n    position: relative;\n    width: 100%; // Needed for a bug in Chrome\n    padding: 10px 0 6px;\n    margin-top: 4px;\n\n    > .cm-label {\n        @include var(background-color, white1);\n        @include var(border-radius, border-radius);\n        @include var(border-style, border-style);\n        @include var(border-width, border-width);\n        @include var(border-color, light2);\n        position: absolute;\n        top: 16px;\n        left: 8px;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        max-width: calc(100% - (2 * 8px));\n        overflow: hidden;\n        pointer-events: none;\n        transition: transform 150ms cubic-bezier(0.47, 0, 0.74, 0.71),\n            opacity 150ms cubic-bezier(0.47, 0, 0.74, 0.71),\n            color 150ms cubic-bezier(0.47, 0, 0.74, 0.71);\n        padding: 0 8px;\n        transform: scale(0.75) translateX(-16%) translateY(-26px);\n    }\n    // currently we disable the retracting part\n    /*\n    > .cm-input:not([disabled]):placeholder-shown:not(:focus) + .cm-label {\n        transform: none;\n        border: none;\n        color: #888;\n    }\n*/\n}\n\n.cm-input {\n\n    @include var(border-radius, border-radius);\n    @include var(background-color, light1);\n    @include var(border-style, border-style);\n    @include var(border-width, border-width);\n    @include var(border-color, green1);\n\n    // For some reason, textarea tries to use a system font.\n    font-size: 0.9em;\n\n    box-sizing: border-box;\n    padding: 12px 18px;\n    width: 100%;\n\n    &[disabled] {\n        @include var(background-color, light2);\n    }\n}\n","@import './vars';\n\n@media (min-width: $cm-tablet) {\n    .cm-tabs span.cm-more {\n        display: none;\n    }\n}\n\n.cm-tabs {\n    position: relative;\n    display: flex;\n    align-items: stretch;\n    justify-content: space-between;\n    white-space: nowrap;\n\n    @media (min-width: $cm-tablet) {\n        span.cm-tabs-more {\n            display: none;\n        }\n    }\n\n    @media (max-width: $cm-tablet) {\n        @include var(border-radius, border-radius);\n        @include var(border-radius, border-radius);\n        @include var(background-color, white1);\n        box-shadow: $cm-box-shadow-dark-sm;\n\n        span.cm-tabs-more {\n            display: block;\n            position: absolute;\n            right: 0.5em;\n            padding-top: 0.6em;\n            padding-right: 0.3em;\n            transform: scaleY(0.6) scaleX(0.8);\n            font-weight: 800;\n        }\n\n        ul {\n            flex-wrap: wrap;\n\n            li {\n                display: block;\n                position: relative;\n                width: 100%;\n                text-align: left;\n\n                a {\n                    justify-content: left;\n                    border-bottom: 0 !important;\n                }\n            }\n        }\n\n        &:not(.cm-tabs-active) {\n            ul li {\n                &:not(.cm-tab-is-active) {\n                    display: none;\n                }\n            }\n        }\n\n        &.cm-tabs-active {\n            ul li {\n                order: 2;\n                display: block;\n\n                &.cm-tab-is-active {\n                    @include var(background-color, light2);\n                    order: 1;\n                }\n            }\n        }\n    }\n\n    &:not(:last-child) {\n        margin-bottom: 1.5rem;\n    }\n\n    ul {\n        @include var(border-bottom-style, border-style);\n        @include var(border-bottom-width, border-width);\n        @include var(border-bottom-color, light2);\n        align-items: center;\n        display: flex;\n        width: 100%;\n        flex-grow: 1;\n        flex-shrink: 0;\n        justify-content: flex-start;\n        margin: 0;\n        padding: 0;\n\n        li {\n            display: block;\n\n            a {\n                @include var(border-bottom-style, border-style);\n                @include var(border-bottom-width, border-width);\n                @include var(border-bottom-color, light2);\n                @include var(color, dark2);\n                display: flex;\n                align-items: flex-start;\n                justify-content: left;\n                margin-bottom: -1px;\n                padding: 0.5em 1em;\n            }\n\n            &.cm-tab-is-active {\n                a {\n                    @include var(color, blue1);\n                    @include var(border-bottom-color, blue1);\n                }\n            }\n        }\n    }\n\n}\n\n.cm-tabs.tabs-active {\n    @media (max-width: $cm-tablet - 1px) {\n        position: relative;\n        min-height: 40px;\n        overflow: visible;\n        z-index: 10;\n\n        ul {\n            @include var(background-color, white1);\n            display: flex;\n            flex-direction: column;\n            flex-wrap: wrap;\n            position: absolute;\n            width: 100%;\n            height: auto;\n            box-shadow: $cm-box-shadow-dark-sm;\n\n            li {\n                margin: 0 !important;\n            }\n\n            li:not(.cm-tab-is-active) {\n                order: 2;\n                display: block;\n            }\n\n            li.cm-tab-is-active {\n                @include var(background-color, light1);\n                order: 1;\n                display: block;\n            }\n        }\n    }\n}\n","@use \"sass:map\";\n@import './vars';\n\n.cm-list {\n    .cm-item {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        padding: map.get($cm-space, sm);\n        display: flex;\n        flex-direction: row;\n        align-items: top;\n        justify-items: flex-end;\n\n        @media (min-width: $cm-tablet) {\n            span.cm-is-action {\n                display: none;\n            }\n\n            &:hover {\n                span.cm-is-action {\n                    display: inline-block;\n                }\n            }\n        }\n\n        &:last-child {\n            border-bottom: 0;\n        }\n\n        &:nth-child(2n) {\n            @include var(background-color, light1);\n        }\n\n        &.cm-is-header {\n            font-weight: 600;\n            margin-bottom: map.get($cm-space, xs);\n            background: none;\n        }\n\n        &.cm-is-card {\n            @include var(background-color, white1);\n            @include var(border-radius, border-radius);\n            box-shadow: $cm-box-shadow-dark-sm;\n            margin-bottom: map.get($cm-space, lg);\n        }\n\n        &.cm-is-clickable {\n            cursor: pointer;\n        }\n\n        &.cm-is-expandable {\n            cursor: pointer;\n        }\n\n        form {\n            margin: 0;\n\n            label.label {\n                font-weight: 300;\n            }\n        }\n\n        span.cm-is-action {\n            position: absolute;\n            right: 1rem;\n            top: 1rem;\n        }\n\n        .cm-col {\n            align-content: center;\n            flex-basis: 0;\n            margin: map.get($cm-space, sm);\n            flex-grow: 1;\n\n            &.cm-is-xs {\n                flex-grow: 1;\n            }\n\n            &.cm-is-sm {\n                flex-grow: 2;\n            }\n\n            &.cm-is-md {\n                flex-grow: 5;\n            }\n\n            &.cm-is-lg {\n                flex-grow: 10;\n            }\n\n            &.cm-is-xl {\n                flex-grow: 20;\n            }\n\n            &.cm-is-icon {\n                flex-basis: 50px;\n                text-align: right;\n                flex-grow: 0;\n            }\n        }\n\n        .cm-content {\n            flex: 10;\n        }\n    }\n}\n",'@use "sass:map";\n\n.cm-dropdown {\n    position: relative;\n\n    > button {\n        display: inline-flex;\n        vertical-align: middle;\n        align-items: center;\n        justify-content: center;\n        width: 2em;\n        height: 2em;\n        font-size: 1em;\n\n        // reset button\n        border: 0;\n        background-color: transparent;\n\n        &:focus,\n        &:hover {\n            @include var(background-color, light1);\n            border-radius: 25px;\n        }\n    }\n\n    > .cm-dropdowncontent {\n        @include var(background-color, white1);\n        display: none;\n        box-shadow: $cm-box-shadow-dark-sm;\n        width: auto;\n\n        &.cm-dropdownexpanded {\n            @include var(border-radius, border-radius);\n            display: block;\n            position: absolute;\n            top: 35px;\n            z-index: 100;\n            left: 0;\n        }\n\n        ul.cm-dropdownmenu {\n\n            @include var(border-radius, border-radius);\n            @include var(border-style, border-style);\n            @include var(border-width, border-width);\n            @include var(border-color, dark2);\n\n            list-style: none;\n            text-align: left;\n            max-width: 300px;\n            min-width: 200px;\n            padding-top: 0.25rem;\n            padding-bottom: 0.25rem;\n\n            li {\n                height: auto;\n\n                a {\n                    display: block;\n                    padding: map.get($cm-space, sm);\n                    padding-left: 16px;\n\n                    span {\n                        display: inline-flex;\n                        align-items: center;\n                    }\n\n                    .icon {\n                        margin-right: 0.45em;\n                    }\n\n                    &:hover {\n                        @include var(background-color, blue1);\n                        @include var(color, white1);\n                    }\n                }\n            }\n        }\n    }\n\n    &.is-right .cm-dropdowncontent.cm-dropdownexpanded {\n        right: 0;\n        left: auto;\n    }\n}\n',"\n@use \"sass:map\";\n@import './modal';\n@import './vars';\n\n.klaro-ide {\n\n    @import './switch';\n    @import './controls';\n    @import './tabs';\n    @import './list';\n    @import './dropdown';\n\n    label {\n        display: inline-block;\n    }\n\n    .cm-global-fields,\n    .cm-config-controls,\n    .cm-translations-fields,\n    .cm-service-fields {\n        max-width: 600px;\n\n    }\n\n    .cm-json {\n        .cm-file-import {\n            display: none;\n        }\n\n        .cm-upload-label {\n            cursor: pointer;\n\n            button {\n                pointer-events: none;\n            }\n        }\n\n        pre code {\n            white-space: pre-wrap;\n        }\n    }\n\n    .cm-message {\n        padding: map.get($cm-space, md);\n\n        &.cm-error,\n        &.cm-success {\n            @include var(border-radius, border-radius);\n            @include var(color, white1);\n            box-shadow: $cm-box-shadow-light-sm;\n            margin-bottom: map.get($cm-space, lg);\n        }\n\n        &.cm-error {\n            @include var(background-color, red2);\n        }\n\n        &.cm-success {\n            @include var(background, green2);\n        }\n    }\n\n    .cm-space-sm {\n        margin-bottom: map.get($cm-space, sm) !important;\n    }\n\n    .cm-space-md {\n        margin-bottom: map.get($cm-space, md) !important;\n    }\n\n    .cm-space-lg {\n        margin-bottom: map.get($cm-space, lg) !important;\n    }\n\n    .cm-json,\n    .cm-global-fields,\n    .cm-config-controls,\n    .cm-translations-fields,\n    .cm-service-fields {\n        h1,\n        h2,\n        h3,\n        h4 {\n            font-size: 2em;\n            text-transform: uppercase;\n            margin-top: 10px;\n            margin-bottom: 10px;\n            font-weight: 600;\n        }\n\n        h1 {\n            @include var(border-style, border-style);\n            @include var(border-width, border-width);\n            @include var(border-color, light2);\n            text-transform: none;\n            margin-bottom: 20px;\n            display: inline-block;\n        }\n\n        h2 {\n            font-size: 1.6em;\n        }\n\n        h3 {\n            font-size: 1.3em;\n        }\n\n        h4 {\n            font-size: 1em;\n            font-weight: 600;\n        }\n    }\n\n    p.cm-section-description {\n        @include var(color, dark2);\n        text-align: justify;\n        margin-top: map.get($cm-space, sm);\n        margin-bottom: map.get($cm-space, lg);\n    }\n\n    .cm-purpose-order {\n        ul {\n            margin-top: map.get($cm-space, md);\n            margin-bottom: map.get($cm-space, md);\n\n            li {\n                display: flex;\n\n                span.cm-buttons {\n                    @include var(border-radius, border-radius);\n                    flex-grow: 0;\n                    box-shadow: $cm-box-shadow-light-sm;\n\n                    a {\n                        padding: map.get($cm-space, md);\n                        display: inline-block;\n\n                        &:hover {\n                            @include var(background, green1);\n                        }\n                    }\n                }\n\n                span.cm-value {\n                    flex-grow: 1;\n                    padding: map.get($cm-space, md);\n                }\n            }\n        }\n    }\n\n    .cm-translations-fields {\n        .cm-translations-for-key {\n            @include var(border-radius, border-radius);\n            @include var(background-color, white1);\n            box-shadow: $cm-box-shadow-light-sm;\n            padding: map.get($cm-space, md);\n            margin-bottom: map.get($cm-space, lg);\n\n            li {\n                display: flex;\n                justify-content: space-between;\n                align-items: flex-start;\n\n                span.cm-lang {\n                    font-family: Courier;\n                    display: block;\n                    padding: 20px;\n                    margin-top: 5px;\n                    flex-grow: 0;\n                }\n            }\n        }\n    }\n\n    .cm-service-list,\n    .cm-config-list {\n        .cm-status {\n            text-align: left;\n\n            span {\n                padding-left: 10px;\n            }\n\n            .cm-status-is-active {\n                @include var(color, green1);\n            }\n\n            .cm-status-is-inactive {\n                @include var(color, red1);\n            }\n        }\n\n        .cm-name {\n            text-transform: uppercase;\n            font-weight: 600;\n        }\n    }\n\n\n    p.cm-no-cookies,\n    p.cm-no-services {\n        margin-top: 6px;\n        margin-bottom: 6px;\n        font-weight: 600;\n    }\n\n    .cm-cookie-config {\n        .cm-cookie-forms {\n            .cm-cookie-form {\n                @include var(border-bottom-style, border-style);\n                @include var(border-bottom-width, border-width);\n                @include var(border-bottom-color, light2);\n            }\n        }\n    }\n\n    .cm-demo {\n        .cm-config-controls {\n            .cm-retracting-label-input {\n                width: auto;\n                flex-grow: 1;\n                margin-right: map.get($cm-space, md);\n            }\n\n            &:first-child {\n                @include var(border-bottom-style, border-style);\n                @include var(border-bottom-width, border-width);\n                @include var(border-bottom-color, light2);\n            }\n        }\n    }\n\n    .cm-config-controls {\n        margin-top: map.get($cm-space, sm);\n        margin-bottom: map.get($cm-space, lg);\n        max-width: none;\n        display: flex;\n        flex-wrap: wrap;\n        width: 100%;\n        align-items: baseline;\n        justify-content: space-between;\n\n        h2 {\n            margin-right: map.get($cm-space, lg);\n            display: block;\n            flex-grow: 1;\n        }\n\n        .cm-control {\n            flex-shrink: 1;\n            display: inline-block;\n            margin-bottom: 20px;\n\n            .cm-retracting-label-input {\n                max-width: 400px;\n                display: block;\n            }\n\n            input {\n                max-width: 400px;\n            }\n\n            select {\n                @include var(border-color, green1);\n                @include var(border-radius, border-radius);\n                @include var(border-style, border-style);\n                @include var(border-radius, border-radius);\n                @include var(background-color, white1);\n                padding: map.get($cm-space, md);\n                margin-bottom: map.get($cm-space, md);\n                display: block;\n            }\n        }\n\n        .cm-control-button {\n\n            @include var(border-radius, border-radius);\n            @include var(background-color, blue2);\n            @include var(color, white1);\n\n            border-style: none;\n            padding: 12px;\n            margin-top: 4px;\n            cursor: pointer;\n            box-shadow: $cm-box-shadow-dark-sm;\n            margin-right: 6px;\n\n            &.cm-delete {\n                @include var(background-color, red3);\n                float: right;\n            }\n\n            &.cm-secondary {\n                @include var(background-color, red2);\n            }\n\n            &.cm-success {\n                @include var(background-color, green1);\n            }\n\n            &:disabled {\n                @include var(background-color, light1);\n                @include var(color, dark1);\n                cursor: not-allowed;\n            }\n        }\n    }\n\n    .cookie-modal {\n        .cm-modal {\n            &.cm-ide {\n                @include modal(1020px, 1000px);\n            }\n        }\n    }\n}\n","@mixin modal($centerWidth, $windowWidth) {\n\n    @include var(background-color, dark1);\n    @include var(color, light1);\n\n    z-index: 1001;\n    box-shadow: $cm-box-shadow-dark-md;\n\n    width: 100%;\n    max-height: 98%;\n\n    top: 50%;\n    transform: translateY(-50%);\n\n    position: fixed;\n    overflow: auto;\n\n    @media (min-width: $centerWidth) {\n        @include var(border-radius, border-radius);\n        position: relative;\n        margin: 0 auto;\n        max-width: $windowWidth;\n        height: auto;\n        width: auto;\n    }\n}\n"],sourceRoot:""}]);const c=a},679:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var r=n(4942),o=n.n(r),i=n(278),a=n.n(i)()(o());a.push([e.id,'.klaro{font-family:inherit;font-family:var(--font-family, inherit);font-size:14px;font-size:var(--font-size, 14px)}.klaro button{font-family:inherit;font-family:var(--font-family, inherit);font-size:14px;font-size:var(--font-size, 14px)}.klaro.cm-as-context-notice{height:100%;padding-bottom:12px;padding-top:12px}.klaro .cookie-modal .cm-switch-container,.klaro .context-notice .cm-switch-container,.klaro .cookie-notice .cm-switch-container{border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-color:#c8c8c8;border-bottom-color:var(--light2, #c8c8c8);display:block;position:relative;padding:10px;padding-left:66px;line-height:20px;vertical-align:middle;min-height:40px}.klaro .cookie-modal .cm-switch-container:last-child,.klaro .context-notice .cm-switch-container:last-child,.klaro .cookie-notice .cm-switch-container:last-child{border-bottom:0}.klaro .cookie-modal .cm-switch-container:first-child,.klaro .context-notice .cm-switch-container:first-child,.klaro .cookie-notice .cm-switch-container:first-child{margin-top:0}.klaro .cookie-modal .cm-switch-container p,.klaro .context-notice .cm-switch-container p,.klaro .cookie-notice .cm-switch-container p{margin-top:0}.klaro .cookie-modal .cm-switch,.klaro .context-notice .cm-switch,.klaro .cookie-notice .cm-switch{position:relative;display:inline-block;width:50px;height:30px}.klaro .cookie-modal .cm-list-input:checked+.cm-list-label .slider,.klaro .context-notice .cm-list-input:checked+.cm-list-label .slider,.klaro .cookie-notice .cm-list-input:checked+.cm-list-label .slider{background-color:#1a936f;background-color:var(--green1, #1a936f)}.klaro .cookie-modal .cm-list-input.half-checked:checked+.cm-list-label .slider,.klaro .context-notice .cm-list-input.half-checked:checked+.cm-list-label .slider,.klaro .cookie-notice .cm-list-input.half-checked:checked+.cm-list-label .slider{background-color:#1a936f;background-color:var(--green1, #1a936f);opacity:.6}.klaro .cookie-modal .cm-list-input.half-checked:checked+.cm-list-label .slider::before,.klaro .context-notice .cm-list-input.half-checked:checked+.cm-list-label .slider::before,.klaro .cookie-notice .cm-list-input.half-checked:checked+.cm-list-label .slider::before{-ms-transform:translateX(10px);transform:translateX(10px)}.klaro .cookie-modal .cm-list-input.only-required+.cm-list-label .slider,.klaro .context-notice .cm-list-input.only-required+.cm-list-label .slider,.klaro .cookie-notice .cm-list-input.only-required+.cm-list-label .slider{background-color:#24cc9a;background-color:var(--green2, #24cc9a);opacity:.8}.klaro .cookie-modal .cm-list-input.only-required+.cm-list-label .slider::before,.klaro .context-notice .cm-list-input.only-required+.cm-list-label .slider::before,.klaro .cookie-notice .cm-list-input.only-required+.cm-list-label .slider::before{-ms-transform:translateX(10px);transform:translateX(10px)}.klaro .cookie-modal .cm-list-input.required:checked+.cm-list-label .slider,.klaro .context-notice .cm-list-input.required:checked+.cm-list-label .slider,.klaro .cookie-notice .cm-list-input.required:checked+.cm-list-label .slider{background-color:#24cc9a;background-color:var(--green2, #24cc9a);opacity:.8;cursor:not-allowed}.klaro .cookie-modal .slider,.klaro .context-notice .slider,.klaro .cookie-notice .slider{box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19)}.klaro .cookie-modal .cm-list-input,.klaro .context-notice .cm-list-input,.klaro .cookie-notice .cm-list-input{position:absolute;top:0;left:0;opacity:0;width:50px;height:30px}.klaro .cookie-modal .cm-list-title,.klaro .context-notice .cm-list-title,.klaro .cookie-notice .cm-list-title{font-size:.9em;font-weight:600}.klaro .cookie-modal .cm-list-description,.klaro .context-notice .cm-list-description,.klaro .cookie-notice .cm-list-description{color:#7c7c7c;color:var(--dark3, #7c7c7c);font-size:.9em;padding-top:4px}.klaro .cookie-modal .cm-list-label .cm-switch,.klaro .context-notice .cm-list-label .cm-switch,.klaro .cookie-notice .cm-list-label .cm-switch{position:absolute;left:0}.klaro .cookie-modal .cm-list-label .slider,.klaro .context-notice .cm-list-label .slider,.klaro .cookie-notice .cm-list-label .slider{background-color:#f2f2f2;background-color:var(--white2, #f2f2f2);position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;transition:.4s;width:50px;display:inline-block}.klaro .cookie-modal .cm-list-label .slider::before,.klaro .context-notice .cm-list-label .slider::before,.klaro .cookie-notice .cm-list-label .slider::before{background-color:#e6e6e6;background-color:var(--white3, #e6e6e6);position:absolute;content:"";height:20px;width:20px;left:5px;bottom:5px;transition:.4s}.klaro .cookie-modal .cm-list-label .slider.round,.klaro .context-notice .cm-list-label .slider.round,.klaro .cookie-notice .cm-list-label .slider.round{border-radius:30px}.klaro .cookie-modal .cm-list-label .slider.round::before,.klaro .context-notice .cm-list-label .slider.round::before,.klaro .cookie-notice .cm-list-label .slider.round::before{border-radius:50%}.klaro .cookie-modal .cm-list-label input:focus+.slider,.klaro .context-notice .cm-list-label input:focus+.slider,.klaro .cookie-notice .cm-list-label input:focus+.slider{box-shadow-color:#48dfb2;box-shadow-color:var(--green3, #48dfb2);box-shadow:0 0 1px var(--box-shadow-color, green3)}.klaro .cookie-modal .cm-list-label input:checked+.slider::before,.klaro .context-notice .cm-list-label input:checked+.slider::before,.klaro .cookie-notice .cm-list-label input:checked+.slider::before{-ms-transform:translateX(20px);transform:translateX(20px)}.klaro .cookie-modal .cm-list-input:focus+.cm-list-label .slider,.klaro .context-notice .cm-list-input:focus+.cm-list-label .slider,.klaro .cookie-notice .cm-list-input:focus+.cm-list-label .slider{box-shadow:0 4px 6px 0 rgba(125,125,125,.2),5px 5px 10px 0 rgba(125,125,125,.19)}.klaro .cookie-modal .cm-list-input:checked+.cm-list-label .slider::before,.klaro .context-notice .cm-list-input:checked+.cm-list-label .slider::before,.klaro .cookie-notice .cm-list-input:checked+.cm-list-label .slider::before{-ms-transform:translateX(20px);transform:translateX(20px)}.klaro .cookie-modal .slider,.klaro .context-notice .slider,.klaro .cookie-notice .slider{box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19)}.klaro .cookie-modal a,.klaro .context-notice a,.klaro .cookie-notice a{color:#1a936f;color:var(--green1, #1a936f);text-decoration:none}.klaro .cookie-modal p,.klaro .cookie-modal strong,.klaro .cookie-modal h1,.klaro .cookie-modal h2,.klaro .cookie-modal ul,.klaro .cookie-modal li,.klaro .context-notice p,.klaro .context-notice strong,.klaro .context-notice h1,.klaro .context-notice h2,.klaro .context-notice ul,.klaro .context-notice li,.klaro .cookie-notice p,.klaro .cookie-notice strong,.klaro .cookie-notice h1,.klaro .cookie-notice h2,.klaro .cookie-notice ul,.klaro .cookie-notice li{color:#fafafa;color:var(--light1, #fafafa)}.klaro .cookie-modal p,.klaro .cookie-modal h1,.klaro .cookie-modal h2,.klaro .cookie-modal ul,.klaro .cookie-modal li,.klaro .context-notice p,.klaro .context-notice h1,.klaro .context-notice h2,.klaro .context-notice ul,.klaro .context-notice li,.klaro .cookie-notice p,.klaro .cookie-notice h1,.klaro .cookie-notice h2,.klaro .cookie-notice ul,.klaro .cookie-notice li{display:block;text-align:left;margin:0;padding:0;margin-top:.7em}.klaro .cookie-modal h1,.klaro .cookie-modal h2,.klaro .cookie-modal h3,.klaro .cookie-modal h4,.klaro .cookie-modal h5,.klaro .cookie-modal h6,.klaro .context-notice h1,.klaro .context-notice h2,.klaro .context-notice h3,.klaro .context-notice h4,.klaro .context-notice h5,.klaro .context-notice h6,.klaro .cookie-notice h1,.klaro .cookie-notice h2,.klaro .cookie-notice h3,.klaro .cookie-notice h4,.klaro .cookie-notice h5,.klaro .cookie-notice h6{font-family:inherit;font-family:var(--title-font-family, inherit)}.klaro .cookie-modal .cm-link,.klaro .context-notice .cm-link,.klaro .cookie-notice .cm-link{margin-right:.5em;vertical-align:middle}.klaro .cookie-modal .cm-btn,.klaro .context-notice .cm-btn,.klaro .cookie-notice .cm-btn{color:#fff;color:var(--button-text-color, #fff);background-color:#5c5c5c;background-color:var(--dark2, #5c5c5c);border-radius:4px;border-radius:var(--border-radius, 4px);padding:6px 10px;margin-right:.5em;border-style:none;padding:.4em;font-size:1em;cursor:pointer}.klaro .cookie-modal .cm-btn:disabled,.klaro .context-notice .cm-btn:disabled,.klaro .cookie-notice .cm-btn:disabled{opacity:.5}.klaro .cookie-modal .cm-btn.cm-btn-close,.klaro .context-notice .cm-btn.cm-btn-close,.klaro .cookie-notice .cm-btn.cm-btn-close{background-color:#c8c8c8;background-color:var(--light2, #c8c8c8)}.klaro .cookie-modal .cm-btn.cm-btn-success,.klaro .context-notice .cm-btn.cm-btn-success,.klaro .cookie-notice .cm-btn.cm-btn-success{background-color:#1a936f;background-color:var(--green1, #1a936f)}.klaro .cookie-modal .cm-btn.cm-btn-success-var,.klaro .context-notice .cm-btn.cm-btn-success-var,.klaro .cookie-notice .cm-btn.cm-btn-success-var{background-color:#24cc9a;background-color:var(--green2, #24cc9a)}.klaro .cookie-modal .cm-btn.cm-btn-info,.klaro .context-notice .cm-btn.cm-btn-info,.klaro .cookie-notice .cm-btn.cm-btn-info{background-color:#2581c4;background-color:var(--blue1, #2581c4)}.klaro .context-notice{border-radius:4px;border-radius:var(--border-radius, 4px);border-style:solid;border-style:var(--border-style, solid);border-width:1px;border-width:var(--border-width, 1px);border-color:#c8c8c8;border-color:var(--light2, #c8c8c8);background-color:#fafafa;background-color:var(--light1, #fafafa);display:flex;flex-direction:column;flex-wrap:wrap;align-items:center;justify-content:center;padding:12px;height:100%}.klaro .context-notice.cm-dark{background-color:#333;background-color:var(--dark1, #333);border-color:#5c5c5c;border-color:var(--dark2, #5c5c5c)}.klaro .context-notice.cm-dark p{color:#fafafa;color:var(--light1, #fafafa)}.klaro .context-notice.cm-dark p a{color:#459cdc;color:var(--blue2, #459cdc)}.klaro .context-notice p{color:#333;color:var(--dark1, #333);flex-grow:0;text-align:center;padding-top:0;margin-top:0}.klaro .context-notice p a{color:#24cc9a;color:var(--green2, #24cc9a)}.klaro .context-notice p.cm-buttons{margin-top:12px}.klaro .context-notice p.ccn-description-empty-store{margin-top:24px;font-size:14px;font-size:var(--font-size, 14px)}.klaro .cookie-modal{width:100%;height:100%;position:fixed;overflow:hidden;left:0;top:0;z-index:1000}.klaro .cookie-modal.cm-embedded{position:relative;height:inherit;width:inherit;left:inherit;right:inherit;z-index:0}.klaro .cookie-modal.cm-embedded .cm-modal.cm-klaro{position:relative;-ms-transform:none;transform:none}.klaro .cookie-modal .cm-bg{background:rgba(0,0,0,.5);height:100%;width:100%;position:fixed;top:0;left:0}.klaro .cookie-modal .cm-modal.cm-klaro{background-color:#333;background-color:var(--dark1, #333);color:#fafafa;color:var(--light1, #fafafa);z-index:1001;box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19);width:100%;max-height:98%;top:50%;-ms-transform:translateY(-50%);transform:translateY(-50%);position:fixed;overflow:auto}@media(min-width: 660px){.klaro .cookie-modal .cm-modal.cm-klaro{border-radius:4px;border-radius:var(--border-radius, 4px);position:relative;margin:0 auto;max-width:640px;height:auto;width:auto}}.klaro .cookie-modal .cm-modal .hide{border-style:none;background:none;cursor:pointer;position:absolute;top:20px;right:20px;z-index:1}.klaro .cookie-modal .cm-modal .hide svg{stroke:#fafafa;stroke:var(--light1, #fafafa)}.klaro .cookie-modal .cm-modal .cm-footer{border-top-color:#5c5c5c;border-top-color:var(--dark2, #5c5c5c);border-top-width:1px;border-top-width:var(--border-width, 1px);border-top-style:solid;border-top-style:var(--border-style, solid);padding:1em}.klaro .cookie-modal .cm-modal .cm-footer-buttons{display:flex;flex-flow:row;justify-content:space-between}.klaro .cookie-modal .cm-modal .cm-footer .cm-powered-by{font-size:.8em;padding-top:4px;text-align:right;padding-right:8px}.klaro .cookie-modal .cm-modal .cm-footer .cm-powered-by a{color:#5c5c5c;color:var(--dark2, #5c5c5c)}.klaro .cookie-modal .cm-modal .cm-header{border-bottom-width:1px;border-bottom-width:var(--border-width, 1px);border-bottom-style:solid;border-bottom-style:var(--border-style, solid);border-bottom-color:#5c5c5c;border-bottom-color:var(--dark2, #5c5c5c);padding:1em;padding-right:24px}.klaro .cookie-modal .cm-modal .cm-header h1{margin:0;font-size:2em;display:block}.klaro .cookie-modal .cm-modal .cm-header h1.title{padding-right:20px}.klaro .cookie-modal .cm-modal .cm-body{padding:1em}.klaro .cookie-modal .cm-modal .cm-body ul{display:block}.klaro .cookie-modal .cm-modal .cm-body span{display:inline-block;width:auto}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes{padding:0;margin:0}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose .cm-services .cm-caret,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose .cm-services .cm-caret{color:#a0a0a0;color:var(--light3, #a0a0a0)}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose .cm-services .cm-content,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose .cm-services .cm-content{margin-left:-40px;display:none}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose .cm-services .cm-content.expanded,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose .cm-services .cm-content.expanded{margin-top:10px;display:block}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose{position:relative;line-height:20px;vertical-align:middle;padding-left:60px;min-height:40px}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service:first-child,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose:first-child,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service:first-child,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose:first-child{margin-top:0}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service p,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose p,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service p,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose p{margin-top:0}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service p.purposes,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose p.purposes,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service p.purposes,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose p.purposes{color:#a0a0a0;color:var(--light3, #a0a0a0);font-size:.8em}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service.cm-toggle-all,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose.cm-toggle-all,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service.cm-toggle-all,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose.cm-toggle-all{border-top-width:1px;border-top-width:var(--border-width, 1px);border-top-style:solid;border-top-style:var(--border-style, solid);border-top-color:#5c5c5c;border-top-color:var(--dark2, #5c5c5c);padding-top:1em}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service span.cm-list-title,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose span.cm-list-title,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service span.cm-list-title,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose span.cm-list-title{font-weight:600}.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service span.cm-opt-out,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-service span.cm-required,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose span.cm-opt-out,.klaro .cookie-modal .cm-modal .cm-body ul.cm-services li.cm-purpose span.cm-required,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service span.cm-opt-out,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-service span.cm-required,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose span.cm-opt-out,.klaro .cookie-modal .cm-modal .cm-body ul.cm-purposes li.cm-purpose span.cm-required{color:#5c5c5c;color:var(--dark2, #5c5c5c);padding-left:.2em;font-size:.8em}.klaro .cookie-notice:not(.cookie-modal-notice){background-color:#333;background-color:var(--dark1, #333);z-index:999;position:fixed;width:100%;bottom:0;right:0}@media(min-width: 1024px){.klaro .cookie-notice:not(.cookie-modal-notice){border-radius:4px;border-radius:var(--border-radius, 4px);position:fixed;position:var(--notice-position, fixed);right:20px;right:var(--notice-right, 20px);left:auto;left:var(--notice-left, auto);bottom:20px;bottom:var(--notice-bottom, 20px);top:auto;top:var(--notice-top, auto);max-width:400px;max-width:var(--notice-max-width, 400px);box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19)}}@media(max-width: 1023px){.klaro .cookie-notice:not(.cookie-modal-notice){border-style:none;border-radius:0}}.klaro .cookie-notice:not(.cookie-modal-notice).cn-embedded{position:relative;height:inherit;width:inherit;left:inherit;right:inherit;bottom:inherit;z-index:0}.klaro .cookie-notice:not(.cookie-modal-notice).cn-embedded .cn-body{padding-top:.5em}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body{margin-bottom:0;margin-right:0;bottom:0;padding:1em;padding-top:0}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body p{margin-bottom:.5em}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body p.cn-changes{text-decoration:underline}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-learn-more{display:inline-block;flex-grow:1}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-buttons{display:inline-block;margin-top:-0.5em}@media(max-width: 384px){.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-buttons{width:100%}}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-buttons button.cm-btn{margin-top:.5em}@media(max-width: 384px){.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-buttons button.cm-btn{width:calc(50% - 0.5em)}}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-ok{margin-top:-0.5em;display:flex;flex-flow:row;flex-wrap:wrap;justify-content:right;align-items:baseline}.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-ok a,.klaro .cookie-notice:not(.cookie-modal-notice) .cn-body .cn-ok div{margin-top:.5em}.klaro .cookie-modal-notice{background-color:#333;background-color:var(--dark1, #333);color:#fafafa;color:var(--light1, #fafafa);z-index:1001;box-shadow:0 4px 6px 0 rgba(0,0,0,.2),5px 5px 10px 0 rgba(0,0,0,.19);width:100%;max-height:98%;top:50%;-ms-transform:translateY(-50%);transform:translateY(-50%);position:fixed;overflow:auto;padding:1em;padding-top:.2em}@media(min-width: 400px){.klaro .cookie-modal-notice{border-radius:4px;border-radius:var(--border-radius, 4px);position:relative;margin:0 auto;max-width:400px;height:auto;width:auto}}.klaro .cookie-modal-notice .cn-ok{display:flex;flex-flow:row;justify-content:space-between;align-items:center;margin-top:1em}.klaro .cookie-notice-hidden{display:none !important}',"",{version:3,sources:["webpack://./scss/klaro.scss","webpack://./scss/vars.scss","webpack://./scss/switch.scss","webpack://./scss/modal.scss"],names:[],mappings:"AAIA,OCyHI,mBAAA,CACA,uCAAA,CADA,cAAA,CACA,gCAAA,CDlHA,cCiHA,mBAAA,CACA,uCAAA,CADA,cAAA,CACA,gCAAA,CD7GA,4BACI,WAAA,CACA,mBAAA,CACA,gBAAA,CElBR,iID2HI,yBAAA,CACA,8CAAA,CADA,uBAAA,CACA,4CAAA,CADA,2BAAA,CACA,0CAAA,CCvHA,aAAA,CACA,iBAAA,CACA,YAAA,CACA,iBAAA,CACA,gBAAA,CACA,qBAAA,CACA,eAAA,CAEA,kKACI,eAAA,CAGJ,qKACI,YAAA,CAGJ,uIACI,YAAA,CAIR,mGACI,iBAAA,CACA,oBAAA,CACA,UAAA,CACA,WAAA,CAGJ,4MD0FI,wBAAA,CACA,uCAAA,CCvFJ,mPDsFI,wBAAA,CACA,uCAAA,CCrFA,UAAA,CAEA,2QAEI,8BAAA,CACA,0BAAA,CAIR,8ND2EI,wBAAA,CACA,uCAAA,CC1EA,UAAA,CAEA,sPAEI,8BAAA,CACA,0BAAA,CAIR,uODgEI,wBAAA,CACA,uCAAA,CC/DA,UAAA,CACA,kBAAA,CAGJ,0FACI,oED5DoB,CC+DxB,+GACI,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CAGJ,+GACI,cAAA,CACA,eAAA,CAGJ,iIDwCI,aAAA,CACA,2BAAA,CCvCA,cAAA,CACA,eAAA,CAMA,gJACI,iBAAA,CACA,MAAA,CAGJ,uID0BA,wBAAA,CACA,uCAAA,CCvBI,iBAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CAEA,cAAA,CACA,UAAA,CACA,oBAAA,CAGJ,+JDUA,wBAAA,CACA,uCAAA,CCPI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,UAAA,CAEA,cAAA,CAIJ,yJACI,kBAAA,CAGJ,iLACI,iBAAA,CAGJ,2KDbA,wBAAA,CACA,uCAAA,CCcI,kDAAA,CAGJ,yMAEI,8BAAA,CACA,0BAAA,CAIR,sMACI,gFAAA,CAIJ,oOAEI,8BAAA,CACA,0BAAA,CFlII,0FACI,oECrBY,CDwBhB,wEC6FJ,aAAA,CACA,4BAAA,CD5FQ,oBAAA,CAGJ,2cCwFJ,aAAA,CACA,4BAAA,CDhFI,oXAKI,aAAA,CACA,eAAA,CACA,QAAA,CACA,SAAA,CACA,eAAA,CAGJ,kcCmEJ,mBAAA,CACA,6CAAA,CD3DI,6FACI,iBAAA,CACA,qBAAA,CAGJ,0FCqDJ,UAAA,CACA,oCAAA,CADA,wBAAA,CACA,sCAAA,CADA,iBAAA,CACA,uCAAA,CDjDQ,gBAAA,CACA,iBAxEW,CAyEX,iBAAA,CACA,YAAA,CACA,aAAA,CACA,cAAA,CAEA,qHACI,UAAA,CAGJ,iICqCR,wBAAA,CACA,uCAAA,CDlCQ,uICiCR,wBAAA,CACA,uCAAA,CD9BQ,mJC6BR,wBAAA,CACA,uCAAA,CD1BQ,8HCyBR,wBAAA,CACA,sCAAA,CDpBA,uBCmBA,iBAAA,CACA,uCAAA,CADA,kBAAA,CACA,uCAAA,CADA,gBAAA,CACA,qCAAA,CADA,oBAAA,CACA,mCAAA,CADA,wBAAA,CACA,uCAAA,CDbI,YAAA,CACA,qBAAA,CACA,cAAA,CACA,kBAAA,CACA,sBAAA,CACA,YAAA,CACA,WAAA,CAEA,+BCIJ,qBAAA,CACA,mCAAA,CADA,oBAAA,CACA,kCAAA,CDDQ,iCAAA,aAAA,CCCR,4BAAA,CDEY,mCCHZ,aAAA,CACA,2BAAA,CDQI,yBCTJ,UAAA,CACA,wBAAA,CDWQ,WAAA,CACA,iBAAA,CACA,aAAA,CACA,YAAA,CAEA,2BCjBR,aAAA,CACA,4BAAA,CDqBI,oCACI,eAAA,CAIJ,qDACI,eAAA,CC5BR,cAAA,CACA,gCAAA,CDgCA,qBACI,UAAA,CACA,WAAA,CACA,cAAA,CACA,eAAA,CACA,MAAA,CACA,KAAA,CACA,YAAA,CAEA,iCACI,iBAAA,CACA,cAAA,CACA,aAAA,CACA,YAAA,CACA,aAAA,CACA,SAAA,CAEA,oDACI,iBAAA,CACA,kBAAA,CAAA,cAAA,CAIR,4BACI,yBAAA,CACA,WAAA,CACA,UAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CAIA,wCClER,qBAAA,CACA,mCAAA,CADA,aAAA,CACA,4BAAA,CEzHA,YAAA,CACA,oEFEoB,CAAA,UAAA,CECpB,cAAA,CAEA,OAAA,CACA,8BAAA,CAAA,0BAAA,CAEA,cAAA,CACA,aAAA,CAEA,yBH8KQ,wCClER,iBAAA,CACA,uCAAA,CE3GI,iBAAA,CACA,aAAA,CACA,eH2K8B,CG1K9B,WAAA,CACA,UAAA,CAAA,CH4KI,qCACI,iBAAA,CACA,eAAA,CACA,cAAA,CACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,SAAA,CAEA,yCC/EZ,cAAA,CACA,6BAAA,CDmFQ,0CCpFR,wBAAA,CACA,sCAAA,CADA,oBAAA,CACA,yCAAA,CADA,sBAAA,CACA,2CAAA,CDwFY,WAAA,CAEA,kDACI,YAAA,CACA,aAAA,CACA,6BAAA,CAGJ,yDACI,cAAA,CACA,eAAA,CACA,gBAAA,CACA,iBAAA,CAEA,2DCvGhB,aAAA,CACA,2BAAA,CD4GQ,0CC7GR,uBAAA,CACA,4CAAA,CADA,yBAAA,CACA,8CAAA,CADA,2BAAA,CACA,yCAAA,CDiHY,WAAA,CACA,kBAAA,CAEA,6CACI,QAAA,CACA,aAAA,CACA,aAAA,CAEA,mDACI,kBAAA,CAKZ,wCACI,WAAA,CAEA,2CACI,aAAA,CAGJ,6CACI,oBAAA,CACA,UAAA,CAGJ,8GAEI,SAAA,CACA,QAAA,CAIQ,wLCnJxB,aAAA,CACA,4BAAA,CDsJwB,4LACI,iBAAA,CACA,YAAA,CAEA,8MACI,eAAA,CACA,aAAA,CAMhB,oRAEI,iBAAA,CACA,gBAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CAEA,oUACI,YAAA,CAGJ,4RACI,YAAA,CAGJ,gUCnLpB,aAAA,CACA,4BAAA,CDoLwB,cAAA,CAGJ,4UCxLpB,oBAAA,CACA,yCAAA,CADA,sBAAA,CACA,2CAAA,CADA,wBAAA,CACA,sCAAA,CD6LwB,eAAA,CAGJ,gWACI,eAAA,CAGJ,4qBCrMpB,aAAA,CACA,2BAAA,CDuMwB,iBAAA,CACA,cAAA,CAQxB,gDCjNA,qBAAA,CACA,mCAAA,CDkNI,WAAA,CAEA,cAAA,CACA,UAAA,CACA,QAAA,CACA,OAAA,CAEA,0BATJ,gDCjNA,iBAAA,CACA,uCAAA,CADA,cAAA,CACA,sCAAA,CADA,UAAA,CACA,+BAAA,CADA,SAAA,CACA,6BAAA,CADA,WAAA,CACA,iCAAA,CADA,QAAA,CACA,2BAAA,CADA,eAAA,CACA,wCAAA,CDiOQ,oECvVY,CAAA,CD0VhB,0BApBJ,gDAqBQ,iBAAA,CACA,eAAA,CAAA,CAGJ,4DACI,iBAAA,CACA,cAAA,CACA,aAAA,CACA,YAAA,CACA,aAAA,CACA,cAAA,CACA,SAAA,CAEA,qEACI,gBAAA,CAIR,yDACI,eAAA,CACA,cAAA,CACA,QAAA,CAEA,WAAA,CACA,aAAA,CAEA,2DACI,kBAAA,CAGJ,sEACI,yBAAA,CAGJ,wEACI,oBAAA,CACA,WAAA,CAGJ,qEACI,oBAAA,CACA,iBAAA,CAEA,yBAJJ,qEAKQ,UAAA,CAAA,CAGJ,mFACI,eAAA,CAEA,yBAHJ,mFAIQ,uBAAA,CAAA,CAKZ,gEAGI,iBAAA,CACA,YAAA,CACA,aAAA,CACA,cAAA,CACA,qBAAA,CACA,oBAAA,CAEA,sIAEI,eAAA,CAMhB,4BChTA,qBAAA,CACA,mCAAA,CADA,aAAA,CACA,4BAAA,CEzHA,YAAA,CACA,oEFEoB,CAAA,UAAA,CECpB,cAAA,CAEA,OAAA,CACA,8BAAA,CAAA,0BAAA,CAEA,cAAA,CACA,aAAA,CHiaI,WAAA,CACA,gBAAA,CGhaJ,yBH4ZA,4BChTA,iBAAA,CACA,uCAAA,CE3GI,iBAAA,CACA,aAAA,CACA,eHyZsB,CGxZtB,WAAA,CACA,UAAA,CAAA,CH4ZA,mCACI,YAAA,CACA,aAAA,CACA,6BAAA,CACA,kBAAA,CAEA,cAAA,CAIR,6BACI,uBAAA",sourcesContent:["@use \"sass:map\";\n@import './modal';\n@import './vars';\n\n.klaro {\n\n    $btn-margin-right: 0.5em;\n\n    @include var(font-family, font-family);\n    @include var(font-size, font-size);\n\n    // buttons use their own font-family setting so we need to override it explicitly...\n    button {\n        @include var(font-family, font-family);\n        @include var(font-size, font-size);\n    }\n\n    &.cm-as-context-notice {\n        height: 100%;\n        padding-bottom: map.get($cm-space, md);\n        padding-top: map.get($cm-space, md);\n    }\n\n    .cookie-modal,\n    .context-notice,\n    .cookie-notice {\n        @import 'switch';\n\n        .slider {\n            box-shadow: $cm-box-shadow-dark-md;\n        }\n\n        a {\n            @include var(color, green1);\n            text-decoration: none;\n        }\n\n        p,\n        strong,\n        h1,\n        h2,\n        ul,\n        li {\n            @include var(color, light1);\n        }\n\n        p,\n        h1,\n        h2,\n        ul,\n        li {\n            display: block;\n            text-align: left;\n            margin: 0;\n            padding: 0;\n            margin-top: 0.7em;\n        }\n\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n            @include var(font-family, title-font-family);\n        }\n\n        .cm-link {\n            margin-right: 0.5em;\n            vertical-align: middle;\n        }\n\n        .cm-btn {\n\n            @include var(color, button-text-color);\n            @include var(background-color, dark2);\n            @include var(border-radius, border-radius);\n            padding: 6px 10px;\n            margin-right: $btn-margin-right;\n            border-style: none;\n            padding: 0.4em;\n            font-size: 1em;\n            cursor: pointer;\n\n            &:disabled {\n                opacity: 0.5;\n            }\n\n            &.cm-btn-close {\n                @include var(background-color, light2);\n            }\n\n            &.cm-btn-success {\n                @include var(background-color, green1);\n            }\n\n            &.cm-btn-success-var {\n                @include var(background-color, green2);\n            }\n\n            &.cm-btn-info {\n                @include var(background-color, blue1);\n            }\n        }\n    }\n\n    .context-notice {\n        @include var(border-radius, border-radius);\n        @include var(border-style, border-style);\n        @include var(border-width, border-width);\n        @include var(border-color, light2);\n        @include var(background-color, light1);\n\n        display: flex;\n        flex-direction: column;\n        flex-wrap: wrap;\n        align-items: center;\n        justify-content: center;\n        padding: map.get($cm-space, md);\n        height: 100%;\n\n        &.cm-dark {\n            @include var(background-color, dark1);\n            @include var(border-color, dark2);\n\n            p {\n                @include var(color, light1);\n\n                a {\n                    @include var(color, blue2);\n                }\n            }\n        }\n\n        p {\n            @include var(color, dark1);\n\n            flex-grow: 0;\n            text-align: center;\n            padding-top: 0;\n            margin-top: 0;\n\n            a {\n                @include var(color, green2);\n            }\n        }\n\n        p.cm-buttons {\n            margin-top: map.get($cm-space, md);\n        }\n\n        // contextual consent notice\n        p.ccn-description-empty-store {\n            margin-top: map.get($cm-space, lg);            \n            @include var(font-size, font-size);\n        }\n    }\n\n    .cookie-modal {\n        width: 100%;\n        height: 100%;\n        position: fixed;\n        overflow: hidden;\n        left: 0;\n        top: 0;\n        z-index: 1000;\n\n        &.cm-embedded {\n            position: relative;\n            height: inherit;\n            width: inherit;\n            left: inherit;\n            right: inherit;\n            z-index: 0;\n\n            .cm-modal.cm-klaro {\n                position: relative;\n                transform: none;\n            }\n        }\n\n        .cm-bg {\n            background: rgba(0, 0, 0, 0.5);\n            height: 100%;\n            width: 100%;\n            position: fixed;\n            top: 0;\n            left: 0;\n        }\n\n        .cm-modal {\n            &.cm-klaro {\n                @include modal(660px, 640px);\n            }\n\n            .hide {\n                border-style: none;\n                background: none;\n                cursor: pointer;\n                position: absolute;\n                top: 20px;\n                right: 20px;\n                z-index: 1;\n\n                svg {\n                    @include var(stroke, light1);\n                }\n            }\n\n            .cm-footer {\n                @include var(border-top-color, dark2);\n                @include var(border-top-width, border-width);\n                @include var(border-top-style, border-style);\n\n                padding: 1em;\n\n                &-buttons {\n                    display: flex;\n                    flex-flow: row;\n                    justify-content: space-between;\n                }\n\n                .cm-powered-by {\n                    font-size: 0.8em;\n                    padding-top: 4px;\n                    text-align: right;\n                    padding-right: 8px;\n\n                    a {\n                        @include var(color, dark2);\n                    }\n                }\n            }\n\n            .cm-header {\n                @include var(border-bottom-width, border-width);\n                @include var(border-bottom-style, border-style);\n                @include var(border-bottom-color, dark2);\n\n                padding: 1em;\n                padding-right: 24px;\n\n                h1 {\n                    margin: 0;\n                    font-size: 2em;\n                    display: block;\n\n                    &.title {\n                        padding-right: 20px;\n                    }\n                }\n            }\n\n            .cm-body {\n                padding: 1em;\n\n                ul {\n                    display: block;\n                }\n\n                span {\n                    display: inline-block;\n                    width: auto;\n                }\n\n                ul.cm-services,\n                ul.cm-purposes {\n                    padding: 0;\n                    margin: 0;\n\n                    li.cm-purpose {\n                        .cm-services {\n                            .cm-caret {\n                                @include var(color, light3);\n                            }\n\n                            .cm-content {\n                                margin-left: -40px;\n                                display: none;\n\n                                &.expanded {\n                                    margin-top: 10px;\n                                    display: block;\n                                }\n                            }\n                        }\n                    }\n\n                    li.cm-service,\n                    li.cm-purpose {\n                        position: relative;\n                        line-height: 20px;\n                        vertical-align: middle;\n                        padding-left: 60px;\n                        min-height: 40px;\n\n                        &:first-child {\n                            margin-top: 0;\n                        }\n\n                        p {\n                            margin-top: 0;\n                        }\n\n                        p.purposes {\n                            @include var(color, light3);\n                            font-size: 0.8em;\n                        }\n\n                        &.cm-toggle-all {\n\n                            @include var(border-top-width, border-width);\n                            @include var(border-top-style, border-style);\n                            @include var(border-top-color, dark2);\n\n                            padding-top: 1em;\n                        }\n\n                        span.cm-list-title {\n                            font-weight: 600;\n                        }\n\n                        span.cm-opt-out,\n                        span.cm-required {\n                            @include var(color, dark2);\n                            padding-left: 0.2em;\n                            font-size: 0.8em;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    .cookie-notice:not(.cookie-modal-notice) {\n        @include var(background-color, dark1);\n        z-index: 999;\n\n        position: fixed;\n        width: 100%;\n        bottom: 0;\n        right: 0;\n\n        @media (min-width: $cm-desktop) {\n            @include var(border-radius, border-radius);\n            @include var(position, notice-position);\n            @include var(right, notice-right);\n            @include var(left, notice-left);\n            @include var(bottom, notice-bottom);\n            @include var(top, notice-top);\n            @include var(max-width, notice-max-width);\n            box-shadow: $cm-box-shadow-dark-md;\n        }\n\n        @media (max-width: ($cm-desktop - 1)) {\n            border-style: none;\n            border-radius: 0;\n        }\n\n        &.cn-embedded {\n            position: relative;\n            height: inherit;\n            width: inherit;\n            left: inherit;\n            right: inherit;\n            bottom: inherit;\n            z-index: 0;\n\n            .cn-body {\n                padding-top: 0.5em;\n            }\n        }\n\n        .cn-body {\n            margin-bottom: 0;\n            margin-right: 0;\n            bottom: 0;\n\n            padding: 1em;\n            padding-top: 0;\n\n            p {\n                margin-bottom: 0.5em;\n            }\n\n            p.cn-changes {\n                text-decoration: underline;\n            }\n\n            .cn-learn-more {\n                display: inline-block;\n                flex-grow: 1;\n            }\n\n            .cn-buttons {\n                display: inline-block;\n                margin-top: -0.5em;\n\n                @media (max-width: $cm-mobile) {\n                    width: 100%;\n                }\n\n                button.cm-btn {\n                    margin-top: 0.5em;\n\n                    @media (max-width: $cm-mobile) {\n                        width: calc(50% - #{$btn-margin-right});\n                    }\n                }\n            }\n\n            .cn-ok {\n                // we add a margin that cancels out unless the items are wrapped\n                // in which case it will add some spacing between them\n                margin-top: -0.5em;\n                display: flex;\n                flex-flow: row;\n                flex-wrap: wrap;\n                justify-content: right;\n                align-items: baseline;\n\n                a,\n                div {\n                    margin-top: 0.5em;\n                }\n            }\n        }\n    }\n\n    .cookie-modal-notice {\n        @include modal(400px, 400px);\n\n        padding: 1em;\n        padding-top: 0.2em;\n\n        .cn-ok {\n            display: flex;\n            flex-flow: row;\n            justify-content: space-between;\n            align-items: center;\n\n            margin-top: 1em;\n        }\n    }\n\n    .cookie-notice-hidden {\n        display: none !important;\n    }\n}\n","@use \"sass:map\";\n@use 'sass:color';\n\n/*\nWe declare all variables here as default so that they are easy to override...\n*/\n\n/* Border, shadows, ... */\n$cm-box-shadow-dark-md: 0 4px 6px 0 rgba(0, 0, 0, 0.2), 5px 5px 10px 0 rgba(0, 0, 0, 0.19) !default;\n$cm-box-shadow-light-sm: 0 2px 5px 0 rgba(0, 0, 0, 0.11) !default;\n$cm-box-shadow-dark-sm: 0 2px 5px 0 rgba(0, 0, 0, 0.33) !default;\n\n/*\nVariables that begin with $var- should NEVER be used directly in CSS rules.\nthey should only be included via the \"@include var(property, var-name)\"\nmechanism.\n*/\n\n/* Border styles */\n$var-border-radius: 4px !default;\n$var-border-style: solid !default;\n$var-border-width: 1px !default;\n\n/* Cookie notice positioning */\n$var-notice-right: 20px !default;\n$var-notice-left: auto !default;\n$var-notice-top: auto !default;\n$var-notice-bottom: 20px !default;\n$var-notice-max-width: 400px !default;\n$var-notice-position: fixed !default;\n\n/* Text colors */\n$var-button-text-color: #fff !default;\n\n/* Font Families */\n$var-font-family: inherit !default;\n$var-title-font-family: inherit !default;\n$var-font-size: 14px !default;\n\n/* White */\n$var-white1: #fff !default;\n$var-white2: color.scale($var-white1, $lightness: -5%) !default;\n$var-white3: color.scale($var-white2, $lightness: -5%) !default;\n\n/* Differently shaded colors */\n\n// light gray\n$var-light1: #fafafa !default;\n$var-light2: color.scale($var-light1, $lightness: -20%) !default;\n$var-light3: color.scale($var-light2, $lightness: -20%) !default;\n\n// dark gray\n$var-dark1: #333 !default;\n$var-dark2: color.scale($var-dark1, $lightness: 20%) !default;\n$var-dark3: color.scale($var-dark2, $lightness: 20%) !default;\n\n// blue\n$var-blue1: #2581c4 !default;\n$var-blue2: color.scale($var-blue1, $lightness: 20%) !default;\n$var-blue3: color.scale($var-blue2, $lightness: 20%) !default;\n\n// green\n$var-green1: #1a936f !default;\n$var-green2: color.scale($var-green1, $lightness: 20%) !default;\n$var-green3: color.scale($var-green2, $lightness: 20%) !default;\n\n// red\n$var-red1: #da2c43 !default;\n$var-red2: color.scale($var-red1, $lightness: 20%) !default;\n$var-red3: color.scale($var-red2, $lightness: 20%) !default;\n\n// all these variables can be tweaked at runtime by specifying them via the\n// 'styling' config parameter.\n$vars: (\n    button-text-color: $var-button-text-color,\n\n    font-size: $var-font-size,\n    font-family: $var-font-family,\n    title-font-family: $var-title-font-family,\n\n    green1: $var-green1,\n    green2: $var-green2,\n    green3: $var-green3,\n\n    blue1: $var-blue1,\n    blue2: $var-blue2,\n    blue3: $var-blue3,\n\n    red1: $var-red1,\n    red2: $var-red2,\n    red3: $var-red3,\n\n    light1: $var-light1,\n    light2: $var-light2,\n    light3: $var-light3,\n\n    dark1: $var-dark1,\n    dark2: $var-dark2,\n    dark3: $var-dark3,\n\n    white1: $var-white1,\n    white2: $var-white2,\n    white3: $var-white3,\n\n    // non-color options\n\n    border-radius: $var-border-radius,\n    border-style: $var-border-style,\n    border-width: $var-border-width,\n    notice-left: $var-notice-left,\n    notice-right: $var-notice-right,\n    notice-top: $var-notice-top,\n    notice-bottom: $var-notice-bottom,\n    notice-max-width: $var-notice-max-width,\n    notice-position: $var-notice-position,\n);\n\n/*\nUse @include var(property, varname) to include a variable, e.g.\n\n    @include var(background-color, white1);\n\nto create a white background.\n*/\n@mixin var($property, $varName) {\n    #{$property}: map.get($vars, $varName);\n    #{$property}: var(--#{$varName}, map.get($vars, $varName));\n}\n\n/* Spacing */\n$cm-space: (\n    xs: 4px,\n    sm: 8px,\n    md: 12px,\n    lg: 24px,\n    xl: 48px,\n    xxl: 96px\n) !default;\n\n/* Breakpoints */\n$cm-desktop: 1024px !default;\n$cm-mobile: 384px !default;\n$cm-tablet: 768px !default;\n","/* The switch - the box around the slider */\n\n.cm-switch-container {\n    @include var(border-bottom-style, border-style);\n    @include var(border-bottom-width, border-width);\n    @include var(border-bottom-color, light2);\n\n    display: block;\n    position: relative;\n    padding: 10px;\n    padding-left: 66px;\n    line-height: 20px;\n    vertical-align: middle;\n    min-height: 40px;\n\n    &:last-child {\n        border-bottom: 0;\n    }\n\n    &:first-child {\n        margin-top: 0;\n    }\n\n    p {\n        margin-top: 0;\n    }\n}\n\n.cm-switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 30px;\n}\n\n.cm-list-input:checked + .cm-list-label .slider {\n    @include var(background-color, green1);\n}\n\n.cm-list-input.half-checked:checked + .cm-list-label .slider {\n    @include var(background-color, green1);\n    opacity: 0.6;\n\n    &::before {\n        -webkit-transform: translateX(10px);\n        -ms-transform: translateX(10px);\n        transform: translateX(10px);\n    }\n}\n\n.cm-list-input.only-required + .cm-list-label .slider {\n    @include var(background-color, green2);\n    opacity: 0.8;\n\n    &::before {\n        -webkit-transform: translateX(10px);\n        -ms-transform: translateX(10px);\n        transform: translateX(10px);\n    }\n}\n\n.cm-list-input.required:checked + .cm-list-label .slider {\n    @include var(background-color, green2);\n    opacity: 0.8;\n    cursor: not-allowed;\n}\n\n.slider {\n    box-shadow: $cm-box-shadow-dark-md;\n}\n\n.cm-list-input {\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    width: 50px;\n    height: 30px;\n}\n\n.cm-list-title {\n    font-size: 0.9em;\n    font-weight: 600;\n}\n\n.cm-list-description {\n    @include var(color, dark3);\n    font-size: 0.9em;\n    padding-top: 4px;\n}\n\n.cm-list-label {\n    /* The slider */\n\n    .cm-switch {\n        position: absolute;\n        left: 0;\n    }\n\n    .slider {\n\n        @include var(background-color, white2);\n\n        position: absolute;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n        width: 50px;\n        display: inline-block;\n    }\n\n    .slider::before {\n\n        @include var(background-color, white3);\n\n        position: absolute;\n        content: '';\n        height: 20px;\n        width: 20px;\n        left: 5px;\n        bottom: 5px;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n    }\n\n    /* Rounded sliders */\n    .slider.round {\n        border-radius: 30px;\n    }\n\n    .slider.round::before {\n        border-radius: 50%;\n    }\n\n    input:focus + .slider {\n        @include var(box-shadow-color, green3);\n        box-shadow: 0 0 1px var(--box-shadow-color, green3);\n    }\n\n    input:checked + .slider::before {\n        -webkit-transform: translateX(20px);\n        -ms-transform: translateX(20px);\n        transform: translateX(20px);\n    }\n}\n\n.cm-list-input:focus + .cm-list-label .slider {\n    box-shadow: 0 4px 6px 0 rgba(125, 125, 125, 0.2),\n        5px 5px 10px 0 rgba(125, 125, 125, 0.19);\n}\n\n.cm-list-input:checked + .cm-list-label .slider::before {\n    -webkit-transform: translateX(20px);\n    -ms-transform: translateX(20px);\n    transform: translateX(20px);\n}\n","@mixin modal($centerWidth, $windowWidth) {\n\n    @include var(background-color, dark1);\n    @include var(color, light1);\n\n    z-index: 1001;\n    box-shadow: $cm-box-shadow-dark-md;\n\n    width: 100%;\n    max-height: 98%;\n\n    top: 50%;\n    transform: translateY(-50%);\n\n    position: fixed;\n    overflow: auto;\n\n    @media (min-width: $centerWidth) {\n        @include var(border-radius, border-radius);\n        position: relative;\n        margin: 0 auto;\n        max-width: $windowWidth;\n        height: auto;\n        width: auto;\n    }\n}\n"],sourceRoot:""}]);const c=a},278:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},4942:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},362:(e,t,n)=>{"use strict";var r=n(6441);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},2688:(e,t,n)=>{e.exports=n(362)()},6441:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},5292:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var p=n(d),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var A=o(f,r);r.byIndex=c,t.splice(c,0,{identifier:d,updater:A,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var s=r(e,o),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},9383:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9088:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},6884:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},9893:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},7997:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4452:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=a(e,i(n)))}return e}function i(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=a(t,n));return t}function a(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},8120:(e,t,n)=>{"use strict";var r=n(1483),o=n(8761),i=TypeError;e.exports=function(e){if(r(e))return e;throw new i(o(e)+" is not a function")}},2374:(e,t,n)=>{"use strict";var r=n(943),o=n(8761),i=TypeError;e.exports=function(e){if(r(e))return e;throw new i(o(e)+" is not a constructor")}},3852:(e,t,n)=>{"use strict";var r=n(735),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw new i("Can't set "+o(e)+" as a prototype")}},7095:(e,t,n)=>{"use strict";var r=n(1),o=n(5290),i=n(5835).f,a=r("unscopables"),c=Array.prototype;void 0===c[a]&&i(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},4419:(e,t,n)=>{"use strict";var r=n(9105).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},6021:(e,t,n)=>{"use strict";var r=n(4815),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw new o("Incorrect invocation")}},2293:(e,t,n)=>{"use strict";var r=n(1704),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw new i(o(e)+" is not an object")}},9214:(e,t,n)=>{"use strict";var r=n(8473);e.exports=r((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},4793:(e,t,n)=>{"use strict";var r=n(2867).forEach,o=n(3152)("forEach");e.exports=o?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},6142:(e,t,n)=>{"use strict";var r=n(2914),o=n(1807),i=n(2347),a=n(8901),c=n(5299),s=n(943),l=n(6960),u=n(670),d=n(4887),p=n(6665),f=Array;e.exports=function(e){var t=i(e),n=s(this),A=arguments.length,m=A>1?arguments[1]:void 0,v=void 0!==m;v&&(m=r(m,A>2?arguments[2]:void 0));var h,b,y,g,C,k,w=p(t),x=0;if(!w||this===f&&c(w))for(h=l(t),b=n?new this(h):f(h);h>x;x++)k=v?m(t[x],x):t[x],u(b,x,k);else for(C=(g=d(t,w)).next,b=n?new this:[];!(y=o(C,g)).done;x++)k=v?a(g,m,[y.value,x],!0):y.value,u(b,x,k);return b.length=x,b}},6651:(e,t,n)=>{"use strict";var r=n(5599),o=n(3392),i=n(6960),a=function(e){return function(t,n,a){var c=r(t),s=i(c);if(0===s)return!e&&-1;var l,u=o(a,s);if(e&&n!=n){for(;s>u;)if((l=c[u++])!=l)return!0}else for(;s>u;u++)if((e||u in c)&&c[u]===n)return e||u||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2867:(e,t,n)=>{"use strict";var r=n(2914),o=n(4762),i=n(2121),a=n(2347),c=n(6960),s=n(4551),l=o([].push),u=function(e){var t=1===e,n=2===e,o=3===e,u=4===e,d=6===e,p=7===e,f=5===e||d;return function(A,m,v,h){for(var b,y,g=a(A),C=i(g),k=c(C),w=r(m,v),x=0,_=h||s,E=t?_(A,k):n||p?_(A,0):void 0;k>x;x++)if((f||x in C)&&(y=w(b=C[x],x,g),e))if(t)E[x]=y;else if(y)switch(e){case 3:return!0;case 5:return b;case 6:return x;case 2:l(E,b)}else switch(e){case 4:return!1;case 7:l(E,b)}return d?-1:o||u?u:E}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},4595:(e,t,n)=>{"use strict";var r=n(8473),o=n(1),i=n(6170),a=o("species");e.exports=function(e){return i>=51||!r((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},3152:(e,t,n)=>{"use strict";var r=n(8473);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},1698:(e,t,n)=>{"use strict";var r=n(4762);e.exports=r([].slice)},7354:(e,t,n)=>{"use strict";var r=n(1698),o=Math.floor,i=function(e,t){var n=e.length;if(n<8)for(var a,c,s=1;s<n;){for(c=s,a=e[s];c&&t(e[c-1],a)>0;)e[c]=e[--c];c!==s++&&(e[c]=a)}else for(var l=o(n/2),u=i(r(e,0,l),t),d=i(r(e,l),t),p=u.length,f=d.length,A=0,m=0;A<p||m<f;)e[A+m]=A<p&&m<f?t(u[A],d[m])<=0?u[A++]:d[m++]:A<p?u[A++]:d[m++];return e};e.exports=i},9703:(e,t,n)=>{"use strict";var r=n(4914),o=n(943),i=n(1704),a=n(1)("species"),c=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(o(t)&&(t===c||r(t.prototype))||i(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?c:t}},4551:(e,t,n)=>{"use strict";var r=n(9703);e.exports=function(e,t){return new(r(e))(0===t?0:t)}},8901:(e,t,n)=>{"use strict";var r=n(2293),o=n(6721);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){o(e,"throw",t)}}},1554:(e,t,n)=>{"use strict";var r=n(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){try{if(!t&&!o)return!1}catch(e){return!1}var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},1278:(e,t,n)=>{"use strict";var r=n(4762),o=r({}.toString),i=r("".slice);e.exports=function(e){return i(o(e),8,-1)}},6145:(e,t,n)=>{"use strict";var r=n(4338),o=n(1483),i=n(1278),a=n(1)("toStringTag"),c=Object,s="Arguments"===i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=c(e),a))?n:s?i(t):"Object"===(r=i(t))&&o(t.callee)?"Arguments":r}},4092:(e,t,n)=>{"use strict";var r=n(5290),o=n(3864),i=n(2313),a=n(2914),c=n(6021),s=n(5983),l=n(1506),u=n(5662),d=n(5247),p=n(240),f=n(382),A=n(8041).fastKey,m=n(4483),v=m.set,h=m.getterFor;e.exports={getConstructor:function(e,t,n,u){var d=e((function(e,o){c(e,p),v(e,{type:t,index:r(null),first:void 0,last:void 0,size:0}),f||(e.size=0),s(o)||l(o,e[u],{that:e,AS_ENTRIES:n})})),p=d.prototype,m=h(t),b=function(e,t,n){var r,o,i=m(e),a=y(e,t);return a?a.value=n:(i.last=a={index:o=A(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),f?i.size++:e.size++,"F"!==o&&(i.index[o]=a)),e},y=function(e,t){var n,r=m(e),o=A(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key===t)return n};return i(p,{clear:function(){for(var e=m(this),t=e.first;t;)t.removed=!0,t.previous&&(t.previous=t.previous.next=void 0),t=t.next;e.first=e.last=void 0,e.index=r(null),f?e.size=0:this.size=0},delete:function(e){var t=this,n=m(t),r=y(t,e);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first===r&&(n.first=o),n.last===r&&(n.last=i),f?n.size--:t.size--}return!!r},forEach:function(e){for(var t,n=m(this),r=a(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!y(this,e)}}),i(p,n?{get:function(e){var t=y(this,e);return t&&t.value},set:function(e,t){return b(this,0===e?0:e,t)}}:{add:function(e){return b(this,e=0===e?0:e,e)}}),f&&o(p,"size",{configurable:!0,get:function(){return m(this).size}}),d},setStrong:function(e,t,n){var r=t+" Iterator",o=h(t),i=h(r);u(e,t,(function(e,t){v(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?d("keys"===t?n.key:"values"===t?n.value:[n.key,n.value],!1):(e.target=void 0,d(void 0,!0))}),n?"entries":"values",!n,!0),p(t)}}},7446:(e,t,n)=>{"use strict";var r=n(8612),o=n(8389),i=n(4762),a=n(8730),c=n(7914),s=n(8041),l=n(1506),u=n(6021),d=n(1483),p=n(5983),f=n(1704),A=n(8473),m=n(1554),v=n(2277),h=n(2429);e.exports=function(e,t,n){var b=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),g=b?"set":"add",C=o[e],k=C&&C.prototype,w=C,x={},_=function(e){var t=i(k[e]);c(k,e,"add"===e?function(e){return t(this,0===e?0:e),this}:"delete"===e?function(e){return!(y&&!f(e))&&t(this,0===e?0:e)}:"get"===e?function(e){return y&&!f(e)?void 0:t(this,0===e?0:e)}:"has"===e?function(e){return!(y&&!f(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(a(e,!d(C)||!(y||k.forEach&&!A((function(){(new C).entries().next()})))))w=n.getConstructor(t,e,b,g),s.enable();else if(a(e,!0)){var E=new w,S=E[g](y?{}:-0,1)!==E,j=A((function(){E.has(1)})),O=m((function(e){new C(e)})),B=!y&&A((function(){for(var e=new C,t=5;t--;)e[g](t,t);return!e.has(-0)}));O||((w=t((function(e,t){u(e,k);var n=h(new C,e,w);return p(t)||l(t,n[g],{that:n,AS_ENTRIES:b}),n}))).prototype=k,k.constructor=w),(j||B)&&(_("delete"),_("has"),b&&_("get")),(B||S)&&_(g),y&&k.clear&&delete k.clear}return x[e]=w,r({global:!0,constructor:!0,forced:w!==C},x),v(w,e),y||n.setStrong(w,e,b),w}},6726:(e,t,n)=>{"use strict";var r=n(5755),o=n(9497),i=n(4961),a=n(5835);e.exports=function(e,t,n){for(var c=o(t),s=a.f,l=i.f,u=0;u<c.length;u++){var d=c[u];r(e,d)||n&&r(n,d)||s(e,d,l(t,d))}}},4522:(e,t,n)=>{"use strict";var r=n(1)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},9441:(e,t,n)=>{"use strict";var r=n(8473);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},5247:e=>{"use strict";e.exports=function(e,t){return{value:e,done:t}}},9037:(e,t,n)=>{"use strict";var r=n(382),o=n(5835),i=n(7738);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},7738:e=>{"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},670:(e,t,n)=>{"use strict";var r=n(382),o=n(5835),i=n(7738);e.exports=function(e,t,n){r?o.f(e,t,i(0,n)):e[t]=n}},6446:(e,t,n)=>{"use strict";var r=n(2293),o=n(348),i=TypeError;e.exports=function(e){if(r(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw new i("Incorrect hint");return o(this,e)}},3864:(e,t,n)=>{"use strict";var r=n(169),o=n(5835);e.exports=function(e,t,n){return n.get&&r(n.get,t,{getter:!0}),n.set&&r(n.set,t,{setter:!0}),o.f(e,t,n)}},7914:(e,t,n)=>{"use strict";var r=n(1483),o=n(5835),i=n(169),a=n(2095);e.exports=function(e,t,n,c){c||(c={});var s=c.enumerable,l=void 0!==c.name?c.name:t;if(r(n)&&i(n,l,c),c.global)s?e[t]=n:a(t,n);else{try{c.unsafe?e[t]&&(s=!0):delete e[t]}catch(e){}s?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!c.nonConfigurable,writable:!c.nonWritable})}return e}},2313:(e,t,n)=>{"use strict";var r=n(7914);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},2095:(e,t,n)=>{"use strict";var r=n(8389),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},6060:(e,t,n)=>{"use strict";var r=n(8761),o=TypeError;e.exports=function(e,t){if(!delete e[t])throw new o("Cannot delete property "+r(t)+" of "+r(e))}},382:(e,t,n)=>{"use strict";var r=n(8473);e.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},3145:(e,t,n)=>{"use strict";var r=n(8389),o=n(1704),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},1091:e=>{"use strict";var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},4842:e=>{"use strict";e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},1902:(e,t,n)=>{"use strict";var r=n(3145)("span").classList,o=r&&r.constructor&&r.constructor.prototype;e.exports=o===Object.prototype?void 0:o},7332:(e,t,n)=>{"use strict";var r=n(9966).match(/firefox\/(\d+)/i);e.exports=!!r&&+r[1]},6956:(e,t,n)=>{"use strict";var r=n(938),o=n(4334);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},5413:e=>{"use strict";e.exports="function"==typeof Bun&&Bun&&"string"==typeof Bun.version},938:e=>{"use strict";e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},8996:(e,t,n)=>{"use strict";var r=n(9966);e.exports=/MSIE|Trident/.test(r)},4466:(e,t,n)=>{"use strict";var r=n(9966);e.exports=/ipad|iphone|ipod/i.test(r)&&"undefined"!=typeof Pebble},8417:(e,t,n)=>{"use strict";var r=n(9966);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},4334:(e,t,n)=>{"use strict";var r=n(8389),o=n(1278);e.exports="process"===o(r.process)},6639:(e,t,n)=>{"use strict";var r=n(9966);e.exports=/web0s(?!.*chrome)/i.test(r)},9966:e=>{"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},6170:(e,t,n)=>{"use strict";var r,o,i=n(8389),a=n(9966),c=i.process,s=i.Deno,l=c&&c.versions||s&&s.version,u=l&&l.v8;u&&(o=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},5158:(e,t,n)=>{"use strict";var r=n(9966).match(/AppleWebKit\/(\d+)\./);e.exports=!!r&&+r[1]},4741:e=>{"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},8612:(e,t,n)=>{"use strict";var r=n(8389),o=n(4961).f,i=n(9037),a=n(7914),c=n(2095),s=n(6726),l=n(8730);e.exports=function(e,t){var n,u,d,p,f,A=e.target,m=e.global,v=e.stat;if(n=m?r:v?r[A]||c(A,{}):r[A]&&r[A].prototype)for(u in t){if(p=t[u],d=e.dontCallGetSet?(f=o(n,u))&&f.value:n[u],!l(m?u:A+(v?".":"#")+u,e.forced)&&void 0!==d){if(typeof p==typeof d)continue;s(p,d)}(e.sham||d&&d.sham)&&i(p,"sham",!0),a(n,u,p,e)}}},8473:e=>{"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},3358:(e,t,n)=>{"use strict";n(5021);var r=n(1807),o=n(7914),i=n(8865),a=n(8473),c=n(1),s=n(9037),l=c("species"),u=RegExp.prototype;e.exports=function(e,t,n,d){var p=c(e),f=!a((function(){var t={};return t[p]=function(){return 7},7!==""[e](t)})),A=f&&!a((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[l]=function(){return n},n.flags="",n[p]=/./[p]),n.exec=function(){return t=!0,null},n[p](""),!t}));if(!f||!A||n){var m=/./[p],v=t(p,""[e],(function(e,t,n,o,a){var c=t.exec;return c===i||c===u.exec?f&&!a?{done:!0,value:r(m,t,n,o)}:{done:!0,value:r(e,n,t,o)}:{done:!1}}));o(String.prototype,e,v[0]),o(u,p,v[1])}d&&s(u[p],"sham",!0)}},6530:(e,t,n)=>{"use strict";var r=n(8473);e.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},3067:(e,t,n)=>{"use strict";var r=n(274),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},2914:(e,t,n)=>{"use strict";var r=n(3786),o=n(8120),i=n(274),a=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},274:(e,t,n)=>{"use strict";var r=n(8473);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},2164:(e,t,n)=>{"use strict";var r=n(4762),o=n(8120),i=n(1704),a=n(5755),c=n(1698),s=n(274),l=Function,u=r([].concat),d=r([].join),p={};e.exports=s?l.bind:function(e){var t=o(this),n=t.prototype,r=c(arguments,1),s=function(){var n=u(r,c(arguments));return this instanceof s?function(e,t,n){if(!a(p,t)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";p[t]=l("C,a","return new C("+d(r,",")+")")}return p[t](e,n)}(t,n.length,n):t.apply(e,n)};return i(n)&&(s.prototype=n),s}},1807:(e,t,n)=>{"use strict";var r=n(274),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},2048:(e,t,n)=>{"use strict";var r=n(382),o=n(5755),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,c=o(i,"name"),s=c&&"something"===function(){}.name,l=c&&(!r||r&&a(i,"name").configurable);e.exports={EXISTS:c,PROPER:s,CONFIGURABLE:l}},680:(e,t,n)=>{"use strict";var r=n(4762),o=n(8120);e.exports=function(e,t,n){try{return r(o(Object.getOwnPropertyDescriptor(e,t)[n]))}catch(e){}}},3786:(e,t,n)=>{"use strict";var r=n(1278),o=n(4762);e.exports=function(e){if("Function"===r(e))return o(e)}},4762:(e,t,n)=>{"use strict";var r=n(274),o=Function.prototype,i=o.call,a=r&&o.bind.bind(i,i);e.exports=r?a:function(e){return function(){return i.apply(e,arguments)}}},1409:(e,t,n)=>{"use strict";var r=n(8389),o=n(1483);e.exports=function(e,t){return arguments.length<2?(n=r[e],o(n)?n:void 0):r[e]&&r[e][t];var n}},6665:(e,t,n)=>{"use strict";var r=n(6145),o=n(2564),i=n(5983),a=n(6775),c=n(1)("iterator");e.exports=function(e){if(!i(e))return o(e,c)||o(e,"@@iterator")||a[r(e)]}},4887:(e,t,n)=>{"use strict";var r=n(1807),o=n(8120),i=n(2293),a=n(8761),c=n(6665),s=TypeError;e.exports=function(e,t){var n=arguments.length<2?c(e):t;if(o(n))return i(r(n,e));throw new s(a(e)+" is not iterable")}},5215:(e,t,n)=>{"use strict";var r=n(4762),o=n(4914),i=n(1483),a=n(1278),c=n(6261),s=r([].push);e.exports=function(e){if(i(e))return e;if(o(e)){for(var t=e.length,n=[],r=0;r<t;r++){var l=e[r];"string"==typeof l?s(n,l):"number"!=typeof l&&"Number"!==a(l)&&"String"!==a(l)||s(n,c(l))}var u=n.length,d=!0;return function(e,t){if(d)return d=!1,t;if(o(this))return t;for(var r=0;r<u;r++)if(n[r]===e)return t}}}},2564:(e,t,n)=>{"use strict";var r=n(8120),o=n(5983);e.exports=function(e,t){var n=e[t];return o(n)?void 0:r(n)}},708:(e,t,n)=>{"use strict";var r=n(4762),o=n(2347),i=Math.floor,a=r("".charAt),c=r("".replace),s=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,n,r,d,p){var f=n+e.length,A=r.length,m=u;return void 0!==d&&(d=o(d),m=l),c(p,m,(function(o,c){var l;switch(a(c,0)){case"$":return"$";case"&":return e;case"`":return s(t,0,n);case"'":return s(t,f);case"<":l=d[s(c,1,-1)];break;default:var u=+c;if(0===u)return o;if(u>A){var p=i(u/10);return 0===p?o:p<=A?void 0===r[p-1]?a(c,1):r[p-1]+a(c,1):o}l=r[u-1]}return void 0===l?"":l}))}},8389:function(e,t,n){"use strict";var r=function(e){return e&&e.Math===Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},5755:(e,t,n)=>{"use strict";var r=n(4762),o=n(2347),i=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},1507:e=>{"use strict";e.exports={}},1339:e=>{"use strict";e.exports=function(e,t){try{1===arguments.length?console.error(e):console.error(e,t)}catch(e){}}},2811:(e,t,n)=>{"use strict";var r=n(1409);e.exports=r("document","documentElement")},1799:(e,t,n)=>{"use strict";var r=n(382),o=n(8473),i=n(3145);e.exports=!r&&!o((function(){return 7!==Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},2121:(e,t,n)=>{"use strict";var r=n(4762),o=n(8473),i=n(1278),a=Object,c=r("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"===i(e)?c(e,""):a(e)}:a},2429:(e,t,n)=>{"use strict";var r=n(1483),o=n(1704),i=n(1953);e.exports=function(e,t,n){var a,c;return i&&r(a=t.constructor)&&a!==n&&o(c=a.prototype)&&c!==n.prototype&&i(e,c),e}},7268:(e,t,n)=>{"use strict";var r=n(4762),o=n(1483),i=n(1831),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},8041:(e,t,n)=>{"use strict";var r=n(8612),o=n(4762),i=n(1507),a=n(1704),c=n(5755),s=n(5835).f,l=n(2278),u=n(2020),d=n(706),p=n(1866),f=n(6530),A=!1,m=p("meta"),v=0,h=function(e){s(e,m,{value:{objectID:"O"+v++,weakData:{}}})},b=e.exports={enable:function(){b.enable=function(){},A=!0;var e=l.f,t=o([].splice),n={};n[m]=1,e(n).length&&(l.f=function(n){for(var r=e(n),o=0,i=r.length;o<i;o++)if(r[o]===m){t(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!c(e,m)){if(!d(e))return"F";if(!t)return"E";h(e)}return e[m].objectID},getWeakData:function(e,t){if(!c(e,m)){if(!d(e))return!0;if(!t)return!1;h(e)}return e[m].weakData},onFreeze:function(e){return f&&A&&d(e)&&!c(e,m)&&h(e),e}};i[m]=!0},4483:(e,t,n)=>{"use strict";var r,o,i,a=n(4644),c=n(8389),s=n(1704),l=n(9037),u=n(5755),d=n(1831),p=n(5409),f=n(1507),A="Object already initialized",m=c.TypeError,v=c.WeakMap;if(a||d.state){var h=d.state||(d.state=new v);h.get=h.get,h.has=h.has,h.set=h.set,r=function(e,t){if(h.has(e))throw new m(A);return t.facade=e,h.set(e,t),t},o=function(e){return h.get(e)||{}},i=function(e){return h.has(e)}}else{var b=p("state");f[b]=!0,r=function(e,t){if(u(e,b))throw new m(A);return t.facade=e,l(e,b,t),t},o=function(e){return u(e,b)?e[b]:{}},i=function(e){return u(e,b)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!s(t)||(n=o(t)).type!==e)throw new m("Incompatible receiver, "+e+" required");return n}}}},5299:(e,t,n)=>{"use strict";var r=n(1),o=n(6775),i=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},4914:(e,t,n)=>{"use strict";var r=n(1278);e.exports=Array.isArray||function(e){return"Array"===r(e)}},1483:e=>{"use strict";var t="object"==typeof document&&document.all;e.exports=void 0===t&&void 0!==t?function(e){return"function"==typeof e||e===t}:function(e){return"function"==typeof e}},943:(e,t,n)=>{"use strict";var r=n(4762),o=n(8473),i=n(1483),a=n(6145),c=n(1409),s=n(7268),l=function(){},u=c("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=r(d.exec),f=!d.test(l),A=function(e){if(!i(e))return!1;try{return u(l,[],e),!0}catch(e){return!1}},m=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return f||!!p(d,s(e))}catch(e){return!0}};m.sham=!0,e.exports=!u||o((function(){var e;return A(A.call)||!A(Object)||!A((function(){e=!0}))||e}))?m:A},8730:(e,t,n)=>{"use strict";var r=n(8473),o=n(1483),i=/#|\.prototype\./,a=function(e,t){var n=s[c(e)];return n===u||n!==l&&(o(t)?r(t):!!t)},c=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},s=a.data={},l=a.NATIVE="N",u=a.POLYFILL="P";e.exports=a},5983:e=>{"use strict";e.exports=function(e){return null==e}},1704:(e,t,n)=>{"use strict";var r=n(1483);e.exports=function(e){return"object"==typeof e?null!==e:r(e)}},735:(e,t,n)=>{"use strict";var r=n(1704);e.exports=function(e){return r(e)||null===e}},9557:e=>{"use strict";e.exports=!1},4786:(e,t,n)=>{"use strict";var r=n(1704),o=n(1278),i=n(1)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"===o(e))}},1423:(e,t,n)=>{"use strict";var r=n(1409),o=n(1483),i=n(4815),a=n(5022),c=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&i(t.prototype,c(e))}},1506:(e,t,n)=>{"use strict";var r=n(2914),o=n(1807),i=n(2293),a=n(8761),c=n(5299),s=n(6960),l=n(4815),u=n(4887),d=n(6665),p=n(6721),f=TypeError,A=function(e,t){this.stopped=e,this.result=t},m=A.prototype;e.exports=function(e,t,n){var v,h,b,y,g,C,k,w=n&&n.that,x=!(!n||!n.AS_ENTRIES),_=!(!n||!n.IS_RECORD),E=!(!n||!n.IS_ITERATOR),S=!(!n||!n.INTERRUPTED),j=r(t,w),O=function(e){return v&&p(v,"normal",e),new A(!0,e)},B=function(e){return x?(i(e),S?j(e[0],e[1],O):j(e[0],e[1])):S?j(e,O):j(e)};if(_)v=e.iterator;else if(E)v=e;else{if(!(h=d(e)))throw new f(a(e)+" is not iterable");if(c(h)){for(b=0,y=s(e);y>b;b++)if((g=B(e[b]))&&l(m,g))return g;return new A(!1)}v=u(e,h)}for(C=_?e.next:v.next;!(k=o(C,v)).done;){try{g=B(k.value)}catch(e){p(v,"throw",e)}if("object"==typeof g&&g&&l(m,g))return g}return new A(!1)}},6721:(e,t,n)=>{"use strict";var r=n(1807),o=n(2293),i=n(2564);e.exports=function(e,t,n){var a,c;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw n;return n}a=r(a,e)}catch(e){c=!0,a=e}if("throw"===t)throw n;if(c)throw a;return o(a),n}},1040:(e,t,n)=>{"use strict";var r=n(1851).IteratorPrototype,o=n(5290),i=n(7738),a=n(2277),c=n(6775),s=function(){return this};e.exports=function(e,t,n,l){var u=t+" Iterator";return e.prototype=o(r,{next:i(+!l,n)}),a(e,u,!1,!0),c[u]=s,e}},5662:(e,t,n)=>{"use strict";var r=n(8612),o=n(1807),i=n(9557),a=n(2048),c=n(1483),s=n(1040),l=n(3181),u=n(1953),d=n(2277),p=n(9037),f=n(7914),A=n(1),m=n(6775),v=n(1851),h=a.PROPER,b=a.CONFIGURABLE,y=v.IteratorPrototype,g=v.BUGGY_SAFARI_ITERATORS,C=A("iterator"),k="keys",w="values",x="entries",_=function(){return this};e.exports=function(e,t,n,a,A,v,E){s(n,t,a);var S,j,O,B=function(e){if(e===A&&N)return N;if(!g&&e&&e in z)return z[e];switch(e){case k:case w:case x:return function(){return new n(this,e)}}return function(){return new n(this)}},I=t+" Iterator",P=!1,z=e.prototype,D=z[C]||z["@@iterator"]||A&&z[A],N=!g&&D||B(A),R="Array"===t&&z.entries||D;if(R&&(S=l(R.call(new e)))!==Object.prototype&&S.next&&(i||l(S)===y||(u?u(S,y):c(S[C])||f(S,C,_)),d(S,I,!0,!0),i&&(m[I]=_)),h&&A===w&&D&&D.name!==w&&(!i&&b?p(z,"name",w):(P=!0,N=function(){return o(D,this)})),A)if(j={values:B(w),keys:v?N:B(k),entries:B(x)},E)for(O in j)(g||P||!(O in z))&&f(z,O,j[O]);else r({target:t,proto:!0,forced:g||P},j);return i&&!E||z[C]===N||f(z,C,N,{name:A}),m[t]=N,j}},1851:(e,t,n)=>{"use strict";var r,o,i,a=n(8473),c=n(1483),s=n(1704),l=n(5290),u=n(3181),d=n(7914),p=n(1),f=n(9557),A=p("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(r=o):m=!0),!s(r)||a((function(){var e={};return r[A].call(e)!==e}))?r={}:f&&(r=l(r)),c(r[A])||d(r,A,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},6775:e=>{"use strict";e.exports={}},6960:(e,t,n)=>{"use strict";var r=n(8324);e.exports=function(e){return r(e.length)}},169:(e,t,n)=>{"use strict";var r=n(4762),o=n(8473),i=n(1483),a=n(5755),c=n(382),s=n(2048).CONFIGURABLE,l=n(7268),u=n(4483),d=u.enforce,p=u.get,f=String,A=Object.defineProperty,m=r("".slice),v=r("".replace),h=r([].join),b=c&&!o((function(){return 8!==A((function(){}),"length",{value:8}).length})),y=String(String).split("String"),g=e.exports=function(e,t,n){"Symbol("===m(f(t),0,7)&&(t="["+v(f(t),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||s&&e.name!==t)&&(c?A(e,"name",{value:t,configurable:!0}):e.name=t),b&&n&&a(n,"arity")&&e.length!==n.arity&&A(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?c&&A(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=d(e);return a(r,"source")||(r.source=h(y,"string"==typeof t?t:"")),e};Function.prototype.toString=g((function(){return i(this)&&p(this).source||l(this)}),"toString")},1703:e=>{"use strict";var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},553:(e,t,n)=>{"use strict";var r,o,i,a,c,s=n(8389),l=n(8123),u=n(2914),d=n(7007).set,p=n(5459),f=n(8417),A=n(4466),m=n(6639),v=n(4334),h=s.MutationObserver||s.WebKitMutationObserver,b=s.document,y=s.process,g=s.Promise,C=l("queueMicrotask");if(!C){var k=new p,w=function(){var e,t;for(v&&(e=y.domain)&&e.exit();t=k.get();)try{t()}catch(e){throw k.head&&r(),e}e&&e.enter()};f||v||m||!h||!b?!A&&g&&g.resolve?((a=g.resolve(void 0)).constructor=g,c=u(a.then,a),r=function(){c(w)}):v?r=function(){y.nextTick(w)}:(d=u(d,s),r=function(){d(w)}):(o=!0,i=b.createTextNode(""),new h(w).observe(i,{characterData:!0}),r=function(){i.data=o=!o}),C=function(e){k.head||r(),k.add(e)}}e.exports=C},1173:(e,t,n)=>{"use strict";var r=n(8120),o=TypeError,i=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw new o("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new i(e)}},4989:(e,t,n)=>{"use strict";var r=n(4786),o=TypeError;e.exports=function(e){if(r(e))throw new o("The method doesn't accept regular expressions");return e}},1439:(e,t,n)=>{"use strict";var r=n(382),o=n(4762),i=n(1807),a=n(8473),c=n(3658),s=n(4347),l=n(7611),u=n(2347),d=n(2121),p=Object.assign,f=Object.defineProperty,A=o([].concat);e.exports=!p||a((function(){if(r&&1!==p({b:1},p(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol("assign detection"),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!==p({},e)[n]||c(p({},t)).join("")!==o}))?function(e,t){for(var n=u(e),o=arguments.length,a=1,p=s.f,f=l.f;o>a;)for(var m,v=d(arguments[a++]),h=p?A(c(v),p(v)):c(v),b=h.length,y=0;b>y;)m=h[y++],r&&!i(f,v,m)||(n[m]=v[m]);return n}:p},5290:(e,t,n)=>{"use strict";var r,o=n(2293),i=n(5799),a=n(4741),c=n(1507),s=n(2811),l=n(3145),u=n(5409),d="prototype",p="script",f=u("IE_PROTO"),A=function(){},m=function(e){return"<"+p+">"+e+"</"+p+">"},v=function(e){e.write(m("")),e.close();var t=e.parentWindow.Object;return e=null,t},h=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,t,n;h="undefined"!=typeof document?document.domain&&r?v(r):(t=l("iframe"),n="java"+p+":",t.style.display="none",s.appendChild(t),t.src=String(n),(e=t.contentWindow.document).open(),e.write(m("document.F=Object")),e.close(),e.F):v(r);for(var o=a.length;o--;)delete h[d][a[o]];return h()};c[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(A[d]=o(e),n=new A,A[d]=null,n[f]=e):n=h(),void 0===t?n:i.f(n,t)}},5799:(e,t,n)=>{"use strict";var r=n(382),o=n(3896),i=n(5835),a=n(2293),c=n(5599),s=n(3658);t.f=r&&!o?Object.defineProperties:function(e,t){a(e);for(var n,r=c(t),o=s(t),l=o.length,u=0;l>u;)i.f(e,n=o[u++],r[n]);return e}},5835:(e,t,n)=>{"use strict";var r=n(382),o=n(1799),i=n(3896),a=n(2293),c=n(3815),s=TypeError,l=Object.defineProperty,u=Object.getOwnPropertyDescriptor,d="enumerable",p="configurable",f="writable";t.f=r?i?function(e,t,n){if(a(e),t=c(t),a(n),"function"==typeof e&&"prototype"===t&&"value"in n&&f in n&&!n[f]){var r=u(e,t);r&&r[f]&&(e[t]=n.value,n={configurable:p in n?n[p]:r[p],enumerable:d in n?n[d]:r[d],writable:!1})}return l(e,t,n)}:l:function(e,t,n){if(a(e),t=c(t),a(n),o)try{return l(e,t,n)}catch(e){}if("get"in n||"set"in n)throw new s("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},4961:(e,t,n)=>{"use strict";var r=n(382),o=n(1807),i=n(7611),a=n(7738),c=n(5599),s=n(3815),l=n(5755),u=n(1799),d=Object.getOwnPropertyDescriptor;t.f=r?d:function(e,t){if(e=c(e),t=s(t),u)try{return d(e,t)}catch(e){}if(l(e,t))return a(!o(i.f,e,t),e[t])}},2020:(e,t,n)=>{"use strict";var r=n(1278),o=n(5599),i=n(2278).f,a=n(1698),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return c&&"Window"===r(e)?function(e){try{return i(e)}catch(e){return a(c)}}(e):i(o(e))}},2278:(e,t,n)=>{"use strict";var r=n(6742),o=n(4741).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},4347:(e,t)=>{"use strict";t.f=Object.getOwnPropertySymbols},3181:(e,t,n)=>{"use strict";var r=n(5755),o=n(1483),i=n(2347),a=n(5409),c=n(9441),s=a("IE_PROTO"),l=Object,u=l.prototype;e.exports=c?l.getPrototypeOf:function(e){var t=i(e);if(r(t,s))return t[s];var n=t.constructor;return o(n)&&t instanceof n?n.prototype:t instanceof l?u:null}},706:(e,t,n)=>{"use strict";var r=n(8473),o=n(1704),i=n(1278),a=n(9214),c=Object.isExtensible,s=r((function(){c(1)}));e.exports=s||a?function(e){return!!o(e)&&(!a||"ArrayBuffer"!==i(e))&&(!c||c(e))}:c},4815:(e,t,n)=>{"use strict";var r=n(4762);e.exports=r({}.isPrototypeOf)},6742:(e,t,n)=>{"use strict";var r=n(4762),o=n(5755),i=n(5599),a=n(6651).indexOf,c=n(1507),s=r([].push);e.exports=function(e,t){var n,r=i(e),l=0,u=[];for(n in r)!o(c,n)&&o(r,n)&&s(u,n);for(;t.length>l;)o(r,n=t[l++])&&(~a(u,n)||s(u,n));return u}},3658:(e,t,n)=>{"use strict";var r=n(6742),o=n(4741);e.exports=Object.keys||function(e){return r(e,o)}},7611:(e,t)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},1953:(e,t,n)=>{"use strict";var r=n(680),o=n(2293),i=n(3852);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.prototype,"__proto__","set"))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),i(r),t?e(n,r):n.__proto__=r,n}}():void 0)},5627:(e,t,n)=>{"use strict";var r=n(382),o=n(8473),i=n(4762),a=n(3181),c=n(3658),s=n(5599),l=i(n(7611).f),u=i([].push),d=r&&o((function(){var e=Object.create(null);return e[2]=2,!l(e,2)})),p=function(e){return function(t){for(var n,o=s(t),i=c(o),p=d&&null===a(o),f=i.length,A=0,m=[];f>A;)n=i[A++],r&&!(p?n in o:l(o,n))||u(m,e?[n,o[n]]:o[n]);return m}};e.exports={entries:p(!0),values:p(!1)}},5685:(e,t,n)=>{"use strict";var r=n(4338),o=n(6145);e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},348:(e,t,n)=>{"use strict";var r=n(1807),o=n(1483),i=n(1704),a=TypeError;e.exports=function(e,t){var n,c;if("string"===t&&o(n=e.toString)&&!i(c=r(n,e)))return c;if(o(n=e.valueOf)&&!i(c=r(n,e)))return c;if("string"!==t&&o(n=e.toString)&&!i(c=r(n,e)))return c;throw new a("Can't convert object to primitive value")}},9497:(e,t,n)=>{"use strict";var r=n(1409),o=n(4762),i=n(2278),a=n(4347),c=n(2293),s=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(c(e)),n=a.f;return n?s(t,n(e)):t}},6589:(e,t,n)=>{"use strict";var r=n(8389);e.exports=r},4193:e=>{"use strict";e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},5502:(e,t,n)=>{"use strict";var r=n(8389),o=n(2832),i=n(1483),a=n(8730),c=n(7268),s=n(1),l=n(6956),u=n(938),d=n(9557),p=n(6170),f=o&&o.prototype,A=s("species"),m=!1,v=i(r.PromiseRejectionEvent),h=a("Promise",(function(){var e=c(o),t=e!==String(o);if(!t&&66===p)return!0;if(d&&(!f.catch||!f.finally))return!0;if(!p||p<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[A]=r,!(m=n.then((function(){}))instanceof r))return!0}return!t&&(l||u)&&!v}));e.exports={CONSTRUCTOR:h,REJECTION_EVENT:v,SUBCLASSING:m}},2832:(e,t,n)=>{"use strict";var r=n(8389);e.exports=r.Promise},2172:(e,t,n)=>{"use strict";var r=n(2293),o=n(1704),i=n(1173);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},1407:(e,t,n)=>{"use strict";var r=n(2832),o=n(1554),i=n(5502).CONSTRUCTOR;e.exports=i||!o((function(e){r.all(e).then(void 0,(function(){}))}))},7150:(e,t,n)=>{"use strict";var r=n(5835).f;e.exports=function(e,t,n){n in e||r(e,n,{configurable:!0,get:function(){return t[n]},set:function(e){t[n]=e}})}},5459:e=>{"use strict";var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null},n=this.tail;n?n.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=t},2428:(e,t,n)=>{"use strict";var r=n(1807),o=n(2293),i=n(1483),a=n(1278),c=n(8865),s=TypeError;e.exports=function(e,t){var n=e.exec;if(i(n)){var l=r(n,e,t);return null!==l&&o(l),l}if("RegExp"===a(e))return r(c,e,t);throw new s("RegExp#exec called on incompatible receiver")}},8865:(e,t,n)=>{"use strict";var r,o,i=n(1807),a=n(4762),c=n(6261),s=n(6653),l=n(7435),u=n(7255),d=n(5290),p=n(4483).get,f=n(3933),A=n(4528),m=u("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,h=v,b=a("".charAt),y=a("".indexOf),g=a("".replace),C=a("".slice),k=(o=/b*/g,i(v,r=/a/,"a"),i(v,o,"a"),0!==r.lastIndex||0!==o.lastIndex),w=l.BROKEN_CARET,x=void 0!==/()??/.exec("")[1];(k||x||w||f||A)&&(h=function(e){var t,n,r,o,a,l,u,f=this,A=p(f),_=c(e),E=A.raw;if(E)return E.lastIndex=f.lastIndex,t=i(h,E,_),f.lastIndex=E.lastIndex,t;var S=A.groups,j=w&&f.sticky,O=i(s,f),B=f.source,I=0,P=_;if(j&&(O=g(O,"y",""),-1===y(O,"g")&&(O+="g"),P=C(_,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b(_,f.lastIndex-1))&&(B="(?: "+B+")",P=" "+P,I++),n=new RegExp("^(?:"+B+")",O)),x&&(n=new RegExp("^"+B+"$(?!\\s)",O)),k&&(r=f.lastIndex),o=i(v,j?n:f,P),j?o?(o.input=C(o.input,I),o[0]=C(o[0],I),o.index=f.lastIndex,f.lastIndex+=o[0].length):f.lastIndex=0:k&&o&&(f.lastIndex=f.global?o.index+o[0].length:r),x&&o&&o.length>1&&i(m,o[0],n,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&S)for(o.groups=l=d(null),a=0;a<S.length;a++)l[(u=S[a])[0]]=o[u[1]];return o}),e.exports=h},6653:(e,t,n)=>{"use strict";var r=n(2293);e.exports=function(){var e=r(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},9736:(e,t,n)=>{"use strict";var r=n(1807),o=n(5755),i=n(4815),a=n(6653),c=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in c||o(e,"flags")||!i(c,e)?t:r(a,e)}},7435:(e,t,n)=>{"use strict";var r=n(8473),o=n(8389).RegExp,i=r((function(){var e=o("a","y");return e.lastIndex=2,null!==e.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),c=i||r((function(){var e=o("^r","gy");return e.lastIndex=2,null!==e.exec("str")}));e.exports={BROKEN_CARET:c,MISSED_STICKY:a,UNSUPPORTED_Y:i}},3933:(e,t,n)=>{"use strict";var r=n(8473),o=n(8389).RegExp;e.exports=r((function(){var e=o(".","s");return!(e.dotAll&&e.test("\n")&&"s"===e.flags)}))},4528:(e,t,n)=>{"use strict";var r=n(8473),o=n(8389).RegExp;e.exports=r((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},3312:(e,t,n)=>{"use strict";var r=n(5983),o=TypeError;e.exports=function(e){if(r(e))throw new o("Can't call method on "+e);return e}},8123:(e,t,n)=>{"use strict";var r=n(8389),o=n(382),i=Object.getOwnPropertyDescriptor;e.exports=function(e){if(!o)return r[e];var t=i(r,e);return t&&t.value}},5420:e=>{"use strict";e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},9570:(e,t,n)=>{"use strict";var r,o=n(8389),i=n(3067),a=n(1483),c=n(5413),s=n(9966),l=n(1698),u=n(4066),d=o.Function,p=/MSIE .\./.test(s)||c&&((r=o.Bun.version.split(".")).length<3||"0"===r[0]&&(r[1]<3||"3"===r[1]&&"0"===r[2]));e.exports=function(e,t){var n=t?2:1;return p?function(r,o){var c=u(arguments.length,1)>n,s=a(r)?r:d(r),p=c?l(arguments,n):[],f=c?function(){i(s,this,p)}:s;return t?e(f,o):e(f)}:e}},240:(e,t,n)=>{"use strict";var r=n(1409),o=n(3864),i=n(1),a=n(382),c=i("species");e.exports=function(e){var t=r(e);a&&t&&!t[c]&&o(t,c,{configurable:!0,get:function(){return this}})}},2277:(e,t,n)=>{"use strict";var r=n(5835).f,o=n(5755),i=n(1)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,i)&&r(e,i,{configurable:!0,value:t})}},5409:(e,t,n)=>{"use strict";var r=n(7255),o=n(1866),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},1831:(e,t,n)=>{"use strict";var r=n(9557),o=n(8389),i=n(2095),a="__core-js_shared__",c=e.exports=o[a]||i(a,{});(c.versions||(c.versions=[])).push({version:"3.36.0",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.0/LICENSE",source:"https://github.com/zloirock/core-js"})},7255:(e,t,n)=>{"use strict";var r=n(1831);e.exports=function(e,t){return r[e]||(r[e]=t||{})}},483:(e,t,n)=>{"use strict";var r=n(2293),o=n(2374),i=n(5983),a=n(1)("species");e.exports=function(e,t){var n,c=r(e).constructor;return void 0===c||i(n=r(c)[a])?t:o(n)}},9105:(e,t,n)=>{"use strict";var r=n(4762),o=n(3005),i=n(6261),a=n(3312),c=r("".charAt),s=r("".charCodeAt),l=r("".slice),u=function(e){return function(t,n){var r,u,d=i(a(t)),p=o(n),f=d.length;return p<0||p>=f?e?"":void 0:(r=s(d,p))<55296||r>56319||p+1===f||(u=s(d,p+1))<56320||u>57343?e?c(d,p):r:e?l(d,p,p+2):u-56320+(r-55296<<10)+65536}};e.exports={codeAt:u(!1),charAt:u(!0)}},4939:(e,t,n)=>{"use strict";var r=n(4762),o=2147483647,i=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,c="Overflow: input needs wider integers to process",s=RangeError,l=r(a.exec),u=Math.floor,d=String.fromCharCode,p=r("".charCodeAt),f=r([].join),A=r([].push),m=r("".replace),v=r("".split),h=r("".toLowerCase),b=function(e){return e+22+75*(e<26)},y=function(e,t,n){var r=0;for(e=n?u(e/700):e>>1,e+=u(e/t);e>455;)e=u(e/35),r+=36;return u(r+36*e/(e+38))},g=function(e){var t=[];e=function(e){for(var t=[],n=0,r=e.length;n<r;){var o=p(e,n++);if(o>=55296&&o<=56319&&n<r){var i=p(e,n++);56320==(64512&i)?A(t,((1023&o)<<10)+(1023&i)+65536):(A(t,o),n--)}else A(t,o)}return t}(e);var n,r,i=e.length,a=128,l=0,m=72;for(n=0;n<e.length;n++)(r=e[n])<128&&A(t,d(r));var v=t.length,h=v;for(v&&A(t,"-");h<i;){var g=o;for(n=0;n<e.length;n++)(r=e[n])>=a&&r<g&&(g=r);var C=h+1;if(g-a>u((o-l)/C))throw new s(c);for(l+=(g-a)*C,a=g,n=0;n<e.length;n++){if((r=e[n])<a&&++l>o)throw new s(c);if(r===a){for(var k=l,w=36;;){var x=w<=m?1:w>=m+26?26:w-m;if(k<x)break;var _=k-x,E=36-x;A(t,d(b(x+_%E))),k=u(_/E),w+=36}A(t,d(b(k))),m=y(l,C,h===v),l=0,h++}}l++,a++}return f(t,"")};e.exports=function(e){var t,n,r=[],o=v(m(h(e),a,"."),".");for(t=0;t<o.length;t++)n=o[t],A(r,l(i,n)?"xn--"+g(n):n);return f(r,".")}},4544:(e,t,n)=>{"use strict";var r=n(4762),o=n(3312),i=n(6261),a=n(5870),c=r("".replace),s=RegExp("^["+a+"]+"),l=RegExp("(^|[^"+a+"])["+a+"]+$"),u=function(e){return function(t){var n=i(o(t));return 1&e&&(n=c(n,s,"")),2&e&&(n=c(n,l,"$1")),n}};e.exports={start:u(1),end:u(2),trim:u(3)}},6029:(e,t,n)=>{"use strict";var r=n(6170),o=n(8473),i=n(8389).String;e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol("symbol detection");return!i(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},8192:(e,t,n)=>{"use strict";var r=n(1807),o=n(1409),i=n(1),a=n(7914);e.exports=function(){var e=o("Symbol"),t=e&&e.prototype,n=t&&t.valueOf,c=i("toPrimitive");t&&!t[c]&&a(t,c,(function(e){return r(n,this)}),{arity:1})}},3218:(e,t,n)=>{"use strict";var r=n(6029);e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},7007:(e,t,n)=>{"use strict";var r,o,i,a,c=n(8389),s=n(3067),l=n(2914),u=n(1483),d=n(5755),p=n(8473),f=n(2811),A=n(1698),m=n(3145),v=n(4066),h=n(8417),b=n(4334),y=c.setImmediate,g=c.clearImmediate,C=c.process,k=c.Dispatch,w=c.Function,x=c.MessageChannel,_=c.String,E=0,S={},j="onreadystatechange";p((function(){r=c.location}));var O=function(e){if(d(S,e)){var t=S[e];delete S[e],t()}},B=function(e){return function(){O(e)}},I=function(e){O(e.data)},P=function(e){c.postMessage(_(e),r.protocol+"//"+r.host)};y&&g||(y=function(e){v(arguments.length,1);var t=u(e)?e:w(e),n=A(arguments,1);return S[++E]=function(){s(t,void 0,n)},o(E),E},g=function(e){delete S[e]},b?o=function(e){C.nextTick(B(e))}:k&&k.now?o=function(e){k.now(B(e))}:x&&!h?(a=(i=new x).port2,i.port1.onmessage=I,o=l(a.postMessage,a)):c.addEventListener&&u(c.postMessage)&&!c.importScripts&&r&&"file:"!==r.protocol&&!p(P)?(o=P,c.addEventListener("message",I,!1)):o=j in m("script")?function(e){f.appendChild(m("script"))[j]=function(){f.removeChild(this),O(e)}}:function(e){setTimeout(B(e),0)}),e.exports={set:y,clear:g}},2430:(e,t,n)=>{"use strict";var r=n(4762);e.exports=r(1..valueOf)},3392:(e,t,n)=>{"use strict";var r=n(3005),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},5599:(e,t,n)=>{"use strict";var r=n(2121),o=n(3312);e.exports=function(e){return r(o(e))}},3005:(e,t,n)=>{"use strict";var r=n(1703);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},8324:(e,t,n)=>{"use strict";var r=n(3005),o=Math.min;e.exports=function(e){var t=r(e);return t>0?o(t,9007199254740991):0}},2347:(e,t,n)=>{"use strict";var r=n(3312),o=Object;e.exports=function(e){return o(r(e))}},2355:(e,t,n)=>{"use strict";var r=n(1807),o=n(1704),i=n(1423),a=n(2564),c=n(348),s=n(1),l=TypeError,u=s("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var n,s=a(e,u);if(s){if(void 0===t&&(t="default"),n=r(s,e,t),!o(n)||i(n))return n;throw new l("Can't convert object to primitive value")}return void 0===t&&(t="number"),c(e,t)}},3815:(e,t,n)=>{"use strict";var r=n(2355),o=n(1423);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},4338:(e,t,n)=>{"use strict";var r={};r[n(1)("toStringTag")]="z",e.exports="[object z]"===String(r)},6261:(e,t,n)=>{"use strict";var r=n(6145),o=String;e.exports=function(e){if("Symbol"===r(e))throw new TypeError("Cannot convert a Symbol value to a string");return o(e)}},8761:e=>{"use strict";var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},1866:(e,t,n)=>{"use strict";var r=n(4762),o=0,i=Math.random(),a=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},4250:(e,t,n)=>{"use strict";var r=n(8473),o=n(1),i=n(382),a=n(9557),c=o("iterator");e.exports=!r((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,n=new URLSearchParams("a=1&a=2&b=3"),r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),n.delete("a",2),n.delete("b",void 0),a&&(!e.toJSON||!n.has("a",1)||n.has("a",2)||!n.has("a",void 0)||n.has("b"))||!t.size&&(a||!i)||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[c]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},5022:(e,t,n)=>{"use strict";var r=n(6029);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3896:(e,t,n)=>{"use strict";var r=n(382),o=n(8473);e.exports=r&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4066:e=>{"use strict";var t=TypeError;e.exports=function(e,n){if(e<n)throw new t("Not enough arguments");return e}},4644:(e,t,n)=>{"use strict";var r=n(8389),o=n(1483),i=r.WeakMap;e.exports=o(i)&&/native code/.test(String(i))},7849:(e,t,n)=>{"use strict";var r=n(6589),o=n(5755),i=n(5373),a=n(5835).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},5373:(e,t,n)=>{"use strict";var r=n(1);t.f=r},1:(e,t,n)=>{"use strict";var r=n(8389),o=n(7255),i=n(5755),a=n(1866),c=n(6029),s=n(5022),l=r.Symbol,u=o("wks"),d=s?l.for||l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(u[e]=c&&i(l,e)?l[e]:d("Symbol."+e)),u[e]}},5870:e=>{"use strict";e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},4776:(e,t,n)=>{"use strict";var r=n(8612),o=n(8473),i=n(4914),a=n(1704),c=n(2347),s=n(6960),l=n(1091),u=n(670),d=n(4551),p=n(4595),f=n(1),A=n(6170),m=f("isConcatSpreadable"),v=A>=51||!o((function(){var e=[];return e[m]=!1,e.concat()[0]!==e})),h=function(e){if(!a(e))return!1;var t=e[m];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,arity:1,forced:!v||!p("concat")},{concat:function(e){var t,n,r,o,i,a=c(this),p=d(a,0),f=0;for(t=-1,r=arguments.length;t<r;t++)if(h(i=-1===t?a:arguments[t]))for(o=s(i),l(f+o),n=0;n<o;n++,f++)n in i&&u(p,f,i[n]);else l(f+1),u(p,f++,i);return p.length=f,p}})},4382:(e,t,n)=>{"use strict";var r=n(8612),o=n(2867).filter;r({target:"Array",proto:!0,forced:!n(4595)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},2084:(e,t,n)=>{"use strict";var r=n(8612),o=n(2867).find,i=n(7095),a="find",c=!0;a in[]&&Array(1)[a]((function(){c=!1})),r({target:"Array",proto:!0,forced:c},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},9892:(e,t,n)=>{"use strict";var r=n(8612),o=n(6142);r({target:"Array",stat:!0,forced:!n(1554)((function(e){Array.from(e)}))},{from:o})},6281:(e,t,n)=>{"use strict";var r=n(8612),o=n(6651).includes,i=n(8473),a=n(7095);r({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},4962:(e,t,n)=>{"use strict";var r=n(5599),o=n(7095),i=n(6775),a=n(4483),c=n(5835).f,s=n(5662),l=n(5247),u=n(9557),d=n(382),p="Array Iterator",f=a.set,A=a.getterFor(p);e.exports=s(Array,"Array",(function(e,t){f(this,{type:p,target:r(e),index:0,kind:t})}),(function(){var e=A(this),t=e.target,n=e.index++;if(!t||n>=t.length)return e.target=void 0,l(void 0,!0);switch(e.kind){case"keys":return l(n,!1);case"values":return l(t[n],!1)}return l([n,t[n]],!1)}),"values");var m=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!u&&d&&"values"!==m.name)try{c(m,"name",{value:"values"})}catch(e){}},6216:(e,t,n)=>{"use strict";var r=n(8612),o=n(4762),i=n(2121),a=n(5599),c=n(3152),s=o([].join);r({target:"Array",proto:!0,forced:i!==Object||!c("join",",")},{join:function(e){return s(a(this),void 0===e?",":e)}})},6584:(e,t,n)=>{"use strict";var r=n(8612),o=n(2867).map;r({target:"Array",proto:!0,forced:!n(4595)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},9336:(e,t,n)=>{"use strict";var r=n(8612),o=n(4914),i=n(943),a=n(1704),c=n(3392),s=n(6960),l=n(5599),u=n(670),d=n(1),p=n(4595),f=n(1698),A=p("slice"),m=d("species"),v=Array,h=Math.max;r({target:"Array",proto:!0,forced:!A},{slice:function(e,t){var n,r,d,p=l(this),A=s(p),b=c(e,A),y=c(void 0===t?A:t,A);if(o(p)&&(n=p.constructor,(i(n)&&(n===v||o(n.prototype))||a(n)&&null===(n=n[m]))&&(n=void 0),n===v||void 0===n))return f(p,b,y);for(r=new(void 0===n?v:n)(h(y-b,0)),d=0;b<y;b++,d++)b in p&&u(r,d,p[b]);return r.length=d,r}})},6448:(e,t,n)=>{"use strict";var r=n(8612),o=n(4762),i=n(8120),a=n(2347),c=n(6960),s=n(6060),l=n(6261),u=n(8473),d=n(7354),p=n(3152),f=n(7332),A=n(8996),m=n(6170),v=n(5158),h=[],b=o(h.sort),y=o(h.push),g=u((function(){h.sort(void 0)})),C=u((function(){h.sort(null)})),k=p("sort"),w=!u((function(){if(m)return m<70;if(!(f&&f>3)){if(A)return!0;if(v)return v<603;var e,t,n,r,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:n=3;break;case 68:case 71:n=4;break;default:n=2}for(r=0;r<47;r++)h.push({k:t+r,v:n})}for(h.sort((function(e,t){return t.v-e.v})),r=0;r<h.length;r++)t=h[r].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:g||!C||!k||!w},{sort:function(e){void 0!==e&&i(e);var t=a(this);if(w)return void 0===e?b(t):b(t,e);var n,r,o=[],u=c(t);for(r=0;r<u;r++)r in t&&y(o,t[r]);for(d(o,function(e){return function(t,n){return void 0===n?-1:void 0===t?1:void 0!==e?+e(t,n)||0:l(t)>l(n)?1:-1}}(e)),n=c(o),r=0;r<n;)t[r]=o[r++];for(;r<u;)s(t,r++);return t}})},4754:(e,t,n)=>{"use strict";var r=n(5755),o=n(7914),i=n(6446),a=n(1)("toPrimitive"),c=Date.prototype;r(c,a)||o(c,a,i)},1908:(e,t,n)=>{"use strict";var r=n(382),o=n(2048).EXISTS,i=n(4762),a=n(3864),c=Function.prototype,s=i(c.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(l.exec);r&&!o&&a(c,"name",{configurable:!0,get:function(){try{return u(l,s(this))[1]}catch(e){return""}}})},6184:(e,t,n)=>{"use strict";var r=n(8612),o=n(1409),i=n(3067),a=n(1807),c=n(4762),s=n(8473),l=n(1483),u=n(1423),d=n(1698),p=n(5215),f=n(6029),A=String,m=o("JSON","stringify"),v=c(/./.exec),h=c("".charAt),b=c("".charCodeAt),y=c("".replace),g=c(1..toString),C=/[\uD800-\uDFFF]/g,k=/^[\uD800-\uDBFF]$/,w=/^[\uDC00-\uDFFF]$/,x=!f||s((function(){var e=o("Symbol")("stringify detection");return"[null]"!==m([e])||"{}"!==m({a:e})||"{}"!==m(Object(e))})),_=s((function(){return'"\\udf06\\ud834"'!==m("\udf06\ud834")||'"\\udead"'!==m("\udead")})),E=function(e,t){var n=d(arguments),r=p(t);if(l(r)||void 0!==e&&!u(e))return n[1]=function(e,t){if(l(r)&&(t=a(r,this,A(e),t)),!u(t))return t},i(m,null,n)},S=function(e,t,n){var r=h(n,t-1),o=h(n,t+1);return v(k,e)&&!v(w,o)||v(w,e)&&!v(k,r)?"\\u"+g(b(e,0),16):e};m&&r({target:"JSON",stat:!0,arity:3,forced:x||_},{stringify:function(e,t,n){var r=d(arguments),o=i(x?E:m,null,r);return _&&"string"==typeof o?y(o,C,S):o}})},2725:(e,t,n)=>{"use strict";n(7446)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(4092))},8551:(e,t,n)=>{"use strict";n(2725)},94:(e,t,n)=>{"use strict";var r=n(8612),o=n(9557),i=n(382),a=n(8389),c=n(6589),s=n(4762),l=n(8730),u=n(5755),d=n(2429),p=n(4815),f=n(1423),A=n(2355),m=n(8473),v=n(2278).f,h=n(4961).f,b=n(5835).f,y=n(2430),g=n(4544).trim,C="Number",k=a[C],w=c[C],x=k.prototype,_=a.TypeError,E=s("".slice),S=s("".charCodeAt),j=l(C,!k(" 0o1")||!k("0b1")||k("+0x1")),O=function(e){var t,n=arguments.length<1?0:k(function(e){var t=A(e,"number");return"bigint"==typeof t?t:function(e){var t,n,r,o,i,a,c,s,l=A(e,"number");if(f(l))throw new _("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=g(l),43===(t=S(l,0))||45===t){if(88===(n=S(l,2))||120===n)return NaN}else if(48===t){switch(S(l,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+l}for(a=(i=E(l,2)).length,c=0;c<a;c++)if((s=S(i,c))<48||s>o)return NaN;return parseInt(i,r)}return+l}(t)}(e));return p(x,t=this)&&m((function(){y(t)}))?d(Object(n),this,O):n};O.prototype=x,j&&!o&&(x.constructor=O),r({global:!0,constructor:!0,wrap:!0,forced:j},{Number:O});var B=function(e,t){for(var n,r=i?v(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;r.length>o;o++)u(t,n=r[o])&&!u(e,n)&&b(e,n,h(t,n))};o&&w&&B(c[C],w),(j||o)&&B(c[C],k)},7575:(e,t,n)=>{"use strict";var r=n(8612),o=n(1439);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},7132:(e,t,n)=>{"use strict";var r=n(8612),o=n(5627).entries;r({target:"Object",stat:!0},{entries:function(e){return o(e)}})},6457:(e,t,n)=>{"use strict";var r=n(8612),o=n(8473),i=n(5599),a=n(4961).f,c=n(382);r({target:"Object",stat:!0,forced:!c||o((function(){a(1)})),sham:!c},{getOwnPropertyDescriptor:function(e,t){return a(i(e),t)}})},8908:(e,t,n)=>{"use strict";var r=n(8612),o=n(382),i=n(9497),a=n(5599),c=n(4961),s=n(670);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),o=c.f,l=i(r),u={},d=0;l.length>d;)void 0!==(n=o(r,t=l[d++]))&&s(u,t,n);return u}})},7859:(e,t,n)=>{"use strict";var r=n(8612),o=n(6029),i=n(8473),a=n(4347),c=n(2347);r({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(e){var t=a.f;return t?t(c(e)):[]}})},6437:(e,t,n)=>{"use strict";var r=n(8612),o=n(8473),i=n(2347),a=n(3181),c=n(9441);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!c},{getPrototypeOf:function(e){return a(i(e))}})},3810:(e,t,n)=>{"use strict";var r=n(8612),o=n(2347),i=n(3658);r({target:"Object",stat:!0,forced:n(8473)((function(){i(1)}))},{keys:function(e){return i(o(e))}})},2697:(e,t,n)=>{"use strict";n(8612)({target:"Object",stat:!0},{setPrototypeOf:n(1953)})},8557:(e,t,n)=>{"use strict";var r=n(4338),o=n(7914),i=n(5685);r||o(Object.prototype,"toString",i,{unsafe:!0})},6249:(e,t,n)=>{"use strict";var r=n(8612),o=n(1807),i=n(8120),a=n(1173),c=n(4193),s=n(1506);r({target:"Promise",stat:!0,forced:n(1407)},{all:function(e){var t=this,n=a.f(t),r=n.resolve,l=n.reject,u=c((function(){var n=i(t.resolve),a=[],c=0,u=1;s(e,(function(e){var i=c++,s=!1;u++,o(n,t,e).then((function(e){s||(s=!0,a[i]=e,--u||r(a))}),l)})),--u||r(a)}));return u.error&&l(u.value),n.promise}})},6681:(e,t,n)=>{"use strict";var r=n(8612),o=n(9557),i=n(5502).CONSTRUCTOR,a=n(2832),c=n(1409),s=n(1483),l=n(7914),u=a&&a.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&s(a)){var d=c("Promise").prototype.catch;u.catch!==d&&l(u,"catch",d,{unsafe:!0})}},8786:(e,t,n)=>{"use strict";var r,o,i,a=n(8612),c=n(9557),s=n(4334),l=n(8389),u=n(1807),d=n(7914),p=n(1953),f=n(2277),A=n(240),m=n(8120),v=n(1483),h=n(1704),b=n(6021),y=n(483),g=n(7007).set,C=n(553),k=n(1339),w=n(4193),x=n(5459),_=n(4483),E=n(2832),S=n(5502),j=n(1173),O="Promise",B=S.CONSTRUCTOR,I=S.REJECTION_EVENT,P=S.SUBCLASSING,z=_.getterFor(O),D=_.set,N=E&&E.prototype,R=E,$=N,T=l.TypeError,q=l.document,U=l.process,M=j.f,L=M,F=!!(q&&q.createEvent&&l.dispatchEvent),J="unhandledrejection",G=function(e){var t;return!(!h(e)||!v(t=e.then))&&t},H=function(e,t){var n,r,o,i=t.value,a=1===t.state,c=a?e.ok:e.fail,s=e.resolve,l=e.reject,d=e.domain;try{c?(a||(2===t.rejection&&Q(t),t.rejection=1),!0===c?n=i:(d&&d.enter(),n=c(i),d&&(d.exit(),o=!0)),n===e.promise?l(new T("Promise-chain cycle")):(r=G(n))?u(r,n,s,l):s(n)):l(i)}catch(e){d&&!o&&d.exit(),l(e)}},W=function(e,t){e.notified||(e.notified=!0,C((function(){for(var n,r=e.reactions;n=r.get();)H(n,e);e.notified=!1,t&&!e.rejection&&Y(e)})))},K=function(e,t,n){var r,o;F?((r=q.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),l.dispatchEvent(r)):r={promise:t,reason:n},!I&&(o=l["on"+e])?o(r):e===J&&k("Unhandled promise rejection",n)},Y=function(e){u(g,l,(function(){var t,n=e.facade,r=e.value;if(V(e)&&(t=w((function(){s?U.emit("unhandledRejection",r,n):K(J,n,r)})),e.rejection=s||V(e)?2:1,t.error))throw t.value}))},V=function(e){return 1!==e.rejection&&!e.parent},Q=function(e){u(g,l,(function(){var t=e.facade;s?U.emit("rejectionHandled",t):K("rejectionhandled",t,e.value)}))},X=function(e,t,n){return function(r){e(t,r,n)}},Z=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,W(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw new T("Promise can't be resolved itself");var r=G(t);r?C((function(){var n={done:!1};try{u(r,t,X(ee,n,e),X(Z,n,e))}catch(t){Z(n,t,e)}})):(e.value=t,e.state=1,W(e,!1))}catch(t){Z({done:!1},t,e)}}};if(B&&($=(R=function(e){b(this,$),m(e),u(r,this);var t=z(this);try{e(X(ee,t),X(Z,t))}catch(e){Z(t,e)}}).prototype,(r=function(e){D(this,{type:O,done:!1,notified:!1,parent:!1,reactions:new x,rejection:!1,state:0,value:void 0})}).prototype=d($,"then",(function(e,t){var n=z(this),r=M(y(this,R));return n.parent=!0,r.ok=!v(e)||e,r.fail=v(t)&&t,r.domain=s?U.domain:void 0,0===n.state?n.reactions.add(r):C((function(){H(r,n)})),r.promise})),o=function(){var e=new r,t=z(e);this.promise=e,this.resolve=X(ee,t),this.reject=X(Z,t)},j.f=M=function(e){return e===R||void 0===e?new o(e):L(e)},!c&&v(E)&&N!==Object.prototype)){i=N.then,P||d(N,"then",(function(e,t){var n=this;return new R((function(e,t){u(i,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete N.constructor}catch(e){}p&&p(N,$)}a({global:!0,constructor:!0,wrap:!0,forced:B},{Promise:R}),f(R,O,!1,!0),A(O)},76:(e,t,n)=>{"use strict";n(8786),n(6249),n(6681),n(1681),n(9231),n(5774)},1681:(e,t,n)=>{"use strict";var r=n(8612),o=n(1807),i=n(8120),a=n(1173),c=n(4193),s=n(1506);r({target:"Promise",stat:!0,forced:n(1407)},{race:function(e){var t=this,n=a.f(t),r=n.reject,l=c((function(){var a=i(t.resolve);s(e,(function(e){o(a,t,e).then(n.resolve,r)}))}));return l.error&&r(l.value),n.promise}})},9231:(e,t,n)=>{"use strict";var r=n(8612),o=n(1173);r({target:"Promise",stat:!0,forced:n(5502).CONSTRUCTOR},{reject:function(e){var t=o.f(this);return(0,t.reject)(e),t.promise}})},5774:(e,t,n)=>{"use strict";var r=n(8612),o=n(1409),i=n(9557),a=n(2832),c=n(5502).CONSTRUCTOR,s=n(2172),l=o("Promise"),u=i&&!c;r({target:"Promise",stat:!0,forced:i||c},{resolve:function(e){return s(u&&this===l?a:this,e)}})},1359:(e,t,n)=>{"use strict";var r=n(8612),o=n(1409),i=n(3067),a=n(2164),c=n(2374),s=n(2293),l=n(1704),u=n(5290),d=n(8473),p=o("Reflect","construct"),f=Object.prototype,A=[].push,m=d((function(){function e(){}return!(p((function(){}),[],e)instanceof e)})),v=!d((function(){p((function(){}))})),h=m||v;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){c(e),s(t);var n=arguments.length<3?e:c(arguments[2]);if(v&&!m)return p(e,t,n);if(e===n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return i(A,r,t),new(i(a,e,r))}var o=n.prototype,d=u(l(o)?o:f),h=i(e,d,t);return l(h)?h:d}})},646:(e,t,n)=>{"use strict";var r=n(382),o=n(8389),i=n(4762),a=n(8730),c=n(2429),s=n(9037),l=n(5290),u=n(2278).f,d=n(4815),p=n(4786),f=n(6261),A=n(9736),m=n(7435),v=n(7150),h=n(7914),b=n(8473),y=n(5755),g=n(4483).enforce,C=n(240),k=n(1),w=n(3933),x=n(4528),_=k("match"),E=o.RegExp,S=E.prototype,j=o.SyntaxError,O=i(S.exec),B=i("".charAt),I=i("".replace),P=i("".indexOf),z=i("".slice),D=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,N=/a/g,R=/a/g,$=new E(N)!==N,T=m.MISSED_STICKY,q=m.UNSUPPORTED_Y;if(a("RegExp",r&&(!$||T||w||x||b((function(){return R[_]=!1,E(N)!==N||E(R)===R||"/a/i"!==String(E(N,"i"))}))))){for(var U=function(e,t){var n,r,o,i,a,u,m=d(S,this),v=p(e),h=void 0===t,b=[],C=e;if(!m&&v&&h&&e.constructor===U)return e;if((v||d(S,e))&&(e=e.source,h&&(t=A(C))),e=void 0===e?"":f(e),t=void 0===t?"":f(t),C=e,w&&"dotAll"in N&&(r=!!t&&P(t,"s")>-1)&&(t=I(t,/s/g,"")),n=t,T&&"sticky"in N&&(o=!!t&&P(t,"y")>-1)&&q&&(t=I(t,/y/g,"")),x&&(i=function(e){for(var t,n=e.length,r=0,o="",i=[],a=l(null),c=!1,s=!1,u=0,d="";r<=n;r++){if("\\"===(t=B(e,r)))t+=B(e,++r);else if("]"===t)c=!1;else if(!c)switch(!0){case"["===t:c=!0;break;case"("===t:O(D,z(e,r+1))&&(r+=2,s=!0),o+=t,u++;continue;case">"===t&&s:if(""===d||y(a,d))throw new j("Invalid capture group name");a[d]=!0,i[i.length]=[d,u],s=!1,d="";continue}s?d+=t:o+=t}return[o,i]}(e),e=i[0],b=i[1]),a=c(E(e,t),m?this:S,U),(r||o||b.length)&&(u=g(a),r&&(u.dotAll=!0,u.raw=U(function(e){for(var t,n=e.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(t=B(e,r))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+B(e,++r);return o}(e),n)),o&&(u.sticky=!0),b.length&&(u.groups=b)),e!==C)try{s(a,"source",""===C?"(?:)":C)}catch(e){}return a},M=u(E),L=0;M.length>L;)v(U,E,M[L++]);S.constructor=U,U.prototype=S,h(o,"RegExp",U,{constructor:!0})}C("RegExp")},5021:(e,t,n)=>{"use strict";var r=n(8612),o=n(8865);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},3687:(e,t,n)=>{"use strict";var r=n(2048).PROPER,o=n(7914),i=n(2293),a=n(6261),c=n(8473),s=n(9736),l="toString",u=RegExp.prototype,d=u[l],p=c((function(){return"/a/b"!==d.call({source:"a",flags:"b"})})),f=r&&d.name!==l;(p||f)&&o(u,l,(function(){var e=i(this);return"/"+a(e.source)+"/"+a(s(e))}),{unsafe:!0})},9203:(e,t,n)=>{"use strict";n(7446)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(4092))},2745:(e,t,n)=>{"use strict";n(9203)},987:(e,t,n)=>{"use strict";var r,o=n(8612),i=n(3786),a=n(4961).f,c=n(8324),s=n(6261),l=n(4989),u=n(3312),d=n(4522),p=n(9557),f=i("".slice),A=Math.min,m=d("endsWith");o({target:"String",proto:!0,forced:!(!p&&!m&&(r=a(String.prototype,"endsWith"),r&&!r.writable)||m)},{endsWith:function(e){var t=s(u(this));l(e);var n=arguments.length>1?arguments[1]:void 0,r=t.length,o=void 0===n?r:A(c(n),r),i=s(e);return f(t,o-i.length,o)===i}})},9425:(e,t,n)=>{"use strict";var r=n(8612),o=n(4762),i=n(4989),a=n(3312),c=n(6261),s=n(4522),l=o("".indexOf);r({target:"String",proto:!0,forced:!s("includes")},{includes:function(e){return!!~l(c(a(this)),c(i(e)),arguments.length>1?arguments[1]:void 0)}})},3994:(e,t,n)=>{"use strict";var r=n(9105).charAt,o=n(6261),i=n(4483),a=n(5662),c=n(5247),s="String Iterator",l=i.set,u=i.getterFor(s);a(String,"String",(function(e){l(this,{type:s,string:o(e),index:0})}),(function(){var e,t=u(this),n=t.string,o=t.index;return o>=n.length?c(void 0,!0):(e=r(n,o),t.index+=e.length,c(e,!1))}))},3819:(e,t,n)=>{"use strict";var r=n(1807),o=n(3358),i=n(2293),a=n(5983),c=n(8324),s=n(6261),l=n(3312),u=n(2564),d=n(4419),p=n(2428);o("match",(function(e,t,n){return[function(t){var n=l(this),o=a(t)?void 0:u(t,e);return o?r(o,t,n):new RegExp(t)[e](s(n))},function(e){var r=i(this),o=s(e),a=n(t,r,o);if(a.done)return a.value;if(!r.global)return p(r,o);var l=r.unicode;r.lastIndex=0;for(var u,f=[],A=0;null!==(u=p(r,o));){var m=s(u[0]);f[A]=m,""===m&&(r.lastIndex=d(o,c(r.lastIndex),l)),A++}return 0===A?null:f}]}))},3062:(e,t,n)=>{"use strict";var r=n(3067),o=n(1807),i=n(4762),a=n(3358),c=n(8473),s=n(2293),l=n(1483),u=n(5983),d=n(3005),p=n(8324),f=n(6261),A=n(3312),m=n(4419),v=n(2564),h=n(708),b=n(2428),y=n(1)("replace"),g=Math.max,C=Math.min,k=i([].concat),w=i([].push),x=i("".indexOf),_=i("".slice),E="$0"==="a".replace(/./,"$0"),S=!!/./[y]&&""===/./[y]("a","$0");a("replace",(function(e,t,n){var i=S?"$":"$0";return[function(e,n){var r=A(this),i=u(e)?void 0:v(e,y);return i?o(i,e,r,n):o(t,f(r),e,n)},function(e,o){var a=s(this),c=f(e);if("string"==typeof o&&-1===x(o,i)&&-1===x(o,"$<")){var u=n(t,a,c,o);if(u.done)return u.value}var A=l(o);A||(o=f(o));var v,y=a.global;y&&(v=a.unicode,a.lastIndex=0);for(var E,S=[];null!==(E=b(a,c))&&(w(S,E),y);)""===f(E[0])&&(a.lastIndex=m(c,p(a.lastIndex),v));for(var j,O="",B=0,I=0;I<S.length;I++){for(var P,z=f((E=S[I])[0]),D=g(C(d(E.index),c.length),0),N=[],R=1;R<E.length;R++)w(N,void 0===(j=E[R])?j:String(j));var $=E.groups;if(A){var T=k([z],N,D,c);void 0!==$&&w(T,$),P=f(r(o,void 0,T))}else P=h(z,c,D,N,$,o);D>=B&&(O+=_(c,B,D)+P,B=D+z.length)}return O+_(c,B)}]}),!!c((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!E||S)},7456:(e,t,n)=>{"use strict";var r=n(1807),o=n(3358),i=n(2293),a=n(5983),c=n(3312),s=n(5420),l=n(6261),u=n(2564),d=n(2428);o("search",(function(e,t,n){return[function(t){var n=c(this),o=a(t)?void 0:u(t,e);return o?r(o,t,n):new RegExp(t)[e](l(n))},function(e){var r=i(this),o=l(e),a=n(t,r,o);if(a.done)return a.value;var c=r.lastIndex;s(c,0)||(r.lastIndex=0);var u=d(r,o);return s(r.lastIndex,c)||(r.lastIndex=c),null===u?-1:u.index}]}))},4062:(e,t,n)=>{"use strict";var r,o=n(8612),i=n(3786),a=n(4961).f,c=n(8324),s=n(6261),l=n(4989),u=n(3312),d=n(4522),p=n(9557),f=i("".slice),A=Math.min,m=d("startsWith");o({target:"String",proto:!0,forced:!(!p&&!m&&(r=a(String.prototype,"startsWith"),r&&!r.writable)||m)},{startsWith:function(e){var t=s(u(this));l(e);var n=c(A(arguments.length>1?arguments[1]:void 0,t.length)),r=s(e);return f(t,n,n+r.length)===r}})},5443:(e,t,n)=>{"use strict";var r=n(8612),o=n(8389),i=n(1807),a=n(4762),c=n(9557),s=n(382),l=n(6029),u=n(8473),d=n(5755),p=n(4815),f=n(2293),A=n(5599),m=n(3815),v=n(6261),h=n(7738),b=n(5290),y=n(3658),g=n(2278),C=n(2020),k=n(4347),w=n(4961),x=n(5835),_=n(5799),E=n(7611),S=n(7914),j=n(3864),O=n(7255),B=n(5409),I=n(1507),P=n(1866),z=n(1),D=n(5373),N=n(7849),R=n(8192),$=n(2277),T=n(4483),q=n(2867).forEach,U=B("hidden"),M="Symbol",L="prototype",F=T.set,J=T.getterFor(M),G=Object[L],H=o.Symbol,W=H&&H[L],K=o.RangeError,Y=o.TypeError,V=o.QObject,Q=w.f,X=x.f,Z=C.f,ee=E.f,te=a([].push),ne=O("symbols"),re=O("op-symbols"),oe=O("wks"),ie=!V||!V[L]||!V[L].findChild,ae=function(e,t,n){var r=Q(G,t);r&&delete G[t],X(e,t,n),r&&e!==G&&X(G,t,r)},ce=s&&u((function(){return 7!==b(X({},"a",{get:function(){return X(this,"a",{value:7}).a}})).a}))?ae:X,se=function(e,t){var n=ne[e]=b(W);return F(n,{type:M,tag:e,description:t}),s||(n.description=t),n},le=function(e,t,n){e===G&&le(re,t,n),f(e);var r=m(t);return f(n),d(ne,r)?(n.enumerable?(d(e,U)&&e[U][r]&&(e[U][r]=!1),n=b(n,{enumerable:h(0,!1)})):(d(e,U)||X(e,U,h(1,b(null))),e[U][r]=!0),ce(e,r,n)):X(e,r,n)},ue=function(e,t){f(e);var n=A(t),r=y(n).concat(Ae(n));return q(r,(function(t){s&&!i(de,n,t)||le(e,t,n[t])})),e},de=function(e){var t=m(e),n=i(ee,this,t);return!(this===G&&d(ne,t)&&!d(re,t))&&(!(n||!d(this,t)||!d(ne,t)||d(this,U)&&this[U][t])||n)},pe=function(e,t){var n=A(e),r=m(t);if(n!==G||!d(ne,r)||d(re,r)){var o=Q(n,r);return!o||!d(ne,r)||d(n,U)&&n[U][r]||(o.enumerable=!0),o}},fe=function(e){var t=Z(A(e)),n=[];return q(t,(function(e){d(ne,e)||d(I,e)||te(n,e)})),n},Ae=function(e){var t=e===G,n=Z(t?re:A(e)),r=[];return q(n,(function(e){!d(ne,e)||t&&!d(G,e)||te(r,ne[e])})),r};l||(S(W=(H=function(){if(p(W,this))throw new Y("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?v(arguments[0]):void 0,t=P(e),n=function(e){var r=void 0===this?o:this;r===G&&i(n,re,e),d(r,U)&&d(r[U],t)&&(r[U][t]=!1);var a=h(1,e);try{ce(r,t,a)}catch(e){if(!(e instanceof K))throw e;ae(r,t,a)}};return s&&ie&&ce(G,t,{configurable:!0,set:n}),se(t,e)})[L],"toString",(function(){return J(this).tag})),S(H,"withoutSetter",(function(e){return se(P(e),e)})),E.f=de,x.f=le,_.f=ue,w.f=pe,g.f=C.f=fe,k.f=Ae,D.f=function(e){return se(z(e),e)},s&&(j(W,"description",{configurable:!0,get:function(){return J(this).description}}),c||S(G,"propertyIsEnumerable",de,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!l,sham:!l},{Symbol:H}),q(y(oe),(function(e){N(e)})),r({target:M,stat:!0,forced:!l},{useSetter:function(){ie=!0},useSimple:function(){ie=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!s},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:pe}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:fe}),R(),$(H,M),I[U]=!0},2733:(e,t,n)=>{"use strict";var r=n(8612),o=n(382),i=n(8389),a=n(4762),c=n(5755),s=n(1483),l=n(4815),u=n(6261),d=n(3864),p=n(6726),f=i.Symbol,A=f&&f.prototype;if(o&&s(f)&&(!("description"in A)||void 0!==f().description)){var m={},v=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:u(arguments[0]),t=l(A,this)?new f(e):void 0===e?f():f(e);return""===e&&(m[t]=!0),t};p(v,f),v.prototype=A,A.constructor=v;var h="Symbol(description detection)"===String(f("description detection")),b=a(A.valueOf),y=a(A.toString),g=/^Symbol\((.*)\)[^)]+$/,C=a("".replace),k=a("".slice);d(A,"description",{configurable:!0,get:function(){var e=b(this);if(c(m,e))return"";var t=y(e),n=h?k(t,7,-1):C(t,g,"$1");return""===n?void 0:n}}),r({global:!0,constructor:!0,forced:!0},{Symbol:v})}},2484:(e,t,n)=>{"use strict";var r=n(8612),o=n(1409),i=n(5755),a=n(6261),c=n(7255),s=n(3218),l=c("string-to-symbol-registry"),u=c("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!s},{for:function(e){var t=a(e);if(i(l,t))return l[t];var n=o("Symbol")(t);return l[t]=n,u[n]=t,n}})},4701:(e,t,n)=>{"use strict";n(7849)("iterator")},9305:(e,t,n)=>{"use strict";n(5443),n(2484),n(1894),n(6184),n(7859)},1894:(e,t,n)=>{"use strict";var r=n(8612),o=n(5755),i=n(1423),a=n(8761),c=n(7255),s=n(3218),l=c("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!s},{keyFor:function(e){if(!i(e))throw new TypeError(a(e)+" is not a symbol");if(o(l,e))return l[e]}})},1678:(e,t,n)=>{"use strict";var r=n(7849),o=n(8192);r("toPrimitive"),o()},3630:(e,t,n)=>{"use strict";var r=n(8389),o=n(4842),i=n(1902),a=n(4793),c=n(9037),s=function(e){if(e&&e.forEach!==a)try{c(e,"forEach",a)}catch(t){e.forEach=a}};for(var l in o)o[l]&&s(r[l]&&r[l].prototype);s(i)},2367:(e,t,n)=>{"use strict";var r=n(8389),o=n(4842),i=n(1902),a=n(4962),c=n(9037),s=n(2277),l=n(1)("iterator"),u=a.values,d=function(e,t){if(e){if(e[l]!==u)try{c(e,l,u)}catch(t){e[l]=u}if(s(e,t,!0),o[t])for(var n in a)if(e[n]!==a[n])try{c(e,n,a[n])}catch(t){e[n]=a[n]}}};for(var p in o)d(r[p]&&r[p].prototype,p);d(i,"DOMTokenList")},9833:(e,t,n)=>{"use strict";var r=n(8612),o=n(8389),i=n(9570)(o.setInterval,!0);r({global:!0,bind:!0,forced:o.setInterval!==i},{setInterval:i})},3989:(e,t,n)=>{"use strict";var r=n(8612),o=n(8389),i=n(9570)(o.setTimeout,!0);r({global:!0,bind:!0,forced:o.setTimeout!==i},{setTimeout:i})},7089:(e,t,n)=>{"use strict";n(9833),n(3989)},7192:(e,t,n)=>{"use strict";n(4962);var r=n(8612),o=n(8389),i=n(8123),a=n(1807),c=n(4762),s=n(382),l=n(4250),u=n(7914),d=n(3864),p=n(2313),f=n(2277),A=n(1040),m=n(4483),v=n(6021),h=n(1483),b=n(5755),y=n(2914),g=n(6145),C=n(2293),k=n(1704),w=n(6261),x=n(5290),_=n(7738),E=n(4887),S=n(6665),j=n(5247),O=n(4066),B=n(1),I=n(7354),P=B("iterator"),z="URLSearchParams",D=z+"Iterator",N=m.set,R=m.getterFor(z),$=m.getterFor(D),T=i("fetch"),q=i("Request"),U=i("Headers"),M=q&&q.prototype,L=U&&U.prototype,F=o.RegExp,J=o.TypeError,G=o.decodeURIComponent,H=o.encodeURIComponent,W=c("".charAt),K=c([].join),Y=c([].push),V=c("".replace),Q=c([].shift),X=c([].splice),Z=c("".split),ee=c("".slice),te=/\+/g,ne=Array(4),re=function(e){return ne[e-1]||(ne[e-1]=F("((?:%[\\da-f]{2}){"+e+"})","gi"))},oe=function(e){try{return G(e)}catch(t){return e}},ie=function(e){var t=V(e,te," "),n=4;try{return G(t)}catch(e){for(;n;)t=V(t,re(n--),oe);return t}},ae=/[!'()~]|%20/g,ce={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},se=function(e){return ce[e]},le=function(e){return V(H(e),ae,se)},ue=A((function(e,t){N(this,{type:D,target:R(e).entries,index:0,kind:t})}),z,(function(){var e=$(this),t=e.target,n=e.index++;if(!t||n>=t.length)return e.target=void 0,j(void 0,!0);var r=t[n];switch(e.kind){case"keys":return j(r.key,!1);case"values":return j(r.value,!1)}return j([r.key,r.value],!1)}),!0),de=function(e){this.entries=[],this.url=null,void 0!==e&&(k(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===W(e,0)?ee(e,1):e:w(e)))};de.prototype={type:z,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,n,r,o,i,c,s,l=this.entries,u=S(e);if(u)for(n=(t=E(e,u)).next;!(r=a(n,t)).done;){if(i=(o=E(C(r.value))).next,(c=a(i,o)).done||(s=a(i,o)).done||!a(i,o).done)throw new J("Expected sequence with length 2");Y(l,{key:w(c.value),value:w(s.value)})}else for(var d in e)b(e,d)&&Y(l,{key:d,value:w(e[d])})},parseQuery:function(e){if(e)for(var t,n,r=this.entries,o=Z(e,"&"),i=0;i<o.length;)(t=o[i++]).length&&(n=Z(t,"="),Y(r,{key:ie(Q(n)),value:ie(K(n,"="))}))},serialize:function(){for(var e,t=this.entries,n=[],r=0;r<t.length;)e=t[r++],Y(n,le(e.key)+"="+le(e.value));return K(n,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var pe=function(){v(this,fe);var e=N(this,new de(arguments.length>0?arguments[0]:void 0));s||(this.size=e.entries.length)},fe=pe.prototype;if(p(fe,{append:function(e,t){var n=R(this);O(arguments.length,2),Y(n.entries,{key:w(e),value:w(t)}),s||this.length++,n.updateURL()},delete:function(e){for(var t=R(this),n=O(arguments.length,1),r=t.entries,o=w(e),i=n<2?void 0:arguments[1],a=void 0===i?i:w(i),c=0;c<r.length;){var l=r[c];if(l.key!==o||void 0!==a&&l.value!==a)c++;else if(X(r,c,1),void 0!==a)break}s||(this.size=r.length),t.updateURL()},get:function(e){var t=R(this).entries;O(arguments.length,1);for(var n=w(e),r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){var t=R(this).entries;O(arguments.length,1);for(var n=w(e),r=[],o=0;o<t.length;o++)t[o].key===n&&Y(r,t[o].value);return r},has:function(e){for(var t=R(this).entries,n=O(arguments.length,1),r=w(e),o=n<2?void 0:arguments[1],i=void 0===o?o:w(o),a=0;a<t.length;){var c=t[a++];if(c.key===r&&(void 0===i||c.value===i))return!0}return!1},set:function(e,t){var n=R(this);O(arguments.length,1);for(var r,o=n.entries,i=!1,a=w(e),c=w(t),l=0;l<o.length;l++)(r=o[l]).key===a&&(i?X(o,l--,1):(i=!0,r.value=c));i||Y(o,{key:a,value:c}),s||(this.size=o.length),n.updateURL()},sort:function(){var e=R(this);I(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,n=R(this).entries,r=y(e,arguments.length>1?arguments[1]:void 0),o=0;o<n.length;)r((t=n[o++]).value,t.key,this)},keys:function(){return new ue(this,"keys")},values:function(){return new ue(this,"values")},entries:function(){return new ue(this,"entries")}},{enumerable:!0}),u(fe,P,fe.entries,{name:"entries"}),u(fe,"toString",(function(){return R(this).serialize()}),{enumerable:!0}),s&&d(fe,"size",{get:function(){return R(this).entries.length},configurable:!0,enumerable:!0}),f(pe,z),r({global:!0,constructor:!0,forced:!l},{URLSearchParams:pe}),!l&&h(U)){var Ae=c(L.has),me=c(L.set),ve=function(e){if(k(e)){var t,n=e.body;if(g(n)===z)return t=e.headers?new U(e.headers):new U,Ae(t,"content-type")||me(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),x(e,{body:_(0,w(n)),headers:_(0,t)})}return e};if(h(T)&&r({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(e){return T(e,arguments.length>1?ve(arguments[1]):{})}}),h(q)){var he=function(e){return v(this,M),new q(e,arguments.length>1?ve(arguments[1]):{})};M.constructor=he,he.prototype=M,r({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:he})}}e.exports={URLSearchParams:pe,getState:R}},9102:(e,t,n)=>{"use strict";n(7192)},2332:(e,t,n)=>{"use strict";n(3994);var r,o=n(8612),i=n(382),a=n(4250),c=n(8389),s=n(2914),l=n(4762),u=n(7914),d=n(3864),p=n(6021),f=n(5755),A=n(1439),m=n(6142),v=n(1698),h=n(9105).codeAt,b=n(4939),y=n(6261),g=n(2277),C=n(4066),k=n(7192),w=n(4483),x=w.set,_=w.getterFor("URL"),E=k.URLSearchParams,S=k.getState,j=c.URL,O=c.TypeError,B=c.parseInt,I=Math.floor,P=Math.pow,z=l("".charAt),D=l(/./.exec),N=l([].join),R=l(1..toString),$=l([].pop),T=l([].push),q=l("".replace),U=l([].shift),M=l("".split),L=l("".slice),F=l("".toLowerCase),J=l([].unshift),G="Invalid scheme",H="Invalid host",W="Invalid port",K=/[a-z]/i,Y=/[\d+-.a-z]/i,V=/\d/,Q=/^0x/i,X=/^[0-7]+$/,Z=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,ne=/[\0\t\n\r #/:<>?@[\\\]^|]/,re=/^[\u0000-\u0020]+/,oe=/(^|[^\u0000-\u0020])[\u0000-\u0020]+$/,ie=/[\t\n\r]/g,ae=function(e){var t,n,r,o;if("number"==typeof e){for(t=[],n=0;n<4;n++)J(t,e%256),e=I(e/256);return N(t,".")}if("object"==typeof e){for(t="",r=function(e){for(var t=null,n=1,r=null,o=0,i=0;i<8;i++)0!==e[i]?(o>n&&(t=r,n=o),r=null,o=0):(null===r&&(r=i),++o);return o>n&&(t=r,n=o),t}(e),n=0;n<8;n++)o&&0===e[n]||(o&&(o=!1),r===n?(t+=n?":":"::",o=!0):(t+=R(e[n],16),n<7&&(t+=":")));return"["+t+"]"}return e},ce={},se=A({},ce,{" ":1,'"':1,"<":1,">":1,"`":1}),le=A({},se,{"#":1,"?":1,"{":1,"}":1}),ue=A({},le,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),de=function(e,t){var n=h(e,0);return n>32&&n<127&&!f(t,e)?e:encodeURIComponent(e)},pe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},fe=function(e,t){var n;return 2===e.length&&D(K,z(e,0))&&(":"===(n=z(e,1))||!t&&"|"===n)},Ae=function(e){var t;return e.length>1&&fe(L(e,0,2))&&(2===e.length||"/"===(t=z(e,2))||"\\"===t||"?"===t||"#"===t)},me=function(e){return"."===e||"%2e"===F(e)},ve={},he={},be={},ye={},ge={},Ce={},ke={},we={},xe={},_e={},Ee={},Se={},je={},Oe={},Be={},Ie={},Pe={},ze={},De={},Ne={},Re={},$e=function(e,t,n){var r,o,i,a=y(e);if(t){if(o=this.parse(a))throw new O(o);this.searchParams=null}else{if(void 0!==n&&(r=new $e(n,!0)),o=this.parse(a,null,r))throw new O(o);(i=S(new E)).bindURL(this),this.searchParams=i}};$e.prototype={type:"URL",parse:function(e,t,n){var o,i,a,c,s,l=this,u=t||ve,d=0,p="",A=!1,h=!1,b=!1;for(e=y(e),t||(l.scheme="",l.username="",l.password="",l.host=null,l.port=null,l.path=[],l.query=null,l.fragment=null,l.cannotBeABaseURL=!1,e=q(e,re,""),e=q(e,oe,"$1")),e=q(e,ie,""),o=m(e);d<=o.length;){switch(i=o[d],u){case ve:if(!i||!D(K,i)){if(t)return G;u=be;continue}p+=F(i),u=he;break;case he:if(i&&(D(Y,i)||"+"===i||"-"===i||"."===i))p+=F(i);else{if(":"!==i){if(t)return G;p="",u=be,d=0;continue}if(t&&(l.isSpecial()!==f(pe,p)||"file"===p&&(l.includesCredentials()||null!==l.port)||"file"===l.scheme&&!l.host))return;if(l.scheme=p,t)return void(l.isSpecial()&&pe[l.scheme]===l.port&&(l.port=null));p="","file"===l.scheme?u=Oe:l.isSpecial()&&n&&n.scheme===l.scheme?u=ye:l.isSpecial()?u=we:"/"===o[d+1]?(u=ge,d++):(l.cannotBeABaseURL=!0,T(l.path,""),u=De)}break;case be:if(!n||n.cannotBeABaseURL&&"#"!==i)return G;if(n.cannotBeABaseURL&&"#"===i){l.scheme=n.scheme,l.path=v(n.path),l.query=n.query,l.fragment="",l.cannotBeABaseURL=!0,u=Re;break}u="file"===n.scheme?Oe:Ce;continue;case ye:if("/"!==i||"/"!==o[d+1]){u=Ce;continue}u=xe,d++;break;case ge:if("/"===i){u=_e;break}u=ze;continue;case Ce:if(l.scheme=n.scheme,i===r)l.username=n.username,l.password=n.password,l.host=n.host,l.port=n.port,l.path=v(n.path),l.query=n.query;else if("/"===i||"\\"===i&&l.isSpecial())u=ke;else if("?"===i)l.username=n.username,l.password=n.password,l.host=n.host,l.port=n.port,l.path=v(n.path),l.query="",u=Ne;else{if("#"!==i){l.username=n.username,l.password=n.password,l.host=n.host,l.port=n.port,l.path=v(n.path),l.path.length--,u=ze;continue}l.username=n.username,l.password=n.password,l.host=n.host,l.port=n.port,l.path=v(n.path),l.query=n.query,l.fragment="",u=Re}break;case ke:if(!l.isSpecial()||"/"!==i&&"\\"!==i){if("/"!==i){l.username=n.username,l.password=n.password,l.host=n.host,l.port=n.port,u=ze;continue}u=_e}else u=xe;break;case we:if(u=xe,"/"!==i||"/"!==z(p,d+1))continue;d++;break;case xe:if("/"!==i&&"\\"!==i){u=_e;continue}break;case _e:if("@"===i){A&&(p="%40"+p),A=!0,a=m(p);for(var g=0;g<a.length;g++){var C=a[g];if(":"!==C||b){var k=de(C,ue);b?l.password+=k:l.username+=k}else b=!0}p=""}else if(i===r||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()){if(A&&""===p)return"Invalid authority";d-=m(p).length+1,p="",u=Ee}else p+=i;break;case Ee:case Se:if(t&&"file"===l.scheme){u=Ie;continue}if(":"!==i||h){if(i===r||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()){if(l.isSpecial()&&""===p)return H;if(t&&""===p&&(l.includesCredentials()||null!==l.port))return;if(c=l.parseHost(p))return c;if(p="",u=Pe,t)return;continue}"["===i?h=!0:"]"===i&&(h=!1),p+=i}else{if(""===p)return H;if(c=l.parseHost(p))return c;if(p="",u=je,t===Se)return}break;case je:if(!D(V,i)){if(i===r||"/"===i||"?"===i||"#"===i||"\\"===i&&l.isSpecial()||t){if(""!==p){var w=B(p,10);if(w>65535)return W;l.port=l.isSpecial()&&w===pe[l.scheme]?null:w,p=""}if(t)return;u=Pe;continue}return W}p+=i;break;case Oe:if(l.scheme="file","/"===i||"\\"===i)u=Be;else{if(!n||"file"!==n.scheme){u=ze;continue}switch(i){case r:l.host=n.host,l.path=v(n.path),l.query=n.query;break;case"?":l.host=n.host,l.path=v(n.path),l.query="",u=Ne;break;case"#":l.host=n.host,l.path=v(n.path),l.query=n.query,l.fragment="",u=Re;break;default:Ae(N(v(o,d),""))||(l.host=n.host,l.path=v(n.path),l.shortenPath()),u=ze;continue}}break;case Be:if("/"===i||"\\"===i){u=Ie;break}n&&"file"===n.scheme&&!Ae(N(v(o,d),""))&&(fe(n.path[0],!0)?T(l.path,n.path[0]):l.host=n.host),u=ze;continue;case Ie:if(i===r||"/"===i||"\\"===i||"?"===i||"#"===i){if(!t&&fe(p))u=ze;else if(""===p){if(l.host="",t)return;u=Pe}else{if(c=l.parseHost(p))return c;if("localhost"===l.host&&(l.host=""),t)return;p="",u=Pe}continue}p+=i;break;case Pe:if(l.isSpecial()){if(u=ze,"/"!==i&&"\\"!==i)continue}else if(t||"?"!==i)if(t||"#"!==i){if(i!==r&&(u=ze,"/"!==i))continue}else l.fragment="",u=Re;else l.query="",u=Ne;break;case ze:if(i===r||"/"===i||"\\"===i&&l.isSpecial()||!t&&("?"===i||"#"===i)){if(".."===(s=F(s=p))||"%2e."===s||".%2e"===s||"%2e%2e"===s?(l.shortenPath(),"/"===i||"\\"===i&&l.isSpecial()||T(l.path,"")):me(p)?"/"===i||"\\"===i&&l.isSpecial()||T(l.path,""):("file"===l.scheme&&!l.path.length&&fe(p)&&(l.host&&(l.host=""),p=z(p,0)+":"),T(l.path,p)),p="","file"===l.scheme&&(i===r||"?"===i||"#"===i))for(;l.path.length>1&&""===l.path[0];)U(l.path);"?"===i?(l.query="",u=Ne):"#"===i&&(l.fragment="",u=Re)}else p+=de(i,le);break;case De:"?"===i?(l.query="",u=Ne):"#"===i?(l.fragment="",u=Re):i!==r&&(l.path[0]+=de(i,ce));break;case Ne:t||"#"!==i?i!==r&&("'"===i&&l.isSpecial()?l.query+="%27":l.query+="#"===i?"%23":de(i,ce)):(l.fragment="",u=Re);break;case Re:i!==r&&(l.fragment+=de(i,se))}d++}},parseHost:function(e){var t,n,r;if("["===z(e,0)){if("]"!==z(e,e.length-1))return H;if(t=function(e){var t,n,r,o,i,a,c,s=[0,0,0,0,0,0,0,0],l=0,u=null,d=0,p=function(){return z(e,d)};if(":"===p()){if(":"!==z(e,1))return;d+=2,u=++l}for(;p();){if(8===l)return;if(":"!==p()){for(t=n=0;n<4&&D(ee,p());)t=16*t+B(p(),16),d++,n++;if("."===p()){if(0===n)return;if(d-=n,l>6)return;for(r=0;p();){if(o=null,r>0){if(!("."===p()&&r<4))return;d++}if(!D(V,p()))return;for(;D(V,p());){if(i=B(p(),10),null===o)o=i;else{if(0===o)return;o=10*o+i}if(o>255)return;d++}s[l]=256*s[l]+o,2!=++r&&4!==r||l++}if(4!==r)return;break}if(":"===p()){if(d++,!p())return}else if(p())return;s[l++]=t}else{if(null!==u)return;d++,u=++l}}if(null!==u)for(a=l-u,l=7;0!==l&&a>0;)c=s[l],s[l--]=s[u+a-1],s[u+--a]=c;else if(8!==l)return;return s}(L(e,1,-1)),!t)return H;this.host=t}else if(this.isSpecial()){if(e=b(e),D(te,e))return H;if(t=function(e){var t,n,r,o,i,a,c,s=M(e,".");if(s.length&&""===s[s.length-1]&&s.length--,(t=s.length)>4)return e;for(n=[],r=0;r<t;r++){if(""===(o=s[r]))return e;if(i=10,o.length>1&&"0"===z(o,0)&&(i=D(Q,o)?16:8,o=L(o,8===i?1:2)),""===o)a=0;else{if(!D(10===i?Z:8===i?X:ee,o))return e;a=B(o,i)}T(n,a)}for(r=0;r<t;r++)if(a=n[r],r===t-1){if(a>=P(256,5-t))return null}else if(a>255)return null;for(c=$(n),r=0;r<n.length;r++)c+=n[r]*P(256,3-r);return c}(e),null===t)return H;this.host=t}else{if(D(ne,e))return H;for(t="",n=m(e),r=0;r<n.length;r++)t+=de(n[r],ce);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"===this.scheme},includesCredentials:function(){return""!==this.username||""!==this.password},isSpecial:function(){return f(pe,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"===this.scheme&&1===t&&fe(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,n=e.username,r=e.password,o=e.host,i=e.port,a=e.path,c=e.query,s=e.fragment,l=t+":";return null!==o?(l+="//",e.includesCredentials()&&(l+=n+(r?":"+r:"")+"@"),l+=ae(o),null!==i&&(l+=":"+i)):"file"===t&&(l+="//"),l+=e.cannotBeABaseURL?a[0]:a.length?"/"+N(a,"/"):"",null!==c&&(l+="?"+c),null!==s&&(l+="#"+s),l},setHref:function(e){var t=this.parse(e);if(t)throw new O(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"===e)try{return new Te(e.path[0]).origin}catch(e){return"null"}return"file"!==e&&this.isSpecial()?e+"://"+ae(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(y(e)+":",ve)},getUsername:function(){return this.username},setUsername:function(e){var t=m(y(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var n=0;n<t.length;n++)this.username+=de(t[n],ue)}},getPassword:function(){return this.password},setPassword:function(e){var t=m(y(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var n=0;n<t.length;n++)this.password+=de(t[n],ue)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?ae(e):ae(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,Ee)},getHostname:function(){var e=this.host;return null===e?"":ae(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,Se)},getPort:function(){var e=this.port;return null===e?"":y(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""===(e=y(e))?this.port=null:this.parse(e,je))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+N(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,Pe))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""===(e=y(e))?this.query=null:("?"===z(e,0)&&(e=L(e,1)),this.query="",this.parse(e,Ne)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!==(e=y(e))?("#"===z(e,0)&&(e=L(e,1)),this.fragment="",this.parse(e,Re)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Te=function(e){var t=p(this,qe),n=C(arguments.length,1)>1?arguments[1]:void 0,r=x(t,new $e(e,!1,n));i||(t.href=r.serialize(),t.origin=r.getOrigin(),t.protocol=r.getProtocol(),t.username=r.getUsername(),t.password=r.getPassword(),t.host=r.getHost(),t.hostname=r.getHostname(),t.port=r.getPort(),t.pathname=r.getPathname(),t.search=r.getSearch(),t.searchParams=r.getSearchParams(),t.hash=r.getHash())},qe=Te.prototype,Ue=function(e,t){return{get:function(){return _(this)[e]()},set:t&&function(e){return _(this)[t](e)},configurable:!0,enumerable:!0}};if(i&&(d(qe,"href",Ue("serialize","setHref")),d(qe,"origin",Ue("getOrigin")),d(qe,"protocol",Ue("getProtocol","setProtocol")),d(qe,"username",Ue("getUsername","setUsername")),d(qe,"password",Ue("getPassword","setPassword")),d(qe,"host",Ue("getHost","setHost")),d(qe,"hostname",Ue("getHostname","setHostname")),d(qe,"port",Ue("getPort","setPort")),d(qe,"pathname",Ue("getPathname","setPathname")),d(qe,"search",Ue("getSearch","setSearch")),d(qe,"searchParams",Ue("getSearchParams")),d(qe,"hash",Ue("getHash","setHash"))),u(qe,"toJSON",(function(){return _(this).serialize()}),{enumerable:!0}),u(qe,"toString",(function(){return _(this).serialize()}),{enumerable:!0}),j){var Me=j.createObjectURL,Le=j.revokeObjectURL;Me&&u(Te,"createObjectURL",s(Me,j)),Le&&u(Te,"revokeObjectURL",s(Le,j))}g(Te,"URL"),o({global:!0,constructor:!0,forced:!a,sham:!i},{URL:Te})},4362:(e,t,n)=>{"use strict";n(2332)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0;var r={};return(()=>{"use strict";n.r(r),n.d(r,{renderIDE:()=>Oi,show:()=>Bi,version:()=>Ii});var e={};n.r(e),n.d(e,{BaseRetractingLabelInput:()=>fr,CookieForm:()=>Nr,Cookies:()=>Rr,I18nInput:()=>or,Input:()=>pr,LanguageSelect:()=>gr,PurposeOrder:()=>Xr,PurposeSelect:()=>Mr,Range:()=>Pr,RetractingLabelInput:()=>Ar,Select:()=>Cr,ServiceSelect:()=>Vr,Switch:()=>xr,ThemesSelect:()=>ro}),n(4776),n(9336),n(5021);var t,o,i,a,c,s,l,u,d={},p=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,A=Array.isArray;function m(e,t){for(var n in t)e[n]=t[n];return e}function v(e){var t=e.parentNode;t&&t.removeChild(e)}function h(e,n,r){var o,i,a,c={};for(a in n)"key"==a?o=n[a]:"ref"==a?i=n[a]:c[a]=n[a];if(arguments.length>2&&(c.children=arguments.length>3?t.call(arguments,2):r),"function"==typeof e&&null!=e.defaultProps)for(a in e.defaultProps)void 0===c[a]&&(c[a]=e.defaultProps[a]);return b(e,c,o,i,null)}function b(e,t,n,r,a){var c={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,constructor:void 0,__v:null==a?++i:a,__i:-1,__u:0};return null==a&&null!=o.vnode&&o.vnode(c),c}function y(e){return e.children}function g(e,t){this.props=e,this.context=t}function C(e,t){if(null==t)return e.__?C(e.__,e.__i+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?C(e):null}function k(e,t,n){var r,i=e.__v,a=i.__e,c=e.__P;if(c)return(r=m({},i)).__v=i.__v+1,o.vnode&&o.vnode(r),N(c,r,i,e.__n,void 0!==c.ownerSVGElement,32&i.__u?[a]:null,t,null==a?C(i):a,!!(32&i.__u),n),r.__v=i.__v,r.__.__k[r.__i]=r,r.__d=void 0,r.__e!=a&&w(r),r}function w(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return w(e)}}function x(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!_.__r++||c!==o.debounceRendering)&&((c=o.debounceRendering)||s)(_)}function _(){var e,t,n,r=[],i=[];for(a.sort(l);e=a.shift();)e.__d&&(n=a.length,t=k(e,r,i)||t,0===n||a.length>n?(R(r,t,i),i.length=r.length=0,t=void 0,a.sort(l)):t&&o.__c&&o.__c(t,p));t&&R(r,t,i),_.__r=0}function E(e,t,n,r,o,i,a,c,s,l,u){var f,A,m,v,h,b=r&&r.__k||p,y=t.length;for(n.__d=s,S(n,t,b),s=n.__d,f=0;f<y;f++)null!=(m=n.__k[f])&&"boolean"!=typeof m&&"function"!=typeof m&&(A=-1===m.__i?d:b[m.__i]||d,m.__i=f,N(e,m,A,o,i,a,c,s,l,u),v=m.__e,m.ref&&A.ref!=m.ref&&(A.ref&&T(A.ref,null,m),u.push(m.ref,m.__c||v,m)),null==h&&null!=v&&(h=v),65536&m.__u||A.__k===m.__k?s=j(m,s,e):"function"==typeof m.type&&void 0!==m.__d?s=m.__d:v&&(s=v.nextSibling),m.__d=void 0,m.__u&=-196609);n.__d=s,n.__e=h}function S(e,t,n){var r,o,i,a,c,s=t.length,l=n.length,u=l,d=0;for(e.__k=[],r=0;r<s;r++)a=r+d,null!=(o=e.__k[r]=null==(o=t[r])||"boolean"==typeof o||"function"==typeof o?null:"string"==typeof o||"number"==typeof o||"bigint"==typeof o||o.constructor==String?b(null,o,null,null,null):A(o)?b(y,{children:o},null,null,null):void 0===o.constructor&&o.__b>0?b(o.type,o.props,o.key,o.ref?o.ref:null,o.__v):o)?(o.__=e,o.__b=e.__b+1,c=B(o,n,a,u),o.__i=c,i=null,-1!==c&&(u--,(i=n[c])&&(i.__u|=131072)),null==i||null===i.__v?(-1==c&&d--,"function"!=typeof o.type&&(o.__u|=65536)):c!==a&&(c===a+1?d++:c>a?u>s-a?d+=c-a:d--:c<a?c==a-1&&(d=c-a):d=0,c!==r+d&&(o.__u|=65536))):(i=n[a])&&null==i.key&&i.__e&&0==(131072&i.__u)&&(i.__e==e.__d&&(e.__d=C(i)),q(i,i,!1),n[a]=null,u--);if(u)for(r=0;r<l;r++)null!=(i=n[r])&&0==(131072&i.__u)&&(i.__e==e.__d&&(e.__d=C(i)),q(i,i))}function j(e,t,n){var r,o;if("function"==typeof e.type){for(r=e.__k,o=0;r&&o<r.length;o++)r[o]&&(r[o].__=e,t=j(r[o],t,n));return t}e.__e!=t&&(n.insertBefore(e.__e,t||null),t=e.__e);do{t=t&&t.nextSibling}while(null!=t&&8===t.nodeType);return t}function O(e,t){return t=t||[],null==e||"boolean"==typeof e||(A(e)?e.some((function(e){O(e,t)})):t.push(e)),t}function B(e,t,n,r){var o=e.key,i=e.type,a=n-1,c=n+1,s=t[n];if(null===s||s&&o==s.key&&i===s.type&&0==(131072&s.__u))return n;if(r>(null!=s&&0==(131072&s.__u)?1:0))for(;a>=0||c<t.length;){if(a>=0){if((s=t[a])&&0==(131072&s.__u)&&o==s.key&&i===s.type)return a;a--}if(c<t.length){if((s=t[c])&&0==(131072&s.__u)&&o==s.key&&i===s.type)return c;c++}}return-1}function I(e,t,n){"-"===t[0]?e.setProperty(t,null==n?"":n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function P(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||I(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||I(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/(PointerCapture)$|Capture$/i,"$1")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r?n.u=r.u:(n.u=Date.now(),e.addEventListener(t,i?D:z,i)):e.removeEventListener(t,i?D:z,i);else{if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("width"!==t&&"height"!==t&&"href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&"rowSpan"!==t&&"colSpan"!==t&&"role"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null==n||!1===n&&"-"!==t[4]?e.removeAttribute(t):e.setAttribute(t,n))}}function z(e){if(this.l){var t=this.l[e.type+!1];if(e.t){if(e.t<=t.u)return}else e.t=Date.now();return t(o.event?o.event(e):e)}}function D(e){if(this.l)return this.l[e.type+!0](o.event?o.event(e):e)}function N(e,t,n,r,i,a,c,s,l,u){var d,p,f,v,h,b,C,k,w,x,_,S,j,O,B,I=t.type;if(void 0!==t.constructor)return null;128&n.__u&&(l=!!(32&n.__u),a=[s=t.__e=n.__e]),(d=o.__b)&&d(t);e:if("function"==typeof I)try{if(k=t.props,w=(d=I.contextType)&&r[d.__c],x=d?w?w.props.value:d.__:r,n.__c?C=(p=t.__c=n.__c).__=p.__E:("prototype"in I&&I.prototype.render?t.__c=p=new I(k,x):(t.__c=p=new g(k,x),p.constructor=I,p.render=U),w&&w.sub(p),p.props=k,p.state||(p.state={}),p.context=x,p.__n=r,f=p.__d=!0,p.__h=[],p._sb=[]),null==p.__s&&(p.__s=p.state),null!=I.getDerivedStateFromProps&&(p.__s==p.state&&(p.__s=m({},p.__s)),m(p.__s,I.getDerivedStateFromProps(k,p.__s))),v=p.props,h=p.state,p.__v=t,f)null==I.getDerivedStateFromProps&&null!=p.componentWillMount&&p.componentWillMount(),null!=p.componentDidMount&&p.__h.push(p.componentDidMount);else{if(null==I.getDerivedStateFromProps&&k!==v&&null!=p.componentWillReceiveProps&&p.componentWillReceiveProps(k,x),!p.__e&&(null!=p.shouldComponentUpdate&&!1===p.shouldComponentUpdate(k,p.__s,x)||t.__v===n.__v)){for(t.__v!==n.__v&&(p.props=k,p.state=p.__s,p.__d=!1),t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),_=0;_<p._sb.length;_++)p.__h.push(p._sb[_]);p._sb=[],p.__h.length&&c.push(p);break e}null!=p.componentWillUpdate&&p.componentWillUpdate(k,p.__s,x),null!=p.componentDidUpdate&&p.__h.push((function(){p.componentDidUpdate(v,h,b)}))}if(p.context=x,p.props=k,p.__P=e,p.__e=!1,S=o.__r,j=0,"prototype"in I&&I.prototype.render){for(p.state=p.__s,p.__d=!1,S&&S(t),d=p.render(p.props,p.state,p.context),O=0;O<p._sb.length;O++)p.__h.push(p._sb[O]);p._sb=[]}else do{p.__d=!1,S&&S(t),d=p.render(p.props,p.state,p.context),p.state=p.__s}while(p.__d&&++j<25);p.state=p.__s,null!=p.getChildContext&&(r=m(m({},r),p.getChildContext())),f||null==p.getSnapshotBeforeUpdate||(b=p.getSnapshotBeforeUpdate(v,h)),E(e,A(B=null!=d&&d.type===y&&null==d.key?d.props.children:d)?B:[B],t,n,r,i,a,c,s,l,u),p.base=t.__e,t.__u&=-161,p.__h.length&&c.push(p),C&&(p.__E=p.__=null)}catch(e){t.__v=null,l||null!=a?(t.__e=s,t.__u|=l?160:32,a[a.indexOf(s)]=null):(t.__e=n.__e,t.__k=n.__k),o.__e(e,t,n)}else null==a&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=$(n.__e,t,n,r,i,a,c,l,u);(d=o.diffed)&&d(t)}function R(e,t,n){for(var r=0;r<n.length;r++)T(n[r],n[++r],n[++r]);o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function $(e,n,r,o,i,a,c,s,l){var u,p,f,m,h,b,y,g=r.props,k=n.props,w=n.type;if("svg"===w&&(i=!0),null!=a)for(u=0;u<a.length;u++)if((h=a[u])&&"setAttribute"in h==!!w&&(w?h.localName===w:3===h.nodeType)){e=h,a[u]=null;break}if(null==e){if(null===w)return document.createTextNode(k);e=i?document.createElementNS("http://www.w3.org/2000/svg",w):document.createElement(w,k.is&&k),a=null,s=!1}if(null===w)g===k||s&&e.data===k||(e.data=k);else{if(a=a&&t.call(e.childNodes),g=r.props||d,!s&&null!=a)for(g={},u=0;u<e.attributes.length;u++)g[(h=e.attributes[u]).name]=h.value;for(u in g)h=g[u],"children"==u||("dangerouslySetInnerHTML"==u?f=h:"key"===u||u in k||P(e,u,null,h,i));for(u in k)h=k[u],"children"==u?m=h:"dangerouslySetInnerHTML"==u?p=h:"value"==u?b=h:"checked"==u?y=h:"key"===u||s&&"function"!=typeof h||g[u]===h||P(e,u,h,g[u],i);if(p)s||f&&(p.__html===f.__html||p.__html===e.innerHTML)||(e.innerHTML=p.__html),n.__k=[];else if(f&&(e.innerHTML=""),E(e,A(m)?m:[m],n,r,o,i&&"foreignObject"!==w,a,c,a?a[0]:r.__k&&C(r,0),s,l),null!=a)for(u=a.length;u--;)null!=a[u]&&v(a[u]);s||(u="value",void 0!==b&&(b!==e[u]||"progress"===w&&!b||"option"===w&&b!==g[u])&&P(e,u,b,g[u],!1),u="checked",void 0!==y&&y!==e[u]&&P(e,u,y,g[u],!1))}return e}function T(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function q(e,t,n){var r,i;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||T(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,t)}r.base=r.__P=null,e.__c=void 0}if(r=e.__k)for(i=0;i<r.length;i++)r[i]&&q(r[i],t,n||"function"!=typeof e.type);n||null==e.__e||v(e.__e),e.__=e.__e=e.__d=void 0}function U(e,t,n){return this.constructor(e,n)}function M(e,n,r){var i,a,c,s;o.__&&o.__(e,n),a=(i="function"==typeof r)?null:r&&r.__k||n.__k,c=[],s=[],N(n,e=(!i&&r||n).__k=h(y,null,[e]),a||d,d,void 0!==n.ownerSVGElement,!i&&r?[r]:a?null:n.firstChild?t.call(n.childNodes):null,c,!i&&r?r:a?a.__e:n.firstChild,i,s),e.__d=void 0,R(c,e,s)}function L(e,t){M(e,t,L)}function F(e,n,r){var o,i,a,c,s=m({},e.props);for(a in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),n)"key"==a?o=n[a]:"ref"==a?i=n[a]:s[a]=void 0===n[a]&&void 0!==c?c[a]:n[a];return arguments.length>2&&(s.children=arguments.length>3?t.call(arguments,2):r),b(e.type,s,o||e.key,i||e.ref,null)}t=p.slice,o={__e:function(e,t,n,r){for(var o,i,a;t=t.__;)if((o=t.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(e)),a=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),a=o.__d),a)return o.__E=o}catch(t){e=t}throw e}},i=0,g.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=m({},this.state),"function"==typeof e&&(e=e(m({},n),this.props)),e&&m(n,e),null!=e&&this.__v&&(t&&this._sb.push(t),x(this))},g.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),x(this))},g.prototype.render=y,a=[],s="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,l=function(e,t){return e.__v.__b-t.__v.__b},_.__r=0,u=0;var J,G,H,W,K=0,Y=[],V=[],Q=o,X=Q.__b,Z=Q.__r,ee=Q.diffed,te=Q.__c,ne=Q.unmount,re=Q.__;function oe(e,t){Q.__h&&Q.__h(G,e,K||t),K=0;var n=G.__H||(G.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({__V:V}),n.__[e]}function ie(e){return K=1,ae(he,e)}function ae(e,t,n){var r=oe(J++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):he(void 0,t),function(e){var t=r.__N?r.__N[0]:r.__[0],n=r.t(t,e);t!==n&&(r.__N=[n,r.__[1]],r.__c.setState({}))}],r.__c=G,!G.u)){var o=function(e,t,n){if(!r.__c.__H)return!0;var o=r.__c.__H.__.filter((function(e){return!!e.__c}));if(o.every((function(e){return!e.__N})))return!i||i.call(this,e,t,n);var a=!1;return o.forEach((function(e){if(e.__N){var t=e.__[0];e.__=e.__N,e.__N=void 0,t!==e.__[0]&&(a=!0)}})),!(!a&&r.__c.props===e)&&(!i||i.call(this,e,t,n))};G.u=!0;var i=G.shouldComponentUpdate,a=G.componentWillUpdate;G.componentWillUpdate=function(e,t,n){if(this.__e){var r=i;i=void 0,o(e,t,n),i=r}a&&a.call(this,e,t,n)},G.shouldComponentUpdate=o}return r.__N||r.__}function ce(e,t){var n=oe(J++,3);!Q.__s&&ve(n.__H,t)&&(n.__=e,n.i=t,G.__H.__h.push(n))}function se(e,t){var n=oe(J++,4);!Q.__s&&ve(n.__H,t)&&(n.__=e,n.i=t,G.__h.push(n))}function le(e){return K=5,ue((function(){return{current:e}}),[])}function ue(e,t){var n=oe(J++,7);return ve(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function de(){for(var e;e=Y.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(Ae),e.__H.__h.forEach(me),e.__H.__h=[]}catch(t){e.__H.__h=[],Q.__e(t,e.__v)}}Q.__b=function(e){G=null,X&&X(e)},Q.__=function(e,t){e&&t.__k&&t.__k.__m&&(e.__m=t.__k.__m),re&&re(e,t)},Q.__r=function(e){Z&&Z(e),J=0;var t=(G=e.__c).__H;t&&(H===G?(t.__h=[],G.__h=[],t.__.forEach((function(e){e.__N&&(e.__=e.__N),e.__V=V,e.__N=e.i=void 0}))):(t.__h.forEach(Ae),t.__h.forEach(me),t.__h=[],J=0)),H=G},Q.diffed=function(e){ee&&ee(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==Y.push(t)&&W===Q.requestAnimationFrame||((W=Q.requestAnimationFrame)||fe)(de)),t.__H.__.forEach((function(e){e.i&&(e.__H=e.i),e.__V!==V&&(e.__=e.__V),e.i=void 0,e.__V=V}))),H=G=null},Q.__c=function(e,t){t.some((function(e){try{e.__h.forEach(Ae),e.__h=e.__h.filter((function(e){return!e.__||me(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],Q.__e(n,e.__v)}})),te&&te(e,t)},Q.unmount=function(e){ne&&ne(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{Ae(e)}catch(e){t=e}})),n.__H=void 0,t&&Q.__e(t,n.__v))};var pe="function"==typeof requestAnimationFrame;function fe(e){var t,n=function(){clearTimeout(r),pe&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);pe&&(t=requestAnimationFrame(n))}function Ae(e){var t=G,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),G=t}function me(e){var t=G;e.__c=e.__(),G=t}function ve(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function he(e,t){return"function"==typeof t?t(e):t}function be(e,t){for(var n in t)e[n]=t[n];return e}function ye(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var r in t)if("__source"!==r&&e[r]!==t[r])return!0;return!1}function ge(e,t){this.props=e,this.context=t}(ge.prototype=new g).isPureReactComponent=!0,ge.prototype.shouldComponentUpdate=function(e,t){return ye(this.props,e)||ye(this.state,t)};var Ce=o.__b;o.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),Ce&&Ce(e)};var ke="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911,we=function(e,t){return null==e?null:O(O(e).map(t))},xe={map:we,forEach:we,count:function(e){return e?O(e).length:0},only:function(e){var t=O(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:O},_e=o.__e;o.__e=function(e,t,n,r){if(e.then)for(var o,i=t;i=i.__;)if((o=i.__c)&&o.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),o.__c(e,t);_e(e,t,n,r)};var Ee=o.unmount;function Se(e,t,n){return e&&(e.__c&&e.__c.__H&&(e.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),e.__c.__H=null),null!=(e=be({},e)).__c&&(e.__c.__P===n&&(e.__c.__P=t),e.__c=null),e.__k=e.__k&&e.__k.map((function(e){return Se(e,t,n)}))),e}function je(e,t,n){return e&&n&&(e.__v=null,e.__k=e.__k&&e.__k.map((function(e){return je(e,t,n)})),e.__c&&e.__c.__P===t&&(e.__e&&n.appendChild(e.__e),e.__c.__e=!0,e.__c.__P=n)),e}function Oe(){this.__u=0,this.t=null,this.__b=null}function Be(e){var t=e.__.__c;return t&&t.__a&&t.__a(e)}function Ie(){this.u=null,this.o=null}o.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&32&e.__u&&(e.type=null),Ee&&Ee(e)},(Oe.prototype=new g).__c=function(e,t){var n=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(n);var o=Be(r.__v),i=!1,a=function(){i||(i=!0,n.__R=null,o?o(c):c())};n.__R=a;var c=function(){if(! --r.__u){if(r.state.__a){var e=r.state.__a;r.__v.__k[0]=je(e,e.__c.__P,e.__c.__O)}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate()}};r.__u++||32&t.__u||r.setState({__a:r.__b=r.__v.__k[0]}),e.then(a,a)},Oe.prototype.componentWillUnmount=function(){this.t=[]},Oe.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=Se(this.__b,n,r.__O=r.__P)}this.__b=null}var o=t.__a&&h(y,null,e.fallback);return o&&(o.__u&=-33),[h(y,null,t.__a?null:e.children),o]};var Pe=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function ze(e){return this.getChildContext=function(){return e.context},e.children}function De(e){var t=this,n=e.i;t.componentWillUnmount=function(){M(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),M(h(ze,{context:t.context},e.__v),t.l)}(Ie.prototype=new g).__a=function(e){var t=this,n=Be(t.__v),r=t.o.get(e);return r[0]++,function(o){var i=function(){t.props.revealOrder?(r.push(o),Pe(t,e,r)):o()};n?n(i):i()}},Ie.prototype.render=function(e){this.u=null,this.o=new Map;var t=O(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},Ie.prototype.componentDidUpdate=Ie.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){Pe(e,n,t)}))};var Ne="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,Re=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,$e=/^on(Ani|Tra|Tou|BeforeInp|Compo)/,Te=/[A-Z0-9]/g,qe="undefined"!=typeof document,Ue=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/:/fil|che|ra/).test(e)};function Me(e,t,n){return null==t.__k&&(t.textContent=""),M(e,t),"function"==typeof n&&n(),e?e.__c:null}g.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(g.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var Le=o.event;function Fe(){}function Je(){return this.cancelBubble}function Ge(){return this.defaultPrevented}o.event=function(e){return Le&&(e=Le(e)),e.persist=Fe,e.isPropagationStopped=Je,e.isDefaultPrevented=Ge,e.nativeEvent=e};var He,We={enumerable:!1,configurable:!0,get:function(){return this.class}},Ke=o.vnode;o.vnode=function(e){"string"==typeof e.type&&function(e){var t=e.props,n=e.type,r={};for(var o in t){var i=t[o];if(!("value"===o&&"defaultValue"in t&&null==i||qe&&"children"===o&&"noscript"===n||"class"===o||"className"===o)){var a=o.toLowerCase();"defaultValue"===o&&"value"in t&&null==t.value?o="value":"download"===o&&!0===i?i="":"translate"===a&&"no"===i?i=!1:"ondoubleclick"===a?o="ondblclick":"onchange"!==a||"input"!==n&&"textarea"!==n||Ue(t.type)?"onfocus"===a?o="onfocusin":"onblur"===a?o="onfocusout":$e.test(o)?o=a:-1===n.indexOf("-")&&Re.test(o)?o=o.replace(Te,"-$&").toLowerCase():null===i&&(i=void 0):a=o="oninput","oninput"===a&&r[o=a]&&(o="oninputCapture"),r[o]=i}}"select"==n&&r.multiple&&Array.isArray(r.value)&&(r.value=O(t.children).forEach((function(e){e.props.selected=-1!=r.value.indexOf(e.props.value)}))),"select"==n&&null!=r.defaultValue&&(r.value=O(t.children).forEach((function(e){e.props.selected=r.multiple?-1!=r.defaultValue.indexOf(e.props.value):r.defaultValue==e.props.value}))),t.class&&!t.className?(r.class=t.class,Object.defineProperty(r,"className",We)):(t.className&&!t.class||t.class&&t.className)&&(r.class=r.className=t.className),e.props=r}(e),e.$$typeof=Ne,Ke&&Ke(e)};var Ye=o.__r;o.__r=function(e){Ye&&Ye(e),He=e.__c};var Ve=o.diffed;o.diffed=function(e){Ve&&Ve(e);var t=e.props,n=e.__e;null!=n&&"textarea"===e.type&&"value"in t&&t.value!==n.value&&(n.value=null==t.value?"":t.value),He=null};var Qe={ReactCurrentDispatcher:{current:{readContext:function(e){return He.__n[e.__c].props.value}}}};function Xe(e){return!!e&&e.$$typeof===Ne}function Ze(e){e()}function et(e){var t,n,r=e.v,o=e.__;try{var i=r();return!((t=o)===(n=i)&&(0!==t||1/t==1/n)||t!=t&&n!=n)}catch(e){return!0}}var tt={useState:ie,useId:function(){var e=oe(J++,11);if(!e.__){for(var t=G.__v;null!==t&&!t.__m&&null!==t.__;)t=t.__;var n=t.__m||(t.__m=[0,0]);e.__="P"+n[0]+"-"+n[1]++}return e.__},useReducer:ae,useEffect:ce,useLayoutEffect:se,useInsertionEffect:se,useTransition:function(){return[!1,Ze]},useDeferredValue:function(e){return e},useSyncExternalStore:function(e,t){var n=t(),r=ie({h:{__:n,v:t}}),o=r[0].h,i=r[1];return se((function(){o.__=n,o.v=t,et(o)&&i({h:o})}),[e,n,t]),ce((function(){return et(o)&&i({h:o}),e((function(){et(o)&&i({h:o})}))}),[e]),n},startTransition:Ze,useRef:le,useImperativeHandle:function(e,t,n){K=6,se((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))},useMemo:ue,useCallback:function(e,t){return K=8,ue((function(){return e}),t)},useContext:function(e){var t=G.context[e.__c],n=oe(J++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(G)),t.props.value):e.__},useDebugValue:function(e,t){Q.useDebugValue&&Q.useDebugValue(t?t(e):e)},version:"17.0.2",Children:xe,render:Me,hydrate:function(e,t,n){return L(e,t),"function"==typeof n&&n(),e?e.__c:null},unmountComponentAtNode:function(e){return!!e.__k&&(M(null,e),!0)},createPortal:function(e,t){var n=h(De,{__v:e,i:t});return n.containerInfo=t,n},createElement:h,createContext:function(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some((function(e){e.__e=!0,x(e)}))},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n},createFactory:function(e){return h.bind(null,e)},cloneElement:function(e){return Xe(e)?F.apply(null,arguments):e},createRef:function(){return{current:null}},Fragment:y,isValidElement:Xe,isElement:Xe,isFragment:function(e){return Xe(e)&&e.type===y},findDOMNode:function(e){return e&&(e.base||1===e.nodeType&&e)||null},Component:g,PureComponent:ge,memo:function(e,t){function n(e){var n=this.props.ref,r=n==e.ref;return!r&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!r:ye(this.props,e)}function r(t){return this.shouldComponentUpdate=n,h(e,t)}return r.displayName="Memo("+(e.displayName||e.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r},forwardRef:function(e){function t(t){var n=be({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=ke,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t},flushSync:function(e,t){return e(t)},unstable_batchedUpdates:function(e,t){return e(t)},StrictMode:y,Suspense:Oe,SuspenseList:Ie,lazy:function(e){var t,n,r;function o(o){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){r=e})),r)throw r;if(!n)throw t;return h(n,o)}return o.displayName="Lazy",o.__f=!0,o},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:Qe},nt=(n(9305),n(2733),n(4701),n(1678),n(4382),n(2084),n(9892),n(4962),n(6584),n(4754),n(1908),n(8551),n(94),n(6457),n(8908),n(3810),n(8557),n(3687),n(3994),n(3630),n(2367),n(6437),n(2697),n(1359),n(6216),n(6448),n(7089),n(2688)),rt=n.n(nt),ot=function(e){var t=e.t;return tt.createElement("svg",{role:"img","aria-label":t(["close"]),width:"12",height:"12",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},tt.createElement("title",null,t(["close"])),tt.createElement("line",{x1:"1",y1:"11",x2:"11",y2:"1",strokeWidth:"1"}),tt.createElement("line",{x1:"1",y1:"1",x2:"11",y2:"11",strokeWidth:"1"}))};function it(e){return e.split("-").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join(" ")}function at(e){return function(e){if(Array.isArray(e))return ct(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return ct(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ct(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ct(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function st(e){return st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},st(e)}ot.propTypes={t:rt().func},n(7575),n(646),n(987),n(3819);var lt=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o,i=st(n[0]);o=0===n.length?{}:"string"===i||"number"===i?Array.prototype.slice.call(n):n[0];for(var a=[],c=e.toString();c.length>0;){var s=c.match(/\{(?!\{)([\w\d]+)\}(?!\})/);if(null!==s){var l=c.substr(0,s.index);c=c.substr(s.index+s[0].length);var u=parseInt(s[1]);a.push(l),u!=u?a.push(o[s[1]]):a.push(o[u])}else a.push(c),c=""}return a};function ut(e,t,n){var r=t;Array.isArray(r)||(r=[r]);for(var o=e,i=0;i<r.length;i++){if(void 0===o)return n;if(void 0!==r[i]&&r[i].endsWith("?")){var a,c=r[i].slice(0,r[i].length-1);void 0!==(a=o instanceof Map?o.get(c):o[c])&&"string"==typeof a&&(o=a)}else o=o instanceof Map?o.get(r[i]):o[r[i]]}return void 0===o||"string"!=typeof o?n:""!==o?o:void 0}function dt(e,t,n,r){var o=r,i=!1;"!"===o[0]&&(o=o.slice(1),i=!0),Array.isArray(o)||(o=[o]);var a=ut(e,[t].concat(at(o)));if(void 0===a&&void 0!==n&&(a=ut(e,[n].concat(at(o)))),void 0===a){if(i)return;return["[missing translation: ".concat(t,"/").concat(o.join("/"),"]")]}for(var c=arguments.length,s=new Array(c>4?c-4:0),l=4;l<c;l++)s[l-4]=arguments[l];return s.length>0?lt.apply(void 0,[a].concat(s)):a}const pt=function(e){var t=e.text,n=e.config;if(t instanceof Array||(t=[t]),!0===n.htmlTexts){var r=!1;"<"===t[0][0]&&(r=!0);var o=t.map((function(e,t){return"string"==typeof e?tt.createElement("span",{key:t,dangerouslySetInnerHTML:{__html:e}}):e}));return r?tt.createElement(tt.Fragment,null,o):tt.createElement("span",null,o)}return tt.createElement("span",null,t)};function ft(e){return ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ft(e)}function At(){return At=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},At.apply(this,arguments)}function mt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,vt(r.key),r)}}function vt(e){var t=function(e,t){if("object"!=ft(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=ft(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==ft(t)?t:String(t)}function ht(e,t,n){return t=yt(t),function(e,t){if(t&&("object"===ft(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,bt()?Reflect.construct(t,n||[],yt(e).constructor):t.apply(e,n))}function bt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(bt=function(){return!!e})()}function yt(e){return yt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},yt(e)}function gt(e,t){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gt(e,t)}var Ct=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),ht(this,t,arguments)}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&gt(e,t)}(t,e),n=t,r=[{key:"render",value:function(){var e,t=this.props,n=t.checked,r=t.onlyRequiredEnabled,o=t.onToggle,i=t.name,a=t.lang,c=t.config,s=t.translations,l=t.title,u=t.description,d=t.visible,p=t.t,f=this.props.required||!1,A=this.props.optOut||!1,m=this.props.purposes||[],v="service-item-".concat(i),h="".concat(v,"-title"),b=m.map((function(e){return p(["!","purposes",e,"title?"])||it(e)})).join(", "),y=A?tt.createElement("span",{className:"cm-opt-out",title:p(["service","optOut","description"])},p(["service","optOut","title"])):"",g=f?tt.createElement("span",{className:"cm-required",title:p(["service","required","description"])},p(["service","required","title"])):"";m.length>0&&(e=tt.createElement("p",{className:"purposes"},p(["service",m.length>1?"purposes":"purpose"]),": ",b));var C=u||dt(s,a,"zz",["!","description"])||p(["!",i,"description?"]);return tt.createElement("div",null,tt.createElement("input",{id:v,className:"cm-list-input"+(f?" required":"")+(r?" half-checked only-required":""),"aria-labelledby":"".concat(h),"aria-describedby":"".concat(v,"-description"),disabled:f,checked:n||f,tabIndex:d?"0":"-1",type:"checkbox",onChange:function(e){o(e.target.checked)}}),tt.createElement("label",At({htmlFor:v,className:"cm-list-label"},f?{tabIndex:"0"}:{}),tt.createElement("span",{className:"cm-list-title",id:"".concat(h)},l||dt(s,a,"zz",["!","title"])||p(["!",i,"title?"])||it(i)),g,y,tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(v,"-description")},C&&tt.createElement("p",{className:"cm-list-description"},tt.createElement(pt,{config:c,text:C})),e))}}],r&&mt(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function kt(e){return kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kt(e)}function wt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,xt(r.key),r)}}function xt(e){var t=function(e,t){if("object"!=kt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=kt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==kt(t)?t:String(t)}function _t(e,t,n){return t=St(t),function(e,t){if(t&&("object"===kt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return jt(e)}(e,Et()?Reflect.construct(t,n||[],St(e).constructor):t.apply(e,n))}function Et(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Et=function(){return!!e})()}function St(e){return St=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},St(e)}function jt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ot(e,t){return Ot=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ot(e,t)}function Bt(){return Bt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bt.apply(this,arguments)}var It=function(e){var t=e.services,n=e.config,r=e.consents,o=e.lang,i=e.toggle,a=e.visible,c=e.t;return t.map((function(e){var t=r[e.name];return tt.createElement("li",{key:e.name,className:"cm-service"},tt.createElement(Ct,Bt({checked:t||e.required,onToggle:function(t){i([e],t)},config:n,lang:o,visible:a,t:c},e)))}))},Pt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=_t(this,t,[e]),e.manager.watch(jt(n)),n.state={consents:e.manager.consents},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ot(e,t)}(t,e),n=t,(r=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t,n){e===this.props.manager&&"consents"===t&&this.setState({consents:n})}},{key:"render",value:function(){var e=this.props,t=e.config,n=e.t,r=e.manager,o=e.lang,i=this.state.consents,a=t.services,c=function(e,t){e.map((function(e){e.required||r.updateConsent(e.name,t)}))},s=tt.createElement(It,{config:t,lang:o,services:a,t:n,consents:i,toggle:c}),l=a.filter((function(e){return!e.required})),u=l.filter((function(e){return i[e.name]})).length,d=a.filter((function(e){return e.required})).length,p=u===l.length;return a.filter((function(e){return e.required})).length,tt.createElement("ul",{className:"cm-services"},s,!t.hideToggleAll&&l.length>1&&tt.createElement("li",{className:"cm-service cm-toggle-all"},tt.createElement(Ct,{name:"disableAll",title:n(["service","disableAll","title"]),description:n(["service","disableAll","description"]),checked:p,config:t,onlyRequiredEnabled:!p&&d>0,onToggle:function(e){c(a,e)},lang:o,t:n})))}}])&&wt(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function zt(e){return zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zt(e)}function Dt(){return Dt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Dt.apply(this,arguments)}function Nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Rt(r.key),r)}}function Rt(e){var t=function(e,t){if("object"!=zt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=zt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==zt(t)?t:String(t)}function $t(e,t,n){return t=qt(t),function(e,t){if(t&&("object"===zt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Tt()?Reflect.construct(t,n||[],qt(e).constructor):t.apply(e,n))}function Tt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Tt=function(){return!!e})()}function qt(e){return qt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},qt(e)}function Ut(e,t){return Ut=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ut(e,t)}var Mt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=$t(this,t,[e])).state={servicesVisible:!1},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ut(e,t)}(t,e),n=t,r=[{key:"render",value:function(){var e,t=this,n=this.props,r=n.allEnabled,o=n.onlyRequiredEnabled,i=n.allDisabled,a=n.services,c=n.config,s=n.onToggle,l=n.name,u=n.lang,d=n.manager,p=n.consents,f=n.title,A=n.description,m=n.t,v=this.state.servicesVisible,h=this.props.required||!1,b=this.props.purposes||[],y="purpose-item-".concat(l),g="".concat(y,"-title"),C=b.map((function(e){return m(["!","purposes",e,"title?"])||it(e)})).join(", "),k=h?tt.createElement("span",{className:"cm-required",title:m(["!","service","required","description"])||""},m(["service","required","title"])):"";b.length>0&&(e=tt.createElement("p",{className:"purposes"},m(["purpose",b.length>1?"purposes":"purpose"]),": ",C));var w=function(e){e.preventDefault();var n="false"!==e.currentTarget.getAttribute("aria-expanded");e.currentTarget.setAttribute("aria-expanded",!n),t.setState({servicesVisible:!v})},x=tt.createElement(It,{config:c,lang:u,services:a,toggle:function(e,t){e.map((function(e){e.required||d.updateConsent(e.name,t)}))},consents:p,visible:v,t:m}),_=A||m(["!","purposes",l,"description"]);return tt.createElement(tt.Fragment,null,tt.createElement("input",{id:y,className:"cm-list-input"+(h?" required":"")+(r?"":o?" only-required":" half-checked"),"aria-labelledby":"".concat(g),"aria-describedby":"".concat(y,"-description"),disabled:h,checked:r||!i&&!o,type:"checkbox",onChange:function(e){s(e.target.checked)}}),tt.createElement("label",Dt({htmlFor:y,className:"cm-list-label"},h?{tabIndex:"0"}:{}),tt.createElement("span",{className:"cm-list-title",id:"".concat(g)},f||m(["!","purposes",l,"title?"])||it(l)),k,tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(y,"-description")},_&&tt.createElement("p",{className:"cm-list-description"},tt.createElement(pt,{config:c,text:_})),e),a.length>0&&tt.createElement("div",{className:"cm-services"},tt.createElement("div",{className:"cm-caret"},tt.createElement("a",{href:"#","aria-haspopup":"true","aria-expanded":"false",tabIndex:"0",onClick:w,onKeyDown:function(e){32===e.keyCode&&w(e)}},v&&tt.createElement("span",null,"↑")||tt.createElement("span",null,"↓")," ",a.length," ",m(["purposeItem",a.length>1?"services":"service"]))),tt.createElement("ul",{className:"cm-content"+(v?" expanded":"")},x)))}}],r&&Nt(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function Ft(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Jt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Jt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function Jt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Gt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ht(r.key),r)}}function Ht(e){var t=function(e,t){if("object"!=Lt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Lt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Lt(t)?t:String(t)}function Wt(e,t,n){return t=Yt(t),function(e,t){if(t&&("object"===Lt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Vt(e)}(e,Kt()?Reflect.construct(t,n||[],Yt(e).constructor):t.apply(e,n))}function Kt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Kt=function(){return!!e})()}function Yt(e){return Yt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Yt(e)}function Vt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Qt(e,t){return Qt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Qt(e,t)}var Xt=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=Wt(this,t,[e]),e.manager.watch(Vt(n)),n.state={consents:e.manager.consents},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Qt(e,t)}(t,e),n=t,r=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t,n){e===this.props.manager&&"consents"===t&&this.setState({consents:n})}},{key:"render",value:function(){var e,t=this.props,n=t.config,r=t.t,o=t.manager,i=t.lang,a=this.state.consents,c=n.services,s={},l=Ft(c);try{for(l.s();!(e=l.n()).done;){var u,d=e.value,p=Ft(d.purposes);try{for(p.s();!(u=p.n()).done;){var f=u.value;void 0===s[f]&&(s[f]=[]),s[f].push(d)}}catch(e){p.e(e)}finally{p.f()}}}catch(e){l.e(e)}finally{l.f()}var A=function(e,t){e.map((function(e){var n,r=Ft(s[e]);try{for(r.s();!(n=r.n()).done;){var i=n.value;i.required||o.updateConsent(i.name,t)}}catch(e){r.e(e)}finally{r.f()}}))},m=function(e){var t,n={allEnabled:!0,onlyRequiredEnabled:!0,allDisabled:!0,allRequired:!0},r=Ft(e);try{for(r.s();!(t=r.n()).done;){var o=t.value;o.required||(n.allRequired=!1),a[o.name]?(o.required||(n.onlyRequiredEnabled=!1),n.allDisabled=!1):o.required||(n.allEnabled=!1)}}catch(e){r.e(e)}finally{r.f()}return n.allDisabled&&(n.onlyRequiredEnabled=!1),n},v=n.purposeOrder||[],h=Object.keys(s).sort((function(e,t){return v.indexOf(e)-v.indexOf(t)})).map((function(e){var t=m(s[e]);return tt.createElement("li",{key:e,className:"cm-purpose"},tt.createElement(Mt,{allEnabled:t.allEnabled,allDisabled:t.allDisabled,onlyRequiredEnabled:t.onlyRequiredEnabled,required:t.allRequired,consents:a,name:e,config:n,lang:i,manager:o,onToggle:function(t){A([e],t)},services:s[e],t:r}))})),b=Object.keys(s).filter((function(e){var t,n=Ft(s[e]);try{for(n.s();!(t=n.n()).done;)if(!t.value.required)return!0}catch(e){n.e(e)}finally{n.f()}return!1})),y=m(c);return tt.createElement("ul",{className:"cm-purposes"},h,b.length>1&&tt.createElement("li",{className:"cm-purpose cm-toggle-all"},tt.createElement(Mt,{name:"disableAll",title:r(["service","disableAll","title"]),description:r(["service","disableAll","description"]),allDisabled:y.allDisabled,allEnabled:y.allEnabled,onlyRequiredEnabled:y.onlyRequiredEnabled,onToggle:function(e){A(Object.keys(s),e)},manager:o,consents:a,config:n,lang:i,services:[],t:r})))}}],r&&Gt(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function Zt(e){return Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Zt(e)}function en(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,tn(r.key),r)}}function tn(e){var t=function(e,t){if("object"!=Zt(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Zt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Zt(t)?t:String(t)}function nn(e,t,n){return t=on(t),function(e,t){if(t&&("object"===Zt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,rn()?Reflect.construct(t,n||[],on(e).constructor):t.apply(e,n))}function rn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(rn=function(){return!!e})()}function on(e){return on=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},on(e)}function an(e,t){return an=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},an(e,t)}var cn=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),nn(this,t,arguments)}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&an(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.consentModalRef&&this.consentModalRef.focus()}},{key:"render",value:function(){var e,t,n,r=this,o=this.props,i=o.hide,a=o.confirming,c=o.saveAndHide,s=o.acceptAndHide,l=o.declineAndHide,u=o.config,d=o.manager,p=o.lang,f=o.t,A=u.embedded,m=void 0===u.groupByPurpose||u.groupByPurpose;u.mustConsent||(e=tt.createElement("button",{title:f(["close"]),"aria-label":f(["close"]),className:"hide",type:"button",onClick:i,tabIndex:"0",ref:function(e){r.consentModalRef=e}},tt.createElement(ot,{t:f}))),u.hideDeclineAll||d.confirmed||(t=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-decline cm-btn-danger cn-decline",type:"button",onClick:l},f(["decline"])));var v,h,b,y=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-success cm-btn-info cm-btn-accept",type:"button",onClick:c},f([d.confirmed?"save":"acceptSelected"]));u.acceptAll&&!d.confirmed&&(n=tt.createElement("button",{disabled:a,className:"cm-btn cm-btn-success cm-btn-accept-all",type:"button",onClick:s},f(["acceptAll"]))),void 0!==u.privacyPolicy?"string"==typeof u.privacyPolicy?v=u.privacyPolicy:"object"===Zt(u.privacyPolicy)&&(v=u.privacyPolicy[p]||u.privacyPolicy.default):void 0!==(v=f(["!","privacyPolicyUrl"],{lang:p}))&&(v=v.join("")),void 0!==v&&(h=tt.createElement("a",{key:"ppLink",href:v,target:"_blank",rel:"noopener"},f(["privacyPolicy","name"]))),b=m?tt.createElement(Xt,{t:f,config:u,manager:d,lang:p}):tt.createElement(Pt,{t:f,config:u,manager:d,lang:p});var g=tt.createElement("div",{className:"cm-modal cm-klaro"},tt.createElement("div",{className:"cm-header"},e,tt.createElement("h1",{className:"title"},tt.createElement(pt,{config:u,text:f(["consentModal","title"])})),tt.createElement("p",null,tt.createElement(pt,{config:u,text:[f(["consentModal","description"])].concat(h&&[" "].concat(f(["privacyPolicy","text"],{privacyPolicy:h}))||[])}))),tt.createElement("div",{className:"cm-body"},b),tt.createElement("div",{className:"cm-footer"},tt.createElement("div",{className:"cm-footer-buttons"},t,y,n),!u.disablePoweredBy&&tt.createElement("p",{className:"cm-powered-by"},tt.createElement("a",{target:"_blank",href:u.poweredBy||"https://kiprotect.com/klaro",rel:"noopener"},f(["poweredBy"])))));return A?tt.createElement("div",{id:"cookieScreen",className:"cookie-modal cm-embedded"},g):tt.createElement("div",{id:"cookieScreen",className:"cookie-modal"},tt.createElement("div",{className:"cm-bg",onClick:i}),g)}}])&&en(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function sn(e){return sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sn(e)}function ln(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function un(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,hn(r.key),r)}}function dn(e,t,n){return t=fn(t),function(e,t){if(t&&("object"===sn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return An(e)}(e,pn()?Reflect.construct(t,n||[],fn(e).constructor):t.apply(e,n))}function pn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(pn=function(){return!!e})()}function fn(e){return fn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},fn(e)}function An(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mn(e,t){return mn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},mn(e,t)}function vn(e,t,n){return(t=hn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hn(e){var t=function(e,t){if("object"!=sn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=sn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==sn(t)?t:String(t)}n(2745);var bn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),vn(An(n=dn(this,t,[e])),"executeButtonClicked",(function(e,t,r){var o=n.state.modal,i=0;e&&(i=n.props.manager.changeAll(t));var a=n.props.manager.confirmed;if(n.props.manager.saveAndApplyConsents(r),e&&!a&&(o||n.props.config.mustConsent)){var c=function(){n.setState({confirming:!1}),n.props.hide()};n.setState({confirming:!0}),0===i?c():setTimeout(c,800)}else n.props.hide()})),vn(An(n),"saveAndHide",(function(){n.executeButtonClicked(!1,!1,"save")})),vn(An(n),"acceptAndHide",(function(){n.executeButtonClicked(!0,!0,"accept")})),vn(An(n),"declineAndHide",(function(){n.executeButtonClicked(!0,!1,"decline")})),n.state={modal:e.modal,confirming:!1},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&mn(e,t)}(t,e),n=t,r=[{key:"componentDidUpdate",value:function(e){e.modal!==this.props.modal&&this.setState({modal:this.props.modal}),this.noticeRef&&this.noticeRef.focus()}},{key:"render",value:function(){var e,t,n,r=this,o=this.props,i=o.lang,a=o.config,c=o.show,s=o.manager,l=o.testing,u=o.t,d=this.state,p=d.confirming,f=d.modal,A=a.embedded,m=a.noticeAsModal,v=a.hideLearnMore,h=a.purposeOrder||[],b=function(e){for(var t=new Set([]),n=0;n<e.services.length;n++)for(var r=e.services[n].purposes||[],o=0;o<r.length;o++)t.add(r[o]);return Array.from(t)}(a).filter((function(e){return"functional"!==e})).sort((function(e,t){return h.indexOf(e)-h.indexOf(t)})),y=b.map((function(e){return u(["!","purposes",e,"title?"])||it(e)}));t=1===y.length?y[0]:[].concat((n=y.slice(0,-2),function(e){if(Array.isArray(e))return ln(e)}(n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return ln(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ln(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[y.slice(-2).join(" & ")]).join(", "),void 0!==a.privacyPolicy?"string"==typeof a.privacyPolicy?e=a.privacyPolicy:"object"===sn(a.privacyPolicy)&&(e=a.privacyPolicy[i]||a.privacyPolicy.default):void 0!==(e=u(["!","privacyPolicyUrl"],{lang:i}))&&(e=e.join(""));var g,C=function(e){e.preventDefault(),r.setState({modal:!0})};if(s.changed&&(g=tt.createElement("p",{className:"cn-changes"},u(["consentNotice","changeDescription"]))),!c&&!l&&!p)return tt.createElement("div",null);var k,w=(!a.mustConsent||m)&&!s.confirmed&&!a.noNotice,x=a.hideDeclineAll?"":tt.createElement("button",{className:"cm-btn cm-btn-danger cn-decline",type:"button",onClick:this.declineAndHide},u(["decline"])),_=a.acceptAll?tt.createElement("button",{className:"cm-btn cm-btn-success",type:"button",onClick:this.acceptAndHide},u(["ok"])):tt.createElement("button",{className:"cm-btn cm-btn-success",type:"button",onClick:this.saveAndHide},u(["ok"])),E=function(){return m?tt.createElement("button",{key:"learnMoreLink",className:"cm-btn cm-btn-lern-more cm-btn-info",type:"button",onClick:C},u(["consentNotice","learnMore"])):tt.createElement("a",{key:"learnMoreLink",className:"cm-link cn-learn-more",href:"#",onClick:C},u(["consentNotice","learnMore"]))};if(void 0!==e&&(k=tt.createElement("a",{key:"ppLink",href:e},u(["privacyPolicy","name"]))),f||s.confirmed&&!l||!s.confirmed&&a.mustConsent)return tt.createElement(cn,{t:u,lang:i,config:a,hide:function(){a.mustConsent&&!a.acceptAll||(s.confirmed&&!l?r.props.hide():r.setState({modal:!1}),setTimeout((function(){r.noticeRef&&r.noticeRef.focus()}),1))},confirming:p,declineAndHide:this.declineAndHide,saveAndHide:this.saveAndHide,acceptAndHide:this.acceptAndHide,manager:s});var S=tt.createElement("div",{role:"dialog","aria-describedby":"id-cookie-notice","aria-labelledby":"id-cookie-title",id:"klaro-cookie-notice",tabIndex:"0",autoFocus:!0,ref:function(e){r.noticeRef=e},className:"cookie-notice ".concat(w||l?"":"cookie-notice-hidden"," ").concat(m?"cookie-modal-notice":""," ").concat(A?"cn-embedded":"")},tt.createElement("div",{className:"cn-body"},u(["!","consentNotice","title"])&&tt.createElement("h2",{id:"id-cookie-title"},u(["consentNotice","title"])),tt.createElement("p",{id:"id-cookie-notice"},tt.createElement(pt,{config:a,text:u(["consentNotice","description"],{purposes:tt.createElement("strong",{key:"strong"},t),privacyPolicy:k,learnMoreLink:E()})})),l&&tt.createElement("p",null,u(["consentNotice","testing"])),g,tt.createElement("div",{className:"cn-ok"},!v&&E(),tt.createElement("div",{className:"cn-buttons"},x,_))));return m?tt.createElement("div",{id:"cookieScreen",className:"cookie-modal"},tt.createElement("div",{className:"cm-bg"}),S):S}}],r&&un(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);function yn(e){return yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yn(e)}function gn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Cn(r.key),r)}}function Cn(e){var t=function(e,t){if("object"!=yn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=yn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==yn(t)?t:String(t)}function kn(e,t,n){return t=xn(t),function(e,t){if(t&&("object"===yn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _n(e)}(e,wn()?Reflect.construct(t,n||[],xn(e).constructor):t.apply(e,n))}function wn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(wn=function(){return!!e})()}function xn(e){return xn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},xn(e)}function _n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function En(e,t){return En=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},En(e,t)}var Sn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=kn(this,t,[e]),e.manager.watch(_n(n)),n.state={show:e.show>0||!e.manager.confirmed},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&En(e,t)}(t,e),n=t,(r=[{key:"componentWillUnmount",value:function(){this.props.manager.unwatch(this)}},{key:"update",value:function(e,t){e===this.props.manager&&"applyConsents"===t&&(!this.props.config.embedded&&this.props.manager.confirmed?this.setState({show:!1}):this.forceUpdate())}},{key:"notifyApi",value:function(){var e=this.props,t=e.api,n=e.modal,r=e.show,o=e.config;if(void 0!==t){if(n||r>0)return;this.props.manager.confirmed||this.props.manager.auxiliaryStore.getWithKey("shown-before")||(t.update(this,"showNotice",{config:o}),this.props.manager.auxiliaryStore.setWithKey("shown-before",!0))}}},{key:"componentDidMount",value:function(){this.notifyApi()}},{key:"componentDidUpdate",value:function(e){if(e.show!==this.props.show){this.notifyApi();var t=this.props.show>0||!this.props.manager.confirmed;t!==this.state.show&&this.setState({show:t})}}},{key:"render",value:function(){var e=this,t=this.props,n=t.config,r=t.t,o=t.lang,i=t.testing,a=t.manager,c=t.modal,s=this.state.show,l=n.additionalClass,u=n.embedded,d=n.stylePrefix;return tt.createElement("div",{lang:o,className:(d||"klaro")+(void 0!==l?" "+l:"")},tt.createElement(bn,{key:"app-"+this.props.show,t:r,testing:i,show:s,lang:o,modal:c,hide:function(){u||e.setState({show:!1})},config:n,manager:a}))}}])&&gn(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component),jn=n(2690);n(76),n(7132),n(4062);var On=n(5482);function Bn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||In(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function In(e,t){if(e){if("string"==typeof e)return Pn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pn(e,t):void 0}}function Pn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Dn(e){for(var t=new Map([]),n=0,r=Object.keys(e);n<r.length;n++){var o=r[n],i=e[o];"string"==typeof o&&("string"==typeof i||null===i?t.set(o,i):t.set(o,Dn(i)))}return t}function Nn(e,t,n,r){var o=function(e,t,n){if(n instanceof Map){var r=new Map([]);Nn(r,n,!0,!1),e.set(t,r)}else e.set(t,n)};if(!(t instanceof Map&&e instanceof Map))throw new Error("Parameters are not maps!");void 0===n&&(n=!0),void 0===r&&(r=!1),r&&(e=new e.constructor(e));var i,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return zn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zn(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}(t.keys());try{for(a.s();!(i=a.n()).done;){var c=i.value,s=t.get(c),l=e.get(c);if(e.has(c))if(s instanceof Map&&l instanceof Map)e.set(c,Nn(l,s,n,r));else{if(!n)continue;o(e,c,s)}else o(e,c,s)}}catch(e){a.e(e)}finally{a.f()}return e}var Rn={top:{_meta:{incompatibleWith:["bottom"]},"notice-top":"20px","notice-bottom":"auto"},bottom:{_meta:{incompatibleWith:["top"]},"notice-bottom":"20px","notice-top":"auto"},left:{_meta:{incompatibleWith:["wide"]},"notice-left":"20px","notice-right":"auto"},right:{_meta:{incompatibleWith:["wide"]},"notice-right":"20px","notice-left":"auto"},wide:{"notice-left":"20px","notice-right":"auto","notice-max-width":"calc(100vw - 60px)","notice-position":"fixed"},light:{"button-text-color":"#fff",dark1:"#fafafa",dark2:"#777",dark3:"#555",light1:"#444",light2:"#666",light3:"#111",green3:"#f00"}},$n=n(5292),Tn=n.n($n),qn=n(9893),Un=n.n(qn),Mn=n(9383),Ln=n.n(Mn),Fn=n(6884),Jn=n.n(Fn),Gn=n(9088),Hn=n.n(Gn),Wn=n(7997),Kn=n.n(Wn),Yn=n(679),Vn={};function Qn(e){return Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qn(e)}function Xn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Zn(r.key),r)}}function Zn(e){var t=function(e,t){if("object"!=Qn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Qn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Qn(t)?t:String(t)}function er(e,t,n){return t=nr(t),function(e,t){if(t&&("object"===Qn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,tr()?Reflect.construct(t,n||[],nr(e).constructor):t.apply(e,n))}function tr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(tr=function(){return!!e})()}function nr(e){return nr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},nr(e)}function rr(e,t){return rr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},rr(e,t)}Vn.styleTagTransform=Kn(),Vn.setAttributes=Jn(),Vn.insert=Ln().bind(null,"head"),Vn.domAPI=Un(),Vn.insertStyleElement=Hn(),Tn()(Yn.A,Vn),Yn.A&&Yn.A.locals&&Yn.A.locals,new Map([]);var or=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),er(this,t,arguments)}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&rr(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return tt.createElement("div",null)}}])&&Xn(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component),ir=["value","onChange"],ar=["name","children","className","value","label","description","onChange"],cr=["t","field","children","prefix","config","className","updateConfig"];function sr(e){return function(e){if(Array.isArray(e))return lr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return lr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?lr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function lr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ur(){return ur=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ur.apply(this,arguments)}function dr(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var pr=function(e){var t=e.value,n=e.onChange,r=dr(e,ir);return tt.createElement("input",ur({className:"cm-input",onChange:function(e){return n(e.target.value)},value:t},r))},fr=function(e){var t=e.name,n=e.children,r=e.className,o=e.value,i=e.label,a=e.description,c=e.onChange,s=dr(e,ar);return tt.createElement("div",{className:"cm-retracting-label-input"+(r?" "+r:"")},tt.createElement(pr,ur({"aria-labelledby":t+"-label"},s,{value:o,onChange:c,className:"cm-input",placeholder:" "})),tt.createElement("span",{id:t+"-label","aria-hidden":"true",className:"cm-label"},i),tt.createElement("p",{className:"cm-description"},a),n)},Ar=function(e){var t=e.t,n=e.field,r=e.children,o=e.prefix,i=e.config,a=e.className,c=e.updateConfig,s=dr(e,cr);return tt.createElement(fr,ur({description:t(["fields"].concat(sr(o||[]),[n.name,"description"])),value:i[n.name]||"",label:t(["fields"].concat(sr(o||[]),[n.name,"label"]))},s,{className:a,name:n.name,onChange:function(e){return c([n.name],e)},children:r}))};Ar.propTypes={className:""},Ar.propTypes={className:rt().string},n(6281),n(9425),n(7456);var mr=function(e){var t,n=e.search,r=e.disabled,o=e.label,i=e.description,a=e.onSelect,c=e.setSearch,s=e.candidates,l=s.slice(0,10).map((function(e){return tt.createElement("li",{onClick:function(){return a(e)},key:e.name,className:"cm-candidate"},e.value,e.description&&tt.createElement("p",null,e.description))}));return s.length>10&&l.push(tt.createElement("li",{key:"hasMore",className:"cm-candidate"},"...")),l.length>0&&(t=tt.createElement("ul",{className:"cm-candidates"},l)),tt.createElement("div",{className:"cm-search-select"},tt.createElement("form",{onSubmit:function(e){e.preventDefault(),a()}},tt.createElement("fieldset",{disabled:r},tt.createElement(fr,{onChange:c,label:o,disabled:r,description:i,autoComplete:"off",value:n},t))))};function vr(e){return function(e){if(Array.isArray(e))return yr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||br(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||br(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function br(e,t){if(e){if("string"==typeof e)return yr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yr(e,t):void 0}}function yr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gr=function(e){var t=e.field,n=e.disabled,r=e.config,o=e.prefix,i=e.t,a=e.updateConfig,c=hr(ie(""),2),s=c[0],l=c[1],u=i.tv.languages,d=function(){return Array.from(Object.entries(u)).filter((function(e){var n=hr(e,1)[0];return!r[t.name].includes(n)})).map((function(e){var t=hr(e,2),n=t[0],r=t[1];return{name:n,value:"".concat(r.en," - ").concat(r[n]," (").concat(n,")")}}))},p=hr(ie(d()),2),f=p[0],A=p[1],m=hr(ie(!1),2),v=m[0],h=m[1],b=new Set(r[t.name]),y=r[t.name].map((function(e){return tt.createElement("li",{key:e},e,": ",i(["languages",e])," ",tt.createElement("a",{onClick:function(){a([t.name],r[t.name].filter((function(t){return t!==e}))),h(!0)}},"⤬"))}));return ce((function(){v&&(A(d()),h(!1))})),tt.createElement("div",{className:"cm-language-select"},tt.createElement("ul",{className:"cm-languages"},y),tt.createElement(mr,{disabled:n,search:s,onSelect:function(e){r[t.name].find((function(t){return t===e.name}))||(r[t.name].push(e.name),a([t.name],r[t.name])),l(""),h(!0)},setSearch:function(e){var t=Array.from(Object.entries(u)).filter((function(e){var t=hr(e,2),n=t[0],r=t[1];return!b.has(n)&&(r[n].toLowerCase().includes(s.toLowerCase())||r.en.toLowerCase().includes(s.toLowerCase()))})),n=t.map((function(e){return{name:e[0],value:"".concat(e[1].en," - ").concat(e[1][e[0]]," (").concat(e[0],")")}}));n.length>10&&(n=[]),A(n),l(e)},candidates:f,label:i(["fields"].concat(vr(o||[]),[t.name,"label"])),description:i(["fields"].concat(vr(o||[]),[t.name,"description"]))}))},Cr=function(e){var t=e.t,n=e.field,r=e.config,o=e.updateConfig,i=n.choices.map((function(e){return tt.createElement("option",{key:e,value:e},t(["fields",n.name,"title"]),": ",t(["fields",n.name,e]))}));return tt.createElement("div",{className:"cm-select"},tt.createElement("select",{value:r[n.name],onChange:function(e){return o([n.name],e.target.value)}},i),tt.createElement("p",{className:"cm-description"},t(["fields",n.name,"description"])))};function kr(e){return function(e){if(Array.isArray(e))return wr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return wr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?wr(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var xr=function(e){var t=e.t,n=e.field,r=e.prefix,o=e.config,i=e.updateConfig,a=n.name,c=o[a];return tt.createElement("div",{className:"cm-switch-container"},tt.createElement("input",{id:"fields-"+a,className:"cm-list-input","aria-describedby":"".concat(a,"-description"),checked:c,type:"checkbox",onChange:function(e){return i([a],e.target.checked)}}),tt.createElement("label",{htmlFor:"fields-"+a,className:"cm-list-label"},tt.createElement("span",{className:"cm-list-title"},t(["fields"].concat(kr(r||[]),[a,"label"]))),tt.createElement("span",{className:"cm-switch"},tt.createElement("div",{className:"slider round active"}))),tt.createElement("div",{id:"".concat(a,"-description")},tt.createElement("p",{className:"cm-list-description"},t(["fields"].concat(kr(r||[]),[a,"description"])))))};function _r(e){return _r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_r(e)}function Er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Sr(r.key),r)}}function Sr(e){var t=function(e,t){if("object"!=_r(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=_r(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==_r(t)?t:String(t)}function jr(e,t,n){return t=Br(t),function(e,t){if(t&&("object"===_r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Or()?Reflect.construct(t,n||[],Br(e).constructor):t.apply(e,n))}function Or(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Or=function(){return!!e})()}function Br(e){return Br=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Br(e)}function Ir(e,t){return Ir=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ir(e,t)}var Pr=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),jr(this,t,arguments)}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ir(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return tt.createElement("div",null)}}])&&Er(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component),zr=["t","field","config","className","updateConfig"];function Dr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Nr=function(e){var t=e.updateConfig,n=e.config,r=e.cookie,o=e.t,i=function(e,o){var i;t(["services",n._id,"cookies",r._id].concat(function(e){if(Array.isArray(e))return Dr(e)}(i=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||function(e,t){if(e){if("string"==typeof e)return Dr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dr(e,t):void 0}}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o)},a=["pattern","path","domain"].map((function(e){return tt.createElement(Ar,{key:e,t:o,field:{name:e},config:r,prefix:["cookies"],updateConfig:i})}));return tt.createElement("div",{className:"cm-cookie-form"},tt.createElement("fieldset",null,a),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("div",{className:"cm-control"}),tt.createElement("button",{className:"cm-control-button cm-delete",onClick:function(){return t(["services",n._id,"cookies",r._id],null)}},o(["cookies","delete"]))))},Rr=function(e){var t=e.t,n=(e.field,e.config),r=(e.className,e.updateConfig),o=(function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}}(e,zr),n.cookies.map((function(e){return tt.createElement(Nr,{t,config:n,key:e._id,cookie:e,updateConfig:r})})));return 0===o.length&&(o=tt.createElement("p",{className:"cm-no-cookies"},t(["cookies","noCookies"]))),tt.createElement("div",{className:"cm-cookie-config"},tt.createElement("h3",null,t(["cookies","title"])),tt.createElement("div",{className:"cm-cookie-forms"},o),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement("button",{className:"cm-control-button",onClick:function(){return r(["services",n._id,"cookies",null],{})}},t(["cookies","add"])))))};function $r(e){return function(e){if(Array.isArray(e))return Ur(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||qr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||qr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function qr(e,t){if(e){if("string"==typeof e)return Ur(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ur(e,t):void 0}}function Ur(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Mr=function(e){var t=e.field,n=e.disabled,r=e.prefix,o=e.config,i=e.t,a=e.updateConfig,c=Tr(ie(""),2),s=c[0],l=c[1],u=Tr(ie(!1),2),d=u[0],p=u[1],f=i.tv.purposes,A=new Set(o[t.name]),m=function(){return Array.from(Object.entries(f)).filter((function(e){var t=Tr(e,1)[0];return!A.has(t)})).map((function(e){var t=Tr(e,2),n=t[0],r=t[1];return{name:n,description:i(["purposes",n,"description"]),value:"en"===i.lang?"".concat(r.title.en):"".concat(r.title.en," - ").concat(i(["purposes",n,"title"]))}}))},v=Tr(ie(m()),2),h=v[0],b=v[1],y=o[t.name].map((function(e){return tt.createElement("li",{key:e},e," ",tt.createElement("a",{onClick:function(){p(!0),a([t.name],o[t.name].filter((function(t){return t!==e})))}},"⤬"))}));return ce((function(){d&&(b(m()),p(!1))})),tt.createElement("div",{className:"cm-purpose-select"},tt.createElement("ul",{className:"cm-purposes"},y),tt.createElement(mr,{disabled:n,search:s,onSelect:function(e){o[t.name].find((function(t){return t===e.name}))||(o[t.name].push(e.name),a([t.name],o[t.name])),l(""),p(!0)},setSearch:function(e){var t=Array.from(Object.entries(f)).filter((function(t){var n=Tr(t,2),r=n[0];return n[1],!A.has(r)&&(""===e||r.toLowerCase().includes(s.toLowerCase())||i(["purposes",r,"title"]).toLowerCase().includes(s.toLowerCase()))})),n=t.map((function(e){return{name:e[0],description:i(["purposes",e[0],"description"]),value:"".concat(e[1].title.en," - ").concat(i(["purposes",e[0],"title"]))}}));n.length>10&&(n=[]),""!==e&&n.push({name:e,description:i(["purpose","descriptionNotice"]),value:"".concat(e," (").concat(i(["purpose","add"]),")")}),b(n),l(e)},candidates:h,label:i(["fields"].concat($r(r||[]),[t.name,"label"])),description:i(["fields"].concat($r(r||[]),[t.name,"description"]))}))};function Lr(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Fr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Fr(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function Fr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Jr(e,t,n){var r=e[t];if(void 0!==r){var o,i=Lr(n);try{for(i.s();!(o=i.n()).done;){var a=o.value;if(void 0===r)return;r=r[a]}}catch(e){i.e(e)}finally{i.f()}return r}}function Gr(e,t,n){var r,o=e,i=Lr(n);try{for(i.s();!(r=i.n()).done;){var a=r.value;if(void 0===o)break;o=o[a]}}catch(e){i.e(e)}finally{i.f()}return void 0!==o&&(o=o[t]),o}function Hr(e){return function(e){if(Array.isArray(e))return Yr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Kr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||Kr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kr(e,t){if(e){if("string"==typeof e)return Yr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yr(e,t):void 0}}function Yr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Vr=function(e){var t=e.field,n=e.services,r=e.prefix,o=(e.config,e.t),i=e.updateConfig,a=Wr(ie(""),2),c=a[0],s=a[1],l=Wr(ie(!1),2),u=l[0],d=l[1],p=function(e){return Jr(e.spec.translations||{},o.lang,["title"])||Jr(e.spec.translations||{},"zz",["title"])||it(e.name)},f=function(e){return e.sort((function(e,t){return p(e)>p(t)?1:-1})).map((function(e){return{service:e,name:e.name,value:p(e)}}))},A=Wr(ie(f(n)),2),m=A[0],v=A[1];return ce((function(){u&&(v(f(n)),d(!1))})),tt.createElement("div",{className:"cm-service-select"},tt.createElement(mr,{search:c,onSelect:function(e){if(void 0===e){if(!(""!==e&&m.length>0))return;e=m[0]}i(["services",null],e.service.spec),s(""),d(!0)},setSearch:function(e){var t,r=f((t=e)?n.filter((function(e){return p(e).toLowerCase().includes(t.toLowerCase())})):n);""!==e&&r.unshift({name:e,service:{spec:{name:e,cookies:[],purposes:[],requests:[],version:1}},value:"".concat(e," (").concat(o(["fields","services","addNew"]),")")}),v(r),s(e)},candidates:m,label:o(["fields"].concat(Hr(r||[]),[t.name,"label"])),description:o(["fields"].concat(Hr(r||[]),[t.name,"description"]))}))};function Qr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Xr=function(e){var t=e.t,n=e.config,r=e.updateConfig,o=new Set,i=n.purposeOrder||[];n.services.forEach((function(e){return e.purposes.forEach((function(e){return o.add(e)}))}));var a=Array.from(o.values()).sort((function(e,t){return i.indexOf(e)-i.indexOf(t)}));o.forEach((function(e){-1===i.indexOf(e)&&i.push(e)}));var c=function(e,t){var n,o=i.indexOf(e),a=function(e){if(Array.isArray(e))return Qr(e)}(n=i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return Qr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qr(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(!(0===o&&-1===t||o===i.length-1&&1===t)){var c=a[o+t];a[o+t]=e,a[o]=c,r(["purposeOrder"],a)}},s=a.map((function(e){var r=Jr(n.translations,t.lang,["purposes",e,"title"]),o=Gr(t.tv,t.lang,["purposes",e,"title"]);return tt.createElement("li",{key:e},tt.createElement("span",{className:"cm-buttons"},tt.createElement("a",{className:"cm-btn",onClick:function(){return c(e,-1)}},"↑"),tt.createElement("a",{className:"cm-btn",onClick:function(){return c(e,1)}},"↓")),tt.createElement("span",{className:"cm-value"},r||o||e))}));return tt.createElement("div",{className:"cm-purpose-order"},tt.createElement("h3",null,t(["purposeOrder","title"])),tt.createElement("p",{className:"cm-description"},t(["purposeOrder","description"])),tt.createElement("ul",null,s))};function Zr(e){return function(e){if(Array.isArray(e))return no(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||to(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function eo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||to(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function to(e,t){if(e){if("string"==typeof e)return no(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?no(e,t):void 0}}function no(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ro=function(e){var t=e.field,n=e.disabled,r=e.prefix,o=e.config,i=e.t,a=e.updateConfig,c=eo(ie(""),2),s=c[0],l=c[1],u=eo(ie(!1),2),d=u[0],p=u[1],f=i.tv.themes,A=new Set(o[t.name]||[]),m=function(){return Array.from(Object.entries(f)).filter((function(e){var t=eo(e,1)[0];return!A.has(t)})).map((function(e){var t=eo(e,2),n=t[0],r=t[1];return{name:n,description:i(["themes",n,"description"]),value:"en"===i.lang?"".concat(r.title.en):"".concat(r.title.en," - ").concat(i(["themes",n,"title"]))}}))},v=eo(ie(m()),2),h=v[0],b=v[1],y=Array.from(A).map((function(e){return tt.createElement("li",{key:e},e," ",tt.createElement("a",{onClick:function(){p(!0),a([t.name],o[t.name].filter((function(t){return t!==e})))}},"⤬"))}));return ce((function(){d&&(b(m()),p(!1))})),tt.createElement("div",{className:"cm-theme-select"},tt.createElement("ul",{className:"cm-themes"},y),tt.createElement(mr,{disabled:n,search:s,onSelect:function(e){var n=o[t.name]||[];n.find((function(t){return t===e.name}))||(n.push(e.name),a([t.name],n)),l(""),p(!0)},setSearch:function(e){var t=Array.from(Object.entries(f)).filter((function(t){var n=eo(t,2),r=n[0];return n[1],!A.has(r)&&(""===e||r.toLowerCase().includes(s.toLowerCase())||i(["themes",r,"title"]).toLowerCase().includes(s.toLowerCase()))})),n=t.map((function(e){return{name:e[0],description:i(["themes",e[0],"description"]),value:"".concat(i(["themes",e[0],"title"]))}}));n.length>10&&(n=n.slice(0,10)),b(n),l(e)},candidates:h,label:i(["fields"].concat(Zr(r||[]),[t.name,"label"])),description:i(["fields"].concat(Zr(r||[]),[t.name,"description"]))}))},oo=n(4452),io=n.n(oo),ao=function(e){var t=e.className,n=e.children;return tt.createElement("div",{className:io()("cm-list",t)},n)},co=function(e){var t=e.children;return tt.createElement("div",{className:"cm-item cm-is-header"},t)},so=function(e){var t=e.children,n=e.size,r=void 0===n?"md":n;return tt.createElement("div",{className:"cm-col cm-is-".concat(r)},t)},lo=function(e){var t=e.children,n=e.isCard,r=void 0===n||n,o=e.onClick;return tt.createElement("div",{className:io()("cm-item",{"cm-is-card":r,"cm-is-clickable":o}),onClick:function(e){return o()}},t)};function uo(e){return uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},uo(e)}function po(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,bo(r.key),r)}}function fo(e,t,n){return t=mo(t),function(e,t){if(t&&("object"===uo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return vo(e)}(e,Ao()?Reflect.construct(t,n||[],mo(e).constructor):t.apply(e,n))}function Ao(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Ao=function(){return!!e})()}function mo(e){return mo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},mo(e)}function vo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ho(e,t){return ho=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ho(e,t)}function bo(e){var t=function(e,t){if("object"!=uo(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=uo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==uo(t)?t:String(t)}lo.propTypes={children:rt().node,isCard:rt().bool,onClick:rt().func};var yo=function(e){var t=e.children;return tt.createElement(Co,{title:tt.createElement("span",{className:"cm-icon"},"…")},tt.createElement("ul",{className:"cm-dropdownmenu"},t))};yo.propTypes={children:rt().node};var go=function(e){var t=e.icon,n=e.children,r=e.onClick;return tt.createElement("li",null,tt.createElement("a",{onClick:function(e){e.preventDefault(),e.stopPropagation(),r()}},t&&tt.createElement("span",{className:"cm-icon"},t),tt.createElement("span",null,n)))};go.propTypes={children:rt().node,icon:rt().string,onClick:rt().func.isRequired};var Co=function(e){function t(e){var n,r,o,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=vo(n=fo(this,t,[e])),i=function(e){var t=n.state.expanded;e.preventDefault(),e.stopPropagation(),t?n.hide():n.show()},(o=bo(o="handleToggle"))in r?Object.defineProperty(r,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[o]=i,n.state={expanded:!1,right:!1},n.ref=tt.createRef(),n.handler=function(e){return n.handleClick(e)},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ho(e,t)}(t,e),n=t,r=[{key:"hide",value:function(){this.setState({expanded:!1}),document.removeEventListener("click",this.handler,!1)}},{key:"show",value:function(){this.setState({expanded:!0}),document.addEventListener("click",this.handler,!1)}},{key:"handleClick",value:function(e){e.preventDefault(),e.stopPropagation(),this.hide()}},{key:"componentWillUnmount",value:function(){this.hide()}},{key:"componentDidMount",value:function(){this.ref.current.getBoundingClientRect().left>.5*window.innerWidth&&this.setState({right:!0})}},{key:"render",value:function(){var e=this.state,t=e.expanded,n=e.right,r=this.props,o=r.title,i=r.children;return tt.createElement("div",{ref:this.ref,className:io()("cm-dropdown",{"is-right":n})},tt.createElement("button",{"aria-expanded":t,type:"button",tabIndex:"0",onClick:this.handleToggle},o),tt.createElement("div",{className:io()("cm-dropdowncontent",{"cm-dropdownexpanded":t})},i))}}],r&&po(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component);Co.propTypes={children:rt().node,title:rt().node.isRequired};const ko={cookieConfig:[{name:"pattern",control:"RetractingLabelInput",validators:[]},{name:"path",control:"RetractingLabelInput",validators:[]},{name:"domain",control:"RetractingLabelInput",validators:[]}],serviceConfig:[{name:"name",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"purposes",control:"PurposeSelect",validators:[],default:"klaro"},{name:"default",control:"Switch",validators:[],default:!0},{name:"required",control:"Switch",validators:[],default:!1},{control:"Switch",validators:[],default:!1},{name:"optOut",control:"Switch",validators:[],default:!1},{name:"onlyOnce",control:"Switch",default:!1,validators:[]},{name:"cookies",control:"Cookies",validators:[]}],styling:[{name:"theme",control:"ThemesSelect",validators:[],default:[]}],globals:[{name:"languages",control:"LanguageSelect",validators:[],default:""},{name:"elementID",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"additionalClass",control:"RetractingLabelInput",validators:[],default:""},{name:"storageMethod",control:"Select",choices:["cookie","localStorage"],validators:[],default:"cookie"},{name:"storageName",control:"RetractingLabelInput",validators:[],default:"klaro"},{name:"cookieDomain",applicable:function(e){return"cookie"===e.storageMethod},control:"RetractingLabelInput",validators:[],default:""},{name:"cookiePath",applicable:function(e){return"cookie"===e.storageMethod},control:"RetractingLabelInput",validators:[],default:""},{name:"htmlTexts",control:"Switch",validators:[],default:!1},{name:"embedded",control:"Switch",validators:[],default:!1},{name:"groupByPurpose",control:"Switch",validators:[],default:!0},{name:"cookieExpiresAfterDays",applicable:function(e){return"cookie"===e.storageMethod},control:"Range",controlProps:{min:0,max:356},validators:[],default:60},{name:"privacyPolicy",control:"I18nInput",validators:[],controlProps:{default:!0}},{name:"default",control:"Switch",validators:[],default:!1},{name:"mustConsent",control:"Switch",validators:[],default:!1},{name:"acceptAll",control:"Switch",validators:[],default:!0},{name:"hideDeclineAll",control:"Switch",validators:[],default:!1},{name:"hideLearnMore",control:"Switch",validators:[],default:!1},{name:"hideToggleAll",control:"Switch",validators:[],default:!1},{name:"noticeAsModal",control:"Switch",validators:[],default:!1},{name:"disablePoweredBy",control:"Switch",validators:[],default:!1},{name:"purposeOrder",control:"PurposeOrder",validators:[],default:[]}],groups:{}};function wo(e){return wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wo(e)}function xo(e,t,n){return t=function(e){var t=function(e,t){if("object"!=wo(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=wo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==wo(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _o(){return _o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_o.apply(this,arguments)}function Eo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var So=function(e){var t=e.t,n=e.service,r=e.onClick,o=e.updateConfig;return tt.createElement(lo,{onClick:function(){return r(n)},isCard:!0,key:n._id},tt.createElement(so,{size:"md"},tt.createElement("p",{className:"cm-name"},n.name)),tt.createElement(so,{size:"icon"},tt.createElement(yo,null,tt.createElement(go,{onClick:function(){return o(["services",n._id],null)}},t(["services","delete"])))))},jo=function(e){var t=e.t,n=e.config,r=(e.disabled,e.onClick),o=e.updateConfig,i=n.services.map((function(e){return tt.createElement(So,{key:e._id,updateConfig:o,onClick:r,t,service:e})}));return tt.createElement(tt.Fragment,null,i.length>0&&tt.createElement(ao,{className:"cm-service-list"},tt.createElement(co,null,tt.createElement(so,{size:"md"},t(["services","name"])),tt.createElement(so,{size:"icon"},t(["menu"]))),i)||tt.createElement("p",{className:"cm-no-services"},t(["services","noServices"])))},Oo=function(e){var t=e.t,n=e.setState,r=e.service,o=e.updateServiceName,i=e.updateConfig;return void 0===r?tt.createElement("div",null):tt.createElement("div",{className:"cm-service-details"},tt.createElement(Bo,{setState:n,service:r,updateServiceName:o,t,updateConfig:i}))},Bo=function(t){var n=t.service,r=t.setState,o=t.updateServiceName,i=t.disabled,a=t.updateConfig,c=t.t,s=ko.serviceConfig.map((function(t){var r=e[t.control];return tt.createElement(r,_o(xo(xo({disabled:i,key:t.name,prefix:["services"],updateConfig:function(e,t){var r;a(["services",n._id].concat(function(e){if(Array.isArray(e))return Eo(e)}(r=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Eo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Eo(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),t),"name"===e[0]&&o(t)},config:n,t:c},"key",t.name),"field",t),t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("fieldset",{className:"cm-service-fields",disabled:i},tt.createElement("h2",null,tt.createElement("a",{onClick:function(){r({service:void 0})}},c(["services","title"])," ›")," ",n.name),s))};function Io(e){return Io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Io(e)}function Po(e,t,n){return t=function(e){var t=function(e,t){if("object"!=Io(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Io(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Io(t)?t:String(t)}(t),t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zo(){return zo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zo.apply(this,arguments)}const Do={ca:{acceptAll:"Accepta-les totes",acceptSelected:"Accepta les escollides",service:{disableAll:{description:"Useu aquest botó per a habilitar o deshabilitar totes les aplicacions.",title:"Habilita/deshabilita totes les aplicacions"},optOut:{description:"Aquesta aplicació es carrega per defecte, però podeu desactivar-la",title:"(opt-out)"},purpose:"Finalitat",purposes:"Finalitats",required:{description:"Aquesta aplicació es necessita sempre",title:"(necessària)"}},close:"Tanca",consentModal:{description:"Aquí podeu veure i personalitzar la informació que recopilem sobre vós.",privacyPolicy:{name:"política de privadesa",text:"Per a més informació, consulteu la nostra {privacyPolicy}."},title:"Informació que recopilem"},consentNotice:{changeDescription:"Hi ha hagut canvis des de la vostra darrera visita. Actualitzeu el vostre consentiment.",description:"Recopilem i processem la vostra informació personal amb les següents finalitats: {purposes}.",imprint:{name:"Empremta"},learnMore:"Saber-ne més",privacyPolicy:{name:"política de privadesa"}},decline:"Rebutja",ok:"Accepta",poweredBy:"Funciona amb Klaro!",purposeItem:{service:"aplicació",services:"aplicacions"},save:"Desa"},cs:{privacyPolicy:{name:"zásady ochrany soukromí",text:'Pro další informace si přečtete naše <tr-hint v="privacy policy">{privacyPolicy}</tr-hint>.'},consentModal:{title:"Služby, které bychom rádi využili",description:"Zde můžete posoudit a přizpůsobit služby, které bychom rádi na tomto webu používali. Máte to pod kontrolou! Povolte nebo zakažte služby, jak uznáte za vhodné."},consentNotice:{testing:"Testing mode!",changeDescription:"Od vaší poslední návštěvy došlo ke změnám, obnovte prosím svůj souhlas.",description:"„Dobrý den! Můžeme povolit některé další služby pro {purposes}? Svůj souhlas můžete kdykoliv změnit nebo odvolat.“","learnMore|capitalize":"Vyberu si"},účely:{functional:{"title|capitalize":"Poskytování služeb",description:"Tyto služby jsou nezbytné pro správné fungování tohoto webu. Nelze je zde deaktivovat, protože služba by jinak nefungovala správně.\n"},performance:{"title|capitalize":"Optimalizace výkonu",description:"V rámci těchto služeb jsou zpracovávány osobní údaje za účelem optimalizace služeb, které jsou na tomto webu poskytovány.\n"},marketing:{"title|capitalize":"Marketing",description:"V rámci těchto služeb jsou zpracovávány osobní údaje, aby se vám zobrazoval relevantní obsah o produktech, službách nebo tématech, které by vás mohly zajímat."},advertising:{"title|capitalize":"Reklama",description:"V rámci těchto služeb jsou zpracovávány osobní údaje, aby vám zobrazovaly personalizované nebo zájmově orientované reklamy."}},purposeItem:{service:"Jednoduchá služba <tr-snip></tr-snip> , kterou nainstaluji do svého počítače.",services:"Několik jednoduchých služeb <tr-snip></tr-snip> , které nainstaluji do svého počítače."},"ok|capitalize":"To je v pořádku",save:"uložit","decline|capitalize":"Nepřijímám",close:"zavřít",acceptAll:"přijmout vše",acceptSelected:"přijmout vybrané",service:{disableAll:{title:"povolit nebo zakázat všechny služby",description:"Pomocí tohoto přepínače můžete povolit nebo zakázat všechny služby."},optOut:{title:"(opt-out)",description:"Tato služba se načítá ve výchozím nastavení (ale můžete ji zrušit)"},required:{title:"(vždy vyžadováno)",description:"Tato služba je vždy vyžadována"},purposes:"Zpracování  pro účely <tr-snip></tr-snip>",purpose:"Zpracování pro účely <tr-snip></tr-snip>"},poweredBy:"Realizováno pomocí Klaro!",contextualConsent:{description:"Chcete načíst externí obsah dodávaný prostřednictvím {title}?",acceptOnce:"Ano",acceptAlways:"Vždy"}},da:{acceptAll:"Tillad alle",acceptSelected:"Tillad udvalgte",service:{disableAll:{description:"Brug denne kontakt til at aktivere/deaktivere alle apps.",title:"Aktiver/deaktiver alle applikatione"},optOut:{description:"Denne applikation indlæses som standard (men du kan deaktivere den)",title:"Opt-Out"},purpose:"Formål",purposes:"Formål",required:{description:"Denne applikation er altid nødvendig",title:"(Altid nødvendig)"}},close:"Luk",consentModal:{description:"Her kan du se og ændre, hvilke informationer vi gemmer om dig.",privacyPolicy:{name:"Flere informationer finde du under {privacyPolicy}",text:"databeskyttelseserklæring."},title:"Informationer, som vi gemmer"},consentNotice:{changeDescription:"Der har været ændringer siden dit sidste besøg. Opdater dit valg.",description:"Vi gemmer og behandler dine personlige oplysninger til følgende formål: {purposes}.",imprint:{name:""},learnMore:"Læs mere",privacyPolicy:{name:"Datenschutzerklärung"}},decline:"Afvis",ok:"Ok",poweredBy:"Realiseret med Klaro!",purposeItem:{service:"",services:""},save:"Gem"},de:{acceptAll:"Alle akzeptieren",acceptSelected:"Ausgewählte akzeptieren",close:"Schließen",consentModal:{description:"Hier können Sie die Dienste, die wir auf dieser Website nutzen möchten, bewerten und anpassen. Sie haben das Sagen! Aktivieren oder deaktivieren Sie die Dienste, wie Sie es für richtig halten.",privacyPolicy:{name:"Datenschutzerklärung",text:"Um mehr zu erfahren, lesen Sie bitte unsere {privacyPolicy}."},title:"Dienste, die wir nutzen möchten"},consentNotice:{changeDescription:"Seit Ihrem letzten Besuch gab es Änderungen, bitte erneuern Sie Ihre Zustimmung.",title:"Cookie-Einstellungen",description:"Hallo! Könnten wir bitte einige zusätzliche Dienste für {purposes} aktivieren? Sie können Ihre Zustimmung später jederzeit ändern oder zurückziehen.",imprint:{name:"Impressum"},learnMore:"Lassen Sie mich wählen",privacyPolicy:{name:"Datenschutzerklärung"},testing:"Testmodus!"},contextualConsent:{acceptAlways:"Immer",acceptOnce:"Ja",description:"Möchten Sie von {title} bereitgestellte externe Inhalte laden?",descriptionEmptyStore:"Um diesem Dienst dauerhaft zustimmen zu können, müssen Sie {title} in den {link} zustimmen.",modalLinkText:"Cookie-Einstellungen"},decline:"Ich lehne ab",ok:"Das ist ok",poweredBy:"Realisiert mit Klaro!",privacyPolicy:{name:"Datenschutzerklärung",text:"Um mehr zu erfahren, lesen Sie bitte unsere {privacyPolicy}."},purposeItem:{service:"Dienst",services:"Dienste"},purposes:{advertising:{description:"Diese Dienste verarbeiten persönliche Informationen, um Ihnen personalisierte oder interessenbezogene Werbung zu zeigen.",title:"Werbung"},functional:{description:"Diese Dienste sind für die korrekte Funktion dieser Website unerlässlich. Sie können sie hier nicht deaktivieren, da der Dienst sonst nicht richtig funktionieren würde.\n",title:"Dienstbereitstellung"},marketing:{description:"Diese Dienste verarbeiten persönliche Daten, um Ihnen relevante Inhalte über Produkte, Dienstleistungen oder Themen zu zeigen, die Sie interessieren könnten.",title:"Marketing"},performance:{description:"Diese Dienste verarbeiten personenbezogene Daten, um den von dieser Website angebotenen Service zu optimieren.\n",title:"Optimierung der Leistung"}},save:"Speichern",service:{disableAll:{description:"Mit diesem Schalter können Sie alle Dienste aktivieren oder deaktivieren.",title:"Alle Dienste aktivieren oder deaktivieren"},optOut:{description:"Diese Dienste werden standardmäßig geladen (Sie können sich jedoch abmelden)",title:"(Opt-out)"},purpose:"Zweck",purposes:"Zwecke",required:{description:"Dieser Service ist immer erforderlich",title:"(immer erforderlich)"}}},el:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Χρησιμοποίησε αυτό τον διακόπτη για να ενεργοποιήσεις/απενεργοποιήσεις όλες τις εφαρμογές.",title:"Για όλες τις εφαρμογές"},optOut:{description:"Είναι προκαθορισμένο να φορτώνεται, άλλα μπορεί να παραληφθεί",title:"(μη απαιτούμενο)"},purpose:"Σκοπός",purposes:"Σκοποί",required:{description:"Δεν γίνεται να λειτουργήσει σωστά η εφαρμογή χωρίς αυτό",title:"(απαιτούμενο)"}},close:"Κλείσιμο",consentModal:{description:"Εδώ μπορείς να δεις και να ρυθμίσεις τις πληροφορίες που συλλέγουμε σχετικά με εσένα.",privacyPolicy:{name:"Πολιτική Απορρήτου",text:"Για περισσότερες πληροφορίες, παρακαλώ διαβάστε την {privacyPolicy}."},title:"Πληροφορίες που συλλέγουμε"},consentNotice:{changeDescription:"Πραγματοποιήθηκαν αλλαγές μετά την τελευταία σας επίσκεψη παρακαλούμε ανανεώστε την συγκατάθεση σας.",description:"Συγκεντρώνουμε και επεξεργαζόμαστε τα προσωπικά δεδομένα σας για τους παρακάτω λόγους: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Περισσότερα",privacyPolicy:{name:"Πολιτική Απορρήτου"}},decline:"Απόρριπτω",ok:"OK",poweredBy:"Υποστηρίζεται από το Klaro!",purposeItem:{service:"",services:""},save:"Αποθήκευση"},en:{acceptAll:"Accept all",acceptSelected:"Accept selected",close:"Close",consentModal:{description:"Here you can assess and customize the services that we'd like to use on this website. You're in charge! Enable or disable services as you see fit.",title:"Services we would like to use"},consentNotice:{changeDescription:"There were changes since your last visit, please renew your consent.",title:"Cookie Consent",description:"Hi! Could we please enable some additional services for {purposes}? You can always change or withdraw your consent later.",learnMore:"Let me choose",testing:"Testing mode!"},contextualConsent:{acceptAlways:"Always",acceptOnce:"Yes",description:"Do you want to load external content supplied by {title}?",descriptionEmptyStore:"To agree to this service permanently, you must accept {title} in the {link}.",modalLinkText:"Consent Manager"},decline:"I decline",ok:"That's ok",poweredBy:"Realized with Klaro!",privacyPolicy:{name:"privacy policy",text:"To learn more, please read our {privacyPolicy}."},purposeItem:{service:"service",services:"services"},purposes:{advertising:{description:"These services process personal information to show you personalized or interest-based advertisements.",title:"Advertising"},functional:{description:"These services are essential for the correct functioning of this website. You cannot disable them here as the service would not work correctly otherwise.\n",title:"Service Provision"},marketing:{description:"These services process personal information to show you relevant content about products, services or topics that you might be interested in.",title:"Marketing"},performance:{description:"These services process personal information to optimize the service that this website offers.\n",title:"Performance Optimization"}},save:"Save",service:{disableAll:{description:"Use this switch to enable or disable all services.",title:"Enable or disable all services"},optOut:{description:"This services is loaded by default (but you can opt out)",title:"(opt-out)"},purpose:"purpose",purposes:"purposes",required:{description:"This services is always required",title:"(always required)"}}},zh:{acceptAll:"照单全收",acceptSelected:"接受选择",close:"密切",consentModal:{description:"在这里，您可以评估和定制我们希望在本网站上使用的服务。您是负责人！您可以根据自己的需要启用或禁用服务。启用或禁用您认为合适的服务。",privacyPolicy:{name:"隐私政策",text:"要了解更多，请阅读我们的{privacyPolicy} 。"},title:"我们想使用的服务"},consentNotice:{changeDescription:"自上次访问后有变化，请更新您的同意。",description:"你好！我们可以为{purposes} 启用一些额外的服务吗？您可以随时更改或撤回您的同意。",imprint:{name:"印记"},learnMore:"让我来选",privacyPolicy:{name:"隐私政策"},testing:"测试模式！"},contextualConsent:{acceptAlways:"总是",acceptOnce:"是的，是的",description:"你想加载由{title} 提供的外部内容吗？"},decline:"我拒绝",ok:"没事的",poweredBy:"与Klaro一起实现!",privacyPolicy:{name:"隐私政策",text:"要了解更多，请阅读我们的{privacyPolicy} 。"},purposeItem:{service:"服务",services:"服务"},purposes:{advertising:{description:"这些服务处理个人信息，向您展示个性化或基于兴趣的广告。",title:"广告宣传"},functional:{description:"这些服务对于本网站的正常运行是必不可少的。您不能在这里禁用它们，否则服务将无法正常运行。\n",title:"服务提供"},marketing:{description:"这些服务会处理个人信息，向您展示您可能感兴趣的产品、服务或主题的相关内容。",title:"市场营销"},performance:{description:"这些服务处理个人信息是为了优化本网站提供的服务。\n",title:"性能优化"}},save:"挽救",service:{disableAll:{description:"使用此开关可启用或禁用所有服务。",title:"启用或停用所有服务"},optOut:{description:"这个服务是默认加载的(但你可以选择退出)",title:"(选择退出)"},purpose:"目的",purposes:"目的",required:{description:"这种服务是必须的",title:"(总是需要)"}}},pt:{acceptAll:"Aceitar todos",acceptSelected:"Aceitar selecionados",close:"Fechar",consentModal:{description:"Aqui você pode avaliar e personalizar os serviços que gostaríamos de usar neste website. Você está no comando! Habilite ou desabilite os serviços como julgar conveniente.",privacyPolicy:{name:"política de privacidade",text:"Para saber mais, por favor, leia nossa {privacyPolicy}."},title:"Serviços que gostaríamos de utilizar"},consentNotice:{changeDescription:"Houve mudanças desde sua última visita, queira renovar seu consentimento.",description:"Olá! Poderíamos, por favor, habilitar alguns serviços adicionais para {purposes}? Você pode sempre mudar ou retirar seu consentimento mais tarde.",imprint:{name:"imprimir"},learnMore:"Deixe-me escolher",privacyPolicy:{name:"política de privacidade"},testing:"Modo de teste!"},contextualConsent:{acceptAlways:"Sempre",acceptOnce:"Sim",description:"Você deseja carregar conteúdo externo fornecido por {title}?"},decline:"Recusar",ok:"Aceito.",poweredBy:"Realizado com Klaro!",privacyPolicy:{name:"política de privacidade",text:"Para saber mais, por favor, leia nossa {privacyPolicy}."},purposeItem:{service:"serviço",services:"serviços"},purposes:{advertising:{description:"Esses serviços processam informações pessoais para mostrar a você anúncios personalizados ou baseados em interesses.",title:"Publicidade"},functional:{description:"Esses serviços são essenciais para o correto funcionamento deste website. Você não pode desativá-los aqui, pois de outra forma o serviço não funcionaria corretamente.\n",title:"Prestação de serviços"},marketing:{description:"Esses serviços processam informações pessoais para mostrar a você conteúdo relevante sobre produtos, serviços ou tópicos que possam ser do seu interesse.",title:"Marketing"},performance:{description:"Esses serviços processam informações pessoais para otimizar o serviço que este website oferece.\n",title:"Otimização do desempenho"}},save:"Salvar",service:{disableAll:{description:"Use essa chave para habilitar ou desabilitar todos os serviços.",title:"Habilitar ou desabilitar todos os serviços"},optOut:{description:"Estes serviços são carregados por padrão (mas o você pode optar por não participar).",title:"(opt-out)"},purpose:"Objetivo",purposes:"Objetivos",required:{description:"Esses serviços são sempre necessários",title:"(sempre necessário)"}}},es:{acceptAll:"Aceptar todas",acceptSelected:"Aceptar seleccionadas",close:"Cerrar",consentModal:{description:"Aquí puede evaluar y personalizar los servicios que nos gustaría utilizar en este sitio web. ¡Usted decide! Habilite o deshabilite los servicios como considere oportuno.",privacyPolicy:{name:"política de privacidad",text:"Para saber más, por favor lea nuestra {privacyPolicy}."},title:"Servicios que nos gustaría utilizar"},consentNotice:{changeDescription:"Ha habido cambios en las cookies desde su última visita. Debe renovar su consentimiento.",description:"¡Hola! ¿Podríamos habilitar algunos servicios adicionales para {purposes}? Siempre podrá cambiar o retirar su consentimiento más tarde.",imprint:{name:"Imprimir"},learnMore:"Quiero elegir",privacyPolicy:{name:"política de privacidad"},testing:"¡Modo de prueba!"},contextualConsent:{acceptAlways:"Siempre",acceptOnce:"Sí",description:"¿Quieres cargar el contenido externo suministrado por {title}?"},decline:"Descartar todas",ok:"De acuerdo",poweredBy:"¡Realizado con Klaro!",privacyPolicy:{name:"política de privacidad",text:"Para saber más, por favor lea nuestra {privacyPolicy}."},purposeItem:{service:"servicio",services:"servicios"},purposes:{advertising:{description:"Estos servicios procesan información personal para mostrarle anuncios personalizados o basados en intereses.",title:"Publicidad"},functional:{description:"Estos servicios son esenciales para el correcto funcionamiento de este sitio web. No puede desactivarlos ya que la página no funcionaría correctamente.",title:"Prestación de servicios"},marketing:{description:"Estos servicios procesan información personal para mostrarle contenido relevante sobre productos, servicios o temas que puedan interesarle.",title:"Marketing"},performance:{description:"Estos servicios procesan información personal para optimizar el servicio que ofrece este sitio.",title:"Optimización del rendimiento"}},save:"Guardar",service:{disableAll:{description:"Utilice este interruptor para activar o desactivar todos los servicios.",title:"Activar o desactivar todos los servicios"},optOut:{description:"Este servicio está habilitado por defecto (pero puede optar por lo contrario)",title:"(desactivar)"},purpose:"Finalidad",purposes:"Finalidades",required:{description:"Este servicio es necesario siempre",title:"(siempre requerido)"}}},fi:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Aktivoi kaikki päälle/pois.",title:"Valitse kaikki"},optOut:{description:"Ladataan oletuksena (mutta voit ottaa sen pois päältä)",title:"(ladataan oletuksena)"},purpose:"Käyttötarkoitus",purposes:"Käyttötarkoitukset",required:{description:"Sivusto vaatii tämän aina",title:"(vaaditaan)"}},close:"Sulje",consentModal:{description:"Voit tarkastella ja muokata sinusta keräämiämme tietoja.",privacyPolicy:{name:"tietosuojasivultamme",text:"Voit lukea lisätietoja {privacyPolicy}."},title:"Keräämämme tiedot"},consentNotice:{changeDescription:"Olemme tehneet muutoksia ehtoihin viime vierailusi jälkeen, tarkista ehdot.",description:"Keräämme ja käsittelemme henkilötietoja seuraaviin tarkoituksiin: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Lue lisää",privacyPolicy:{name:"tietosuojasivultamme"}},decline:"Hylkää",ok:"Hyväksy",poweredBy:"Palvelun tarjoaa Klaro!",purposeItem:{service:"",services:""},save:"Tallenna"},fr:{acceptAll:"Accepter tout",acceptSelected:"Accepter sélectionné",close:"Fermer",consentModal:{description:"Vous pouvez ici évaluer et personnaliser les services que nous aimerions utiliser sur ce site. C'est vous qui décidez ! Activez ou désactivez les services comme bon vous semble.",privacyPolicy:{name:"politique de confidentialité",text:"Pour en savoir plus, veuillez lire notre {privacyPolicy}."},title:"Services que nous souhaitons utiliser"},consentNotice:{changeDescription:"Il y a eu des changements depuis votre dernière visite, veuillez renouveler votre consentement.",description:"Bonjour ! Pourrions-nous activer des services supplémentaires pour {purposes}? Vous pouvez toujours modifier ou retirer votre consentement plus tard.",imprint:{name:"mentions légales"},learnMore:"Laissez-moi choisir",privacyPolicy:{name:"politique de confidentialité"},testing:"Mode test !"},contextualConsent:{acceptAlways:"Toujours",acceptOnce:"Oui",description:"Vous souhaitez charger un contenu externe fourni par {title}?"},decline:"Je refuse",ok:"C'est bon.",poweredBy:"Réalisé avec Klaro !",privacyPolicy:{name:"politique de confidentialité",text:"Pour en savoir plus, veuillez lire notre {privacyPolicy}."},purposeItem:{service:"service",services:"services"},purposes:{advertising:{description:"Ces services traitent les informations personnelles pour vous présenter des publicités personnalisées ou basées sur des intérêts.",title:"Publicité"},functional:{description:"Ces services sont essentiels au bon fonctionnement de ce site. Vous ne pouvez pas les désactiver ici car le service ne fonctionnerait pas correctement autrement.\n",title:"Prestation de services"},marketing:{description:"Ces services traitent les informations personnelles afin de vous présenter un contenu pertinent sur les produits, les services ou les sujets qui pourraient vous intéresser.",title:"Marketing"},performance:{description:"Ces services traitent les informations personnelles afin d'optimiser le service que ce site Web offre.\n",title:"Optimisation de la performance"}},save:"Enregistrer",service:{disableAll:{description:"Utilisez ce commutateur pour activer ou désactiver tous les services.",title:"Activer ou désactiver tous les services"},optOut:{description:"Ce service est chargé par défaut (mais vous pouvez le désactiver)",title:"(opt-out)"},purpose:"Objet",purposes:"Fins",required:{description:"Ce service est toujours nécessaire",title:"(toujours requis)"}}},gl:{acceptAll:"Aceptar todas",acceptSelected:"Aceptar seleccionadas",close:"Pechar",consentModal:{description:"Aquí pode avaliar e personalizar os servizos que nos gustaría utilizar neste sitio web. ¡Vostede decide! Habilite ou deshabilite os servicios como lle conveña.",privacyPolicy:{name:"política de privacidade",text:"Para saber máis, por favor lea a nosa {privacyPolicy}."},title:"Servizos que nos gustaría utilizar"},consentNotice:{changeDescription:"Houbo cambios nas cookies dende a súa última visita. Debe renovar o seu consentimento.",description:"¡Ola! ¿Poderíamos habilitar algúns servizos adicionais para {purposes}? Sempre poderá cambiar ou retirar o séu consentimento máis tarde.",imprint:{name:"Imprimir"},learnMore:"Quero elixir",privacyPolicy:{name:"política de privacidade"},testing:"¡Modo de proba!"},decline:"Descartar todas",ok:"De acordo",poweredBy:"¡Realizado con Klaro!",privacyPolicy:{name:"política de privacidade",text:"Para saber máis, por favor lea a nosa {privacyPolicy}."},purposeItem:{service:"servizo",services:"servizos"},purposes:{advertising:{description:"Estes servizos procesan información persoal para mostrarlle anuncios personalizados ou basados en intereses.",title:"Publicidade"},functional:{description:"Estes servizos son esenciais para o correcto funcionamiento deste sitio web. Non pode desactivalos xa que a páxina non funcionaría correctamente.",title:"Prestación de servizos"},marketing:{description:"Estes servizos procesan información persoal para mostrarlle contido relevante sobre produtos, servizos ou temas que poidan interesarlle.",title:"Marketing"},performance:{description:"Estes servizos procesan información persoal para optimizar o servizo que ofrece este sitio.",title:"Optimización do rendimento"}},save:"Gardar",service:{disableAll:{description:"Utilice este interruptor para activar ou desactivar todos os servizos.",title:"Activar ou desactivar todos os servizos"},optOut:{description:"Este servizo está habilitado por defecto (pero pode optar polo contrario)",title:"(desactivar)"},purpose:"Finalidade",purposes:"Finalidades",required:{description:"Este servizo é necesario sempre",title:"(sempre requirido)"}}},hu:{acceptAll:"Mind elfogad",acceptAll_en:"Accept all",acceptSelected:"Kiválasztottat elfogad",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Használja ezt a kapcsolót az összes alkalmazás engedélyezéséhez/letiltásához.",title:"Összes app átkapcsolása"},optOut:{description:"Ez az alkalmazás alapértelmezés szerint betöltött (de ki lehet kapcsolni)",title:"(leiratkozás)"},purpose:"Cél",purposes:"Célok",required:{description:"Ez az alkalmazás mindig szükséges",title:"(mindig szükséges)"}},close:"Elvet",consentModal:{description:"Itt láthatja és testreszabhatja az önről gyűjtött információkat.",privacyPolicy:{name:"adatvédelmi irányelveinket",text:"További információért kérjük, olvassa el az {privacyPolicy}."},title:"Információk, amiket gyűjtünk"},consentNotice:{changeDescription:"Az utolsó látogatás óta változások történtek, kérjük, frissítse a hozzájárulását.",description:"Személyes adatait összegyűjtjük és feldolgozzuk az alábbi célokra: {purposes}.",imprint:{name:"impresszum",name_en:"imprint"},learnMore:"Tudjon meg többet",privacyPolicy:{name:"adatvédelmi irányelveinket"}},contextualConsent:{acceptAlways:"Mindig",acceptOnce:"Igen",description:"Be akarod tölteni a {title} által szolgáltatott külső tartalmakat?"},decline:"Elutasít",ok:"Elfogad",poweredBy:"Powered by Klaro!",purposeItem:{service:"",services:""},save:"Mentés"},hr:{acceptAll:"",acceptAll_en:"Prihvati sve",acceptSelected:"",acceptSelected_en:"Prihvati odabrane",service:{disableAll:{description:"Koristite ovaj prekidač da omogućite/onemogućite sve aplikacije odjednom.",title:"Izmeijeni sve"},optOut:{description:"Ova aplikacija je učitana automatski (ali je možete onemogućiti)",title:"(onemogućite)"},purpose:"Svrha",purposes:"Svrhe",required:{description:"Ova aplikacija je uvijek obavezna",title:"(obavezna)"}},close:"Zatvori",consentModal:{description:"Ovdje možete vidjeti i podesiti informacije koje prikupljamo o Vama.",privacyPolicy:{name:"pravila privatnosti",text:"Za više informacije pročitajte naša {privacyPolicy}."},title:"Informacije koje prikupljamo"},consentNotice:{changeDescription:"Došlo je do promjena od Vaše posljednjeg posjećivanja web stranice, molimo Vas da ažurirate svoja odobrenja.",description:"Mi prikupljamo i procesiramo Vaše osobne podatke radi slijedećeg: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Saznajte više",privacyPolicy:{name:"pravila privatnosti"}},decline:"Odbij",ok:"U redu",poweredBy:"Pokreće Klaro!",purposeItem:{service:"",services:""},save:"Spremi"},it:{acceptAll:"Accettare tutti",acceptSelected:"Accettare selezionato",close:"Chiudi",consentModal:{description:"Qui può valutare e personalizzare i servizi che vorremmo utilizzare su questo sito web. È lei il responsabile! Abilitare o disabilitare i servizi come meglio crede.",privacyPolicy:{name:"informativa sulla privacy",text:"Per saperne di più, legga la nostra {privacyPolicy}."},title:"Servizi che desideriamo utilizzare"},consentNotice:{changeDescription:"Ci sono stati dei cambiamenti rispetto alla sua ultima visita, la preghiamo di rinnovare il suo consenso.",description:"Salve, possiamo attivare alcuni servizi aggiuntivi per {purposes}? Può sempre modificare o ritirare il suo consenso in un secondo momento.",imprint:{name:"impronta"},learnMore:"Lasciatemi scegliere",privacyPolicy:{name:"informativa sulla privacy"},testing:"Modalità di test!"},contextualConsent:{acceptAlways:"Sempre",acceptOnce:"Sì",description:"Vuole caricare contenuti esterni forniti da {title}?"},decline:"Rifiuto",ok:"Va bene così",poweredBy:"Realizzato con Klaro!",privacyPolicy:{name:"informativa sulla privacy",text:"Per saperne di più, legga la nostra {privacyPolicy}."},purposeItem:{service:"servizio",services:"servizi"},purposes:{advertising:{description:"Questi servizi elaborano le informazioni personali per mostrarle annunci pubblicitari personalizzati o basati su interessi.",title:"Pubblicità"},functional:{description:"Questi servizi sono essenziali per il corretto funzionamento di questo sito web. Non può disattivarli qui perché altrimenti il servizio non funzionerebbe correttamente.\n",title:"Fornitura di servizi"},marketing:{description:"Questi servizi elaborano le informazioni personali per mostrarle contenuti rilevanti su prodotti, servizi o argomenti che potrebbero interessarla.",title:"Marketing"},performance:{description:"Questi servizi elaborano le informazioni personali per ottimizzare il servizio offerto da questo sito web.\n",title:"Ottimizzazione delle prestazioni"}},save:"Salva",service:{disableAll:{description:"Utilizzi questo interruttore per attivare o disattivare tutti i servizi.",title:"Attivare o disattivare tutti i servizi"},optOut:{description:"Questo servizio è caricato di default (ma è possibile scegliere di non usufruirne)",title:"(opt-out)"},purpose:"Scopo dell",purposes:"Finalità",required:{description:"Questo servizio è sempre richiesto",title:"(sempre richiesto)"}}},nl:{acceptAll:"Accepteer alle",acceptSelected:"Geselecteerde",close:"Sluit",consentModal:{description:"Hier kunt u de diensten die wij op deze website willen gebruiken beoordelen en aanpassen. U heeft de leiding! Schakel de diensten naar eigen inzicht in of uit.",privacyPolicy:{name:"privacybeleid",text:"Voor meer informatie kunt u ons {privacyPolicy} lezen."},title:"Diensten die we graag willen gebruiken"},consentNotice:{changeDescription:"Er waren veranderingen sinds uw laatste bezoek, gelieve uw toestemming te hernieuwen.",description:"Hallo, kunnen wij u een aantal extra diensten aanbieden voor {purposes}? U kunt uw toestemming later altijd nog wijzigen of intrekken.",imprint:{name:"impressum"},learnMore:"Laat me kiezen",privacyPolicy:{name:"privacybeleid"},testing:"Testmodus!"},contextualConsent:{acceptAlways:"Altijd",acceptOnce:"Ja",description:"Wilt u externe content laden die door {title} wordt aangeleverd ?"},decline:"Ik weiger",ok:"Dat is oké",poweredBy:"Gerealiseerd met Klaro!",privacyPolicy:{name:"privacybeleid",text:"Voor meer informatie kunt u ons {privacyPolicy} lezen."},purposeItem:{service:"service",services:"diensten"},purposes:{advertising:{description:"Deze diensten verwerken persoonlijke informatie om u gepersonaliseerde of op interesse gebaseerde advertenties te tonen.",title:"Reclame"},functional:{description:"Deze diensten zijn essentieel voor het correct functioneren van deze website. U kunt ze hier niet uitschakelen omdat de dienst anders niet correct zou werken.\n",title:"Dienstverlening"},marketing:{description:"Deze diensten verwerken persoonlijke informatie om u relevante inhoud te tonen over producten, diensten of onderwerpen waarin u geïnteresseerd zou kunnen zijn.",title:"Marketing"},performance:{description:"Deze diensten verwerken persoonlijke informatie om de service die deze website biedt te optimaliseren.\n",title:"Optimalisatie van de prestaties"}},save:"Opslaan",service:{disableAll:{description:"Gebruik deze schakelaar om alle diensten in of uit te schakelen.",title:"Alle diensten in- of uitschakelen"},optOut:{description:"Deze diensten worden standaard geladen (maar u kunt zich afmelden)",title:"(opt-out)"},purpose:"Verwerkingsdoel",purposes:"Verwerkingsdoeleinden",required:{description:"Deze diensten zijn altijd nodig",title:"(altijd nodig)"}}},no:{acceptAll:"Godtar alle",acceptSelected:"Godtar valgt",service:{disableAll:{description:"Bruk denne for å skru av/på alle apper.",title:"Bytt alle apper"},optOut:{description:"Denne appen er lastet som standard (men du kan skru det av)",title:"(opt-out)"},purpose:"Årsak",purposes:"Årsaker",required:{description:"Denne applikasjonen er alltid påkrevd",title:"(alltid påkrevd)"}},close:"",close_en:"Close",consentModal:{description:"Her kan du se og velge hvilken informasjon vi samler inn om deg.",privacyPolicy:{name:"personvernerklæring",text:"For å lære mer, vennligst les vår {privacyPolicy}."},title:"Informasjon vi samler inn"},consentNotice:{changeDescription:"Det har skjedd endringer siden ditt siste besøk, vennligst oppdater ditt samtykke.",description:"Vi samler inn og prosesserer din personlige informasjon av følgende årsaker: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Lær mer",privacyPolicy:{name:"personvernerklæring"}},decline:"Avslå",ok:"OK",poweredBy:"Laget med Klaro!",purposeItem:{service:"",services:""},save:"Opslaan"},oc:{acceptAll:"Tot acceptar",acceptSelected:"Acceptar çò seleccionat",close:"Tampar",consentModal:{description:"Aquí podètz mesurar e personalizar los servicis que volriam utilizar sus aqueste site web. Avètz lo darrièr mot ! Activatz o desactivatz segon vòstra causida.",title:"Servicis que volriam utilizar"},consentNotice:{changeDescription:"I aguèt de modificacions dempuèi vòstra darrièra visita, mercés de repassar vòstre consentiment.",description:"Adieu ! Poiriam activar mai de servici per {purposes} ? Podètz totjorn modificar o tirar vòstre consentiment mai tard.",learnMore:"Me daissar causir",testing:"Mòde tèst !"},contextualConsent:{acceptAlways:"Totjorn",acceptOnce:"Òc",description:"Volètz cargar de contenguts extèrn provesits per {title} ?"},decline:"Refusi",ok:"Es bon",poweredBy:"Realizat amb Klaro !",privacyPolicy:{name:"politica de confidencialitat",text:"Per ne saber mai, vejatz nòstra {privacyPolicy}."},purposeItem:{service:"servici",services:"servicis"},purposes:{advertising:{description:"Aquestes servicis tractan d’informacions personalas per vos mostrar de reclamas personalizadas o basadas suls interèsses.",title:"Reclama"},functional:{description:"Aquestes servicis son essencials pel foncionament corrèct d’aqueste site web. Los podètz pas desactivar aquí pr’amor que lo servici foncionariá pas coma cal autrament.\n",title:"Servici de provision"},marketing:{description:"Aquestes servicis tractan d’informacions personalas per vos mostrar de contenguts a prepaus de produits, de servicis o tèmas que poirián vos interessar.",title:"Marketing"},performance:{description:"Aquestes servicis tractan d’informacions per optimizar lo servici qu’aqueste site web prepausa.\n",title:"Optimizacion de las performanças"}},save:"Salvar",service:{disableAll:{description:"Utilizatz aqueste alternator per activar o desactivar totes los servicis.",title:"Activar o desactivar totes los servicis"},optOut:{description:"Aqueste servici es cargar per defaut (mas lo podètz desactivar)",title:"(opt-out)"},purpose:"finalitat",purposes:"finalitat",required:{description:"Aqueste servici es totjorn requesit",title:"(totjorn requesit)"}}},ro:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Utilizați acest switch pentru a activa/dezactiva toate aplicațiile.",title:"Comutați între toate aplicațiile"},optOut:{description:"Această aplicație este încărcată în mod implicit (dar puteți renunța)",title:"(opt-out)"},purpose:"Scop",purposes:"Scopuri",required:{description:"Această aplicație este întotdeauna necesară",title:"(întotdeauna necesar)"}},close:"",close_en:"Close",consentModal:{description:"Aici puteți vedea și personaliza informațiile pe care le colectăm despre dvs.",privacyPolicy:{name:"politica privacy",text:"Pentru a afla mai multe, vă rugăm să citiți {privacyPolicy}."},title:"Informațiile pe care le colectăm"},consentNotice:{changeDescription:"Au existat modificări de la ultima vizită, vă rugăm să actualizați consimțământul.",description:"Colectăm și procesăm informațiile dvs. personale în următoarele scopuri: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Află mai multe",privacyPolicy:{name:"politica privacy"}},decline:"Renunță",ok:"OK",poweredBy:"Realizat de Klaro!",purposeItem:{service:"",services:""},save:"Salvează"},sr:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Koristite ovaj prekidač da omogućite/onesposobite sve aplikacije odjednom.",title:"Izmeni sve"},optOut:{description:"Ova aplikacija je učitana automatski (ali je možete onesposobiti)",title:"(onesposobite)"},purpose:"Svrha",purposes:"Svrhe",required:{description:"Ova aplikacija je uvek neophodna",title:"(neophodna)"}},close:"Zatvori",consentModal:{description:"Ovde možete videti i podesiti informacije koje prikupljamo o Vama.",privacyPolicy:{name:"politiku privatnosti",text:"Za više informacije pročitajte našu {privacyPolicy}."},title:"Informacije koje prikupljamo"},consentNotice:{changeDescription:"Došlo je do promena od Vaše poslednje posete, molimo Vas da ažurirate svoja odobrenja.",description:"Mi prikupljamo i procesiramo Vaše lične podatke radi sledećeg: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Saznajte više",privacyPolicy:{name:"politiku privatnosti"}},decline:"Odbij",ok:"U redu",poweredBy:"Pokreće Klaro!",purposeItem:{service:"",services:""},save:"Sačuvaj"},sr_cyrl:{consentModal:{title:"Информације које прикупљамо",description:"Овде можете видет и подесити информације које прикупљамо о Вама.\n",privacyPolicy:{name:"политику приватности",text:"За више информација прочитајте нашу {privacyPolicy}.\n"}},consentNotice:{changeDescription:"Дошло је до промена од Ваше последнје посете, молимо Вас да ажурирате своја одобрења.",description:"Ми прикупљамо и процесирамо Ваше личне податке ради следећег: {purposes}.\n",learnMore:"Сазнајте више",privacyPolicy:{name:"политику приватности"}},ok:"У реду",save:"Сачувај",decline:"Одбиј",close:"Затвори",service:{disableAll:{title:"Измени све",description:"Користите овај прекидач да омогућите/онеспособите све апликације одједном."},optOut:{title:"(онеспособите)",description:"Ова апликација је учитана аутоматски (али је можете онеспособити)"},required:{title:"(неопходна)",description:"Ова апликација је увек неопходна."},purposes:"Сврхе",purpose:"Сврха"},poweredBy:"Покреће Кларо!"},sv:{acceptAll:"Acceptera alla",acceptSelected:"Acceptera markerat",service:{disableAll:{description:"Använd detta reglage för att aktivera/avaktivera samtliga appar.",title:"Ändra för alla appar"},optOut:{description:"Den här appen laddas som standardinställning (men du kan avaktivera den)",title:"(Avaktivera)"},purpose:"Syfte",purposes:"Syften",required:{description:"Den här applikationen krävs alltid",title:"(Krävs alltid)"}},close:"Stäng",consentModal:{description:"Här kan du se och anpassa vilken information vi samlar om dig.",privacyPolicy:{name:"Integritetspolicy",text:"För att veta mer, läs vår {privacyPolicy}."},title:"Information som vi samlar"},consentNotice:{changeDescription:"Det har skett förändringar sedan ditt senaste besök, var god uppdatera ditt medgivande.",description:"Vi samlar och bearbetar din personliga data i följande syften: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Läs mer",privacyPolicy:{name:"Integritetspolicy"}},decline:"Avböj",ok:"OK",poweredBy:"Körs på Klaro!",purposeItem:{service:"",services:""},save:"Spara"},tr:{acceptAll:"",acceptAll_en:"Accept all",acceptSelected:"",acceptSelected_en:"Accept selected",service:{disableAll:{description:"Toplu açma/kapama için bu düğmeyi kullanabilirsin.",title:"Tüm uygulamaları aç/kapat"},optOut:{description:"Bu uygulama varsayılanda yüklendi (ancak iptal edebilirsin)",title:"(isteğe bağlı)"},purpose:"Amaç",purposes:"Amaçlar",required:{description:"Bu uygulama her zaman gerekli",title:"(her zaman gerekli)"}},close:"Kapat",consentModal:{description:"Hakkınızda topladığımız bilgileri burada görebilir ve özelleştirebilirsiniz.",privacyPolicy:{name:"Gizlilik Politikası",text:"Daha fazlası için lütfen {privacyPolicy} sayfamızı okuyun."},title:"Sakladığımız bilgiler"},consentNotice:{changeDescription:"Son ziyaretinizden bu yana değişiklikler oldu, lütfen seçiminizi güncelleyin.",description:"Kişisel bilgilerinizi aşağıdaki amaçlarla saklıyor ve işliyoruz: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Daha fazla bilgi",privacyPolicy:{name:"Gizlilik Politikası"}},decline:"Reddet",ok:"Tamam",poweredBy:"Klaro tarafından geliştirildi!",purposeItem:{service:"",services:""},save:"Kaydet"},pl:{acceptAll:"Zaakceptuj wszystkie",acceptSelected:"Zaakceptuj wybrane",close:"Zamknij",consentModal:{description:"Tutaj mogą Państwo ocenić i dostosować usługi, które chcielibyśmy wykorzystać na tej stronie. Włączaj lub wyłączaj usługi według własnego uznania.",privacyPolicy:{name:"polityką prywatności",text:"Aby dowiedzieć się więcej, prosimy o zapoznanie się z naszą {privacyPolicy}."},title:"Usługi, z których chcielibyśmy skorzystać"},consentNotice:{changeDescription:"Od Twojej ostatniej wizyty nastąpiły zmiany, prosimy o odnowienie zgody.",description:"Czy możemy włączyć dodatkowe usługi dla {purposes}? W każdej chwili mogą Państwo później zmienić lub wycofać swoją zgodę.",imprint:{name:"Imprint"},learnMore:"Pozwól mi wybrać",privacyPolicy:{name:"polityka prywatności"},testing:"Tryb testowy!"},contextualConsent:{acceptAlways:"Zawsze",acceptOnce:"Tak",description:"Czy chcą Państwo załadować treści zewnętrzne dostarczane przez {title}?"},decline:"Odmawiam",ok:"Ok",poweredBy:"Technologia dostarczona przez Klaro",privacyPolicy:{name:"polityka prywatności",text:"Aby dowiedzieć się więcej, prosimy o zapoznanie się z naszą {privacyPolicy}."},purposeItem:{service:"usługa",services:"usługi"},purposes:{advertising:{description:"Usługi te przetwarzają dane osobowe w celu pokazania Państwu spersonalizowanych lub opartych na zainteresowaniach reklam.",title:"Reklama"},functional:{description:"Usługi te są niezbędne do prawidłowego funkcjonowania niniejszej strony internetowej. Nie mogą Państwo ich tutaj wyłączyć, ponieważ w przeciwnym razie strona nie działałaby prawidłowo.\n",title:"Świadczenie usług"},marketing:{description:"Usługi te przetwarzają dane osobowe w celu pokazania Państwu istotnych treści dotyczących produktów, usług lub tematów, którymi mogą być Państwo zainteresowani.",title:"Marketing"},performance:{description:"Usługi te przetwarzają dane osobowe w celu optymalizacji usług oferowanych przez tę stronę.\n",title:"Optymalizacja wydajności"}},save:"Zapisz",service:{disableAll:{description:"Za pomocą tego przełącznika można włączać lub wyłączać wszystkie usługi.",title:"Włącz lub wyłącz wszystkie usługi"},optOut:{description:"Ta usługa jest domyślnie załadowana (ale mogą Państwo z niej zrezygnować)",title:"(opt-out)"},purpose:"Cel",purposes:"Cele",required:{description:"Usługi te są zawsze wymagane",title:"(zawsze wymagane)"}}},ru:{acceptAll:"Принять всё",acceptSelected:"Принять выбранные",service:{disableAll:{description:"Используйте этот переключатель, чтобы включить/отключить все приложения.",title:"Переключить все приложения"},optOut:{description:"Это приложение включено по умолчанию (но вы можете отказаться)",title:"(отказаться)"},purpose:"Намерение",purposes:"Намерения",required:{description:"Это обязательное приложение",title:"(всегда обязательный)"}},close:"Закрыть",consentModal:{description:"Здесь вы можете просмотреть и настроить, какую информацию о вас мы храним.",privacyPolicy:{name:"Соглашение",text:"Чтобы узнать больше, пожалуйста, прочитайте наше {privacyPolicy}."},title:"Информация, которую мы сохраняем"},consentNotice:{changeDescription:"Со времени вашего последнего визита произошли изменения, обновите своё согласие.",description:"Мы собираем и обрабатываем вашу личную информацию для следующих целей: {purposes}.",imprint:{name:"",name_en:"imprint"},learnMore:"Настроить",privacyPolicy:{name:"политика конфиденциальности"}},decline:"Отклонить",ok:"Принять",poweredBy:"Работает на Кларо!",purposeItem:{service:"",services:""},save:"Сохранить"}};function No(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ro(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ro(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ro(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function $o(e){return $o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$o(e)}function To(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,qo(r.key),r)}}function qo(e){var t=function(e,t){if("object"!=$o(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=$o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==$o(t)?t:String(t)}var Uo=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.value=null}var t,n;return t=e,(n=[{key:"get",value:function(){return this.value}},{key:"set",value:function(e){this.value=e}},{key:"delete",value:function(){this.value=null}}])&&To(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Mo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Lo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n(4362),n(9102);var Fo=function(e){var t=e.t,n=e.config,r=e.onConfigAction,o=e.onClick;return tt.createElement(lo,{onClick:function(){return o(n)},isCard:!0,key:n.name},tt.createElement(so,{size:"icon cm-status"},tt.createElement("span",{title:n.status,className:"cm-status-is-"+n.status},"active"===n.status?tt.createElement("span",null,"⊕"):tt.createElement("span",null,"⊗"))),tt.createElement(so,{size:"lg cm-name"},tt.createElement("p",null,"default"===n.name?t(["configs","default","title"]):n.name)),tt.createElement(so,{size:"icon"},tt.createElement(yo,null,!1,tt.createElement(go,{onClick:function(){return r(n,"activate")}},t(["configs","activate"])),tt.createElement(go,{onClick:function(){return r(n,"deactivate")}},t(["configs","deactivate"])))))},Jo=function(e){var t=e.t,n=e.configs,r=e.onConfigAction,o=e.onClick,i=(e.disabled,n.map((function(e){return tt.createElement(Fo,{onClick:o,onConfigAction:r,key:e.name,t,config:e})})));return tt.createElement(ao,{className:"cm-config-list"},tt.createElement(co,null,tt.createElement(so,{size:"icon"},t(["configs","status"])),tt.createElement(so,{size:"lg"},t(["configs","name"])),tt.createElement(so,{size:"icon"},t(["menu"]))),i)},Go=function(e){var t=e.t,n=e.configs,r=e.onClick,o=e.onConfigAction,i=e.disabled;return tt.createElement("div",{className:"cm-ide-configs"},tt.createElement("p",{className:"cm-section-description"},t(["configs","description"])),tt.createElement(Jo,{t,configs:n,disabled:i,onConfigAction:o,onClick:r}),!1)};function Ho(){return Ho=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ho.apply(this,arguments)}function Wo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ko(e){return Ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ko(e)}function Yo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Vo(r.key),r)}}function Vo(e){var t=function(e,t){if("object"!=Ko(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Ko(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ko(t)?t:String(t)}function Qo(e,t,n){return t=Zo(t),function(e,t){if(t&&("object"===Ko(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Xo()?Reflect.construct(t,n||[],Zo(e).constructor):t.apply(e,n))}function Xo(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Xo=function(){return!!e})()}function Zo(e){return Zo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Zo(e)}function ei(e,t){return ei=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ei(e,t)}var ti=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=Qo(this,t,[e])).state={active:!1},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ei(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){var e=this,t=this.state.active;return tt.createElement("div",{className:"cm-tabs"+(this.state.active?" cm-tabs-active":""),onClick:function(){return e.setState({active:!t})}},tt.createElement("span",{className:"cm-tabs-more"},"∨"),tt.createElement("ul",null,this.props.children))}}])&&Yo(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(tt.Component),ni=function(e){var t=e.active,n=e.children,r=(e.href,e.icon),o=e.params,i=e.onClick;return tt.createElement("li",{className:t?"cm-tab-is-active":""},tt.createElement("a",{params:o,onClick:i},r&&tt.createElement("span",{className:"cm-tabs-icon cm-tabs-is-small"},r),n))};function ri(e){return ri="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ri(e)}function oi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,c=[],s=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(c.push(r.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||ai(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ii(e){return function(e){if(Array.isArray(e))return ci(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ai(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ai(e,t){if(e){if("string"==typeof e)return ci(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ci(e,t):void 0}}function ci(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}ni.propTypes={active:rt().bool,children:rt().node.isRequired,href:rt().string,icon:rt().node,params:rt().object,onClick:rt().func};var si=function(e){var t=e.hintKey,n=e.translationKey,r=e.noDefault,o=e.onChange,i=e.name,a=e.translations,c=e.languages,s=e.t,l=(e.config,e.value,e.fallbackValue,[].concat(ii(r?[]:["zz"]),ii(c))),u=s(["translations"].concat(ii(t),["description"]),{name:i}),d=l.map((function(e){var r=Jr(a,e,n),c=Gr(s.tv,e,n),l=r&&r===c||!r&&void 0!==c,u=s(["translations"].concat(ii(t),["zz"===e?"defaultLabel":"label"]),{name:i,language:s(["languages",e])});return tt.createElement("li",{key:e},tt.createElement("span",{className:"cm-lang"},"zz"!==e?e:"_"),tt.createElement(fr,{onChange:function(t){o(e,t===c||""===t?void 0:t)},label:[].concat(ii(u),ii(l?[" "].concat(ii(s(["translations","defaultValue"]))):[])),value:r||c||""}))}));return tt.createElement("div",{className:"cm-translations-for-key"},tt.createElement("h4",null,s(["translations"].concat(ii(t),["label"]),{name:i})),tt.createElement("p",null,u),tt.createElement("ul",null,d))},li={services:function(e){var t=e.t,n=e.config,r=e.updateConfig,o=n.services.map((function(e){return tt.createElement(tt.Fragment,{key:e.name},tt.createElement("h3",null,e.name),tt.createElement(si,{onChange:function(t,n){return function(e,t,n){r(["services",e._id,"translations",t,"title"],n)}(e,t,n)},t,hintKey:["services","title"],translationKey:["title"],name:e.name,translations:e.translations||{},languages:n.languages}),tt.createElement(si,{onChange:function(t,n){return function(e,t,n){r(["services",e._id,"translations",t,"description"],n)}(e,t,n)},t,hintKey:["services","description"],translationKey:["description"],name:e.name,translations:e.translations||{},noDefault:!0,languages:n.languages}))}));return tt.createElement(tt.Fragment,null,o.length>0&&o||tt.createElement("p",{className:"cm-section-description"},t(["translations","noTranslations"])))},purposes:function(e){var t=e.t,n=e.config,r=e.updateConfig,o=new Set;n.services.forEach((function(e){return e.purposes.forEach((function(e){return o.add(e)}))}));var i=Array.from(o.keys()).map((function(e){return tt.createElement(tt.Fragment,{key:e},tt.createElement("h3",null,e),tt.createElement(si,{t,onChange:function(t,n){return function(e,t,n){r(["translations",t,"purposes",e,"title"],n)}(e,t,n)},translationKey:["purposes",e,"title"],hintKey:["purposes","title"],name:e,translations:n.translations,languages:n.languages}),tt.createElement(si,{t,onChange:function(t,n){return function(e,t,n){r(["translations",t,"purposes",e,"description"],n)}(e,t,n)},hintKey:["purposes","description"],translationKey:["purposes",e,"description"],name:e,translations:n.translations,noDefault:!0,languages:n.languages}))}));return tt.createElement(tt.Fragment,null,i.length>0&&i||tt.createElement("p",{className:"cm-section-description"},t(["translations","noTranslations"])))},privacyPolicyUrl:function(e){var t=e.t,n=e.config,r=e.updateConfig;return tt.createElement(si,{t,hintKey:["privacyPolicyUrl"],name:"privacyPolicyUrl",translationKey:["privacyPolicyUrl"],translations:n.translations,languages:n.languages,onChange:function(e,t){r(["translations",e,"privacyPolicyUrl"],t)}})},ui:function(e){var t=e.t,n=e.config,r=e.updateConfig;return function e(o,i){for(var a=[],c=function(){var o,c=oi(l[s],2),u=c[0],d=c[1];if(0===i.length&&("purposes"===u||"services"===u))return 1;var p=[].concat(ii(i),[u]);o="object"===ri(d)?e(d,p):tt.createElement(si,{onChange:function(e,t){return r(["translations",e].concat(ii(p)),t,!0)},t,hintKey:p,noDefault:!0,translationKey:p,name:p.join("."),key:p.join("."),translations:n.translations,languages:n.languages}),a.push(tt.createElement("div",{key:p.join("."),className:"cm-key-translations"},o))},s=0,l=Object.entries(o);s<l.length;s++)c();return tt.createElement(tt.Fragment,null,a)}(Do.en,[])}};function ui(e){return ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ui(e)}var di=["state","setState","className","onConfigAction","configs","t"];function pi(){return pi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},pi.apply(this,arguments)}function fi(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Ai(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,vi(r.key),r)}}function mi(e,t,n){return t&&Ai(e.prototype,t),n&&Ai(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function vi(e){var t=function(e,t){if("object"!=ui(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=ui(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==ui(t)?t:String(t)}function hi(e,t,n){return t=yi(t),function(e,t){if(t&&("object"===ui(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,bi()?Reflect.construct(t,n||[],yi(e).constructor):t.apply(e,n))}function bi(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(bi=function(){return!!e})()}function yi(e){return yi=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},yi(e)}function gi(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ci(e,t)}function Ci(e,t){return Ci=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ci(e,t)}tt.Component;var ki={globals:function(t){var n=t.config,r=t.disabled,o=t.controls,i=t.updateConfig,a=t.t,c=ko.globals.map((function(t){var c=o[t.control]||e[t.control];return tt.createElement(c,zo(Po(Po({disabled:r,key:t.name,updateConfig:i,config:n,t:a},"key",t.name),"field",t),t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},a(["globals","description"])),tt.createElement("fieldset",{className:"cm-global-fields",disabled:r},c))},services:function(e){var t,n=e.t,r=(e.tt,e.state),o=e.services,i=e.setState,a=e.config,c=e.disabled,s=e.updateConfig,l=(r=r||{service:void 0}).service,u=[];return void 0!==o&&(u=o.filter((function(e){return void 0===a.services.find((function(t){return t.name===e.name||t.id===e.id}))}))),t=void 0!==l?tt.createElement(Oo,{setState:i,updateServiceName:function(e){return i({service:e})},t:n,updateConfig:s,service:a.services.find((function(e){return e.name===l}))}):tt.createElement(tt.Fragment,null,tt.createElement(jo,{t:n,config:a,onClick:function(e){return i({service:e.name})},updateConfig:s,disabled:c}),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement(Vr,{services:u,updateConfig:s,config:a,field:{name:"services"},t:n})))),tt.createElement("div",{className:"cm-ide-services"},tt.createElement("p",{className:"cm-section-description"},n(["services","description"])),t)},translations:function(e){var t=e.t,n=e.state,r=e.setState,o=e.config,i=e.updateConfig,a=li[(n=n||{tab:"services"}).tab],c=Array.from(Object.entries(li)).map((function(e){var o=oi(e,2),i=o[0];return o[1],tt.createElement(ni,{active:i===n.tab,onClick:function(){return r({tab:i})},key:i},t(["translations","headers",i]))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},t(["translations","description"])),tt.createElement(ti,null,c),tt.createElement("div",{className:"cm-translations-fields"},tt.createElement(a,{t,config:o,updateConfig:i})))},testing:function(e){var t=e.t,n=e.config,r=No(ie(0),2),o=r[0],i=r[1],a=No(ie(""),2),c=a[0],s=a[1],l=No(ie(n.languages.length>0?n.languages[0]:"en"),2),u=l[0],d=l[1],p=No(ie(new Uo),2),f=p[0],A=p[1],m=new Uo,v=new jn.default(n,f,m),h=function(e){var t=new Map;return Nn(t,Dn(Do)),Nn(t,Dn(e.translations||{})),t}(n),b=n.languages.map((function(e){return tt.createElement("option",{key:e,value:e},t(["languages",e])," (",e,")")})),y=function(){window.open(c+"#klaro-testing&klaro-config=".concat(n.name))},g=le(null);return ce((function(){!function(e,t,n){if(void 0!==e.styling){var r=Object.assign({},e.styling);if(void 0!==r.theme){var o=r.theme;o instanceof Array||(o=[o]),r={};var i,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=In(e))){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}(o);try{for(a.s();!(i=a.n()).done;){var c=t[i.value];if(void 0!==c)for(var s=0,l=Object.entries(c);s<l.length;s++){var u=Bn(l[s],2),d=u[0],p=u[1];d.startsWith("_")||(r[d]=p)}}}catch(e){a.e(e)}finally{a.f()}for(var f=0,A=Object.entries(e.styling);f<A.length;f++){var m=Bn(A[f],2),v=m[0],h=m[1];"theme"!==v&&(r[v]=h)}}void 0===n&&(n=document.documentElement);for(var b=0,y=Object.entries(r);b<y.length;b++){var g=Bn(y[b],2),C=g[0],k=g[1];n.style.setProperty("--"+C,k)}window.document.documentMode&&n===document.documentElement&&(0,On.N3)(r)}}(n,Rn,g.current)})),tt.createElement("div",{className:"cm-demo"},tt.createElement("p",{className:"cm-section-description"},t(["demo","description"])),tt.createElement("form",{onSubmit:y},tt.createElement("div",{className:"cm-config-controls"},tt.createElement(fr,{value:c,onChange:s,label:t(["demo","testOnSite","label"])}),tt.createElement("button",{className:"cm-control-button cm-success",onClick:function(e){e.preventDefault(),y()}},t(["demo","testOnSite","button"])))),tt.createElement("div",{className:"cm-config-controls"},tt.createElement("div",{className:"cm-control"},tt.createElement("select",{value:u,onChange:function(e){return d(e.target.value)}},b)),tt.createElement("div",{className:"cm-control"},tt.createElement("button",{className:"cm-control-button cm-secondary",onClick:function(){A(new Uo),i(o+1)}},t(["demo","reset"])),tt.createElement("button",{className:"cm-control-button",onClick:function(){i(o+1)}},t(["demo","showManager"])))),tt.createElement("div",{ref:g},tt.createElement(Sn,{t:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return dt.apply(void 0,[h,u,n.fallbackLang||"zz"].concat(t))},lang:u,manager:v,config:n,show:o})))},json:function(e){var t=e.t,n=e.config,r=e.updateConfig,o=le(null),i=Mo(ie(),2),a=i[0],c=i[1],s=Mo(ie(),2),l=s[0],u=s[1],d=JSON.stringify(n,void 0,2),p=new Blob([d],{type:"application/json"}),f=URL.createObjectURL(p);return tt.createElement("div",{className:"cm-json"},tt.createElement("h3",{className:"cm-space-lg"},t(["json","importExport"])),a&&tt.createElement("p",{className:"cm-message cm-error"},a),l&&tt.createElement("p",{className:"cm-message cm-success"},l),tt.createElement("form",{className:"cm-config-controls"},tt.createElement("fieldset",null,tt.createElement("label",{htmlFor:"cm-file-import",className:"cm-upload-label"},tt.createElement("a",{className:"cm-control-button cm-success"},"↥ ",t(["json","import"]))),tt.createElement("input",{onChange:function(){var e=function(e){var t=e.current.files[0];if(t)return new Promise((function(e,n){var r=new FileReader;r.onload=function(){return e(r.result)},r.onerror=n,r.readAsText(t)}))}(o);u(),c(),e.then((function(e){try{var n=JSON.parse(e);r([],n),u(t(["json","success"]))}catch(e){console.log(e),c(t(["json","invalidJSON"]))}})),e.catch((function(){return c(t(["json","cannotReadFile"]))}))},ref:o,className:"cm-file-import",id:"cm-file-import",type:"file"}),tt.createElement("a",{download:"klaro-config.json",href:f,className:"cm-control-button cm-primary"},"↧ ",t(["json","export"])))),tt.createElement("p",null,t(["json","rawText"])),tt.createElement("pre",null,tt.createElement("code",null,JSON.stringify(n,void 0,2))))},styling:function(t){var n=t.config,r=t.disabled,o=t.controls,i=t.updateConfig,a=t.t,c=ko.styling.map((function(t){var c=o[t.control]||e[t.control];return tt.createElement(c,Ho({disabled:r,prefix:["styling"],updateConfig:function(e,t){return i(["styling"].concat(function(e){if(Array.isArray(e))return Wo(e)}(n=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return Wo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wo(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),t,!0);var n},config:n.styling||{themes:[]},t:a,key:t.name,field:t},t.controlProps||{}))}));return tt.createElement(tt.Fragment,null,tt.createElement("p",{className:"cm-section-description"},a(["styling","description"])),tt.createElement("fieldset",{className:"cm-styling-fields",disabled:r},c))}},wi=function(e){function t(e){return fi(this,t),hi(this,t,[e])}return gi(t,e),mi(t,[{key:"render",value:function(){var e,t=this.props,n=t.state,r=t.setState,o=t.className,i=t.onConfigAction,a=t.configs,c=t.t,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,di),l=n.activeConfig;if(void 0!==l){var u=a.find((function(e){return e.name===l}));e=tt.createElement(xi,pi({state:n.configState,setState:function(e){var t=Object.assign({},n);t.configState=e,r(t)},t:c,unsetConfig:function(){r({activeConfig:void 0})},config:u},s))}else e=tt.createElement(Go,{onConfigAction:i,onClick:function(e){return r({activeConfig:e.name})},configs:a,t:c});return tt.createElement("div",{className:o||"klaro-ide"},e)}}]),t}(tt.Component),xi=function(e){function t(){return fi(this,t),hi(this,t,arguments)}return gi(t,e),mi(t,[{key:"render",value:function(){var e=this.props,t=e.t,n=e.disabled,r=e.controls,o=e.setState,i=e.config,a=e.services,c=e.unsetConfig,s=e.saveConfig,l=e.resetConfig,u=e.updateConfig,d=(e.deleteConfig,this.props.state||{tab:"services"}),p=d.tab,f=ki[p],A=d[p],m=["services","globals","translations","json","styling","testing"].map((function(e){return tt.createElement(ni,{key:e,onClick:function(){return function(e){return o({tab:e})}(e)},active:p===e},t(["ide",e]))}));return tt.createElement(tt.Fragment,null,tt.createElement("div",{className:"cm-config-controls"},tt.createElement("h2",null,tt.createElement("a",{onClick:function(){return c()}},t(["configs","title"])," ›")," ","default"===i.name?t(["configs","default","title"]):i.name),tt.createElement("fieldset",null,tt.createElement("button",{disabled:n||!i.modified,className:"cm-control-button cm-secondary",onClick:function(e){return e.preventDefault()||l(i.name)}},t(["config","reset"])),tt.createElement("button",{disabled:n||!i.modified,className:"cm-control-button",onClick:function(e){return e.preventDefault()||s(i.name)}},t(["config","save"])),!1)),tt.createElement(ti,{key:"tabs"},m),tt.createElement(f,{state:A,setState:function(e){var t=Object.assign({},d);t[p]=e,o(t)},disabled:n,services:a,config:i,updateConfig:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return u.apply(void 0,[i.name].concat(t))},controls:r,t}))}}]),t}(tt.Component);tt.Component;var _i=n(5514),Ei={};Ei.styleTagTransform=Kn(),Ei.setAttributes=Jn(),Ei.insert=Ln().bind(null,"head"),Ei.domAPI=Un(),Ei.insertStyleElement=Hn(),Tn()(_i.A,Ei),_i.A&&_i.A.locals&&_i.A.locals;var Si,ji=Dn({});function Oi(e){var t=function(e){if(void 0!==e&&void 0!==e.lang&&"zz"!==e.lang)return e.lang;var t=(("string"==typeof window.language?window.language:null)||document.documentElement.lang||(void 0!==e&&void 0!==e.languages&&void 0!==e.languages[0]?e.languages[0]:"en")).toLowerCase(),n=new RegExp("^([\\w]+)-([\\w]+)$").exec(t);return null===n?t:n[1]}(e),n=function(e,t){var n=function(e,t){return(e.elementID||"klaro")+(t?"-ide":"")}(e,t),r=document.getElementById(n);return null===r&&((r=document.createElement("div")).id=n,document.body.appendChild(r)),r}(e,!0),r=Me(tt.createElement(wi,{t:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return dt.apply(void 0,[ji,t,e.fallbackLang||"en"].concat(r))},lang:t,config:e}),n);return r}function Bi(e){Oi(e=e||Si)}function Ii(){return"v"==="v0.7.19"[0]?"v0.7.19".slice(1):"v0.7.19"}function Pi(){Bi()}!function(){var e=(0,On.XZ)("klaro");if(void 0!==e){var t=e.getAttribute("data-config")||"klaroConfig";Si=window[t];var n=e.getAttribute("data-style-prefix");void 0===n&&(Si.stylePrefix=n),void 0!==Si&&(/complete|interactive|loaded/.test(document.readyState)?Pi():window.addEventListener("DOMContentLoaded",Pi))}}()})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,