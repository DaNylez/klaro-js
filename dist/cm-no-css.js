!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.cm=e():t.cm=e()}(self,(()=>(()=>{"use strict";var t={5482:(t,e,r)=>{function n(t){for(var e={},r=0;r<t.attributes.length;r++){var n=t.attributes[r];n.name.startsWith("data-")&&(e[n.name.slice(5)]=n.value)}return e}function o(t,e){for(var r=Object.keys(t),n=0;n<r.length;n++){var o=r[n],i=t[o];e[o]!==i&&e.setAttribute("data-"+o,i)}}r.d(e,{RT:()=>n,X7:()=>o}),r(9305),r(2733),r(4701),r(4776),r(9892),r(6281),r(4962),r(9336),r(1908),r(7132),r(3810),r(8557),r(646),r(5021),r(3687),r(9425),r(3994),r(3062),r(4062),r(2367)},8120:(t,e,r)=>{var n=r(1483),o=r(8761),i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not a function")}},2374:(t,e,r)=>{var n=r(943),o=r(8761),i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not a constructor")}},3852:(t,e,r)=>{var n=r(735),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw new i("Can't set "+o(t)+" as a prototype")}},7095:(t,e,r)=>{var n=r(1),o=r(5290),i=r(5835).f,a=n("unscopables"),u=Array.prototype;void 0===u[a]&&i(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},4419:(t,e,r)=>{var n=r(9105).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},6021:(t,e,r)=>{var n=r(4815),o=TypeError;t.exports=function(t,e){if(n(e,t))return t;throw new o("Incorrect invocation")}},2293:(t,e,r)=>{var n=r(1704),o=String,i=TypeError;t.exports=function(t){if(n(t))return t;throw new i(o(t)+" is not an object")}},9214:(t,e,r)=>{var n=r(8473);t.exports=n((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}))},4793:(t,e,r)=>{var n=r(2867).forEach,o=r(3152)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},6142:(t,e,r)=>{var n=r(2914),o=r(1807),i=r(2347),a=r(8901),u=r(5299),c=r(943),s=r(6960),f=r(670),l=r(4887),v=r(6665),p=Array;t.exports=function(t){var e=i(t),r=c(this),h=arguments.length,y=h>1?arguments[1]:void 0,d=void 0!==y;d&&(y=n(y,h>2?arguments[2]:void 0));var g,b,m,x,w,S,O=v(e),E=0;if(!O||this===p&&u(O))for(g=s(e),b=r?new this(g):p(g);g>E;E++)S=d?y(e[E],E):e[E],f(b,E,S);else for(w=(x=l(e,O)).next,b=r?new this:[];!(m=o(w,x)).done;E++)S=d?a(x,y,[m.value,E],!0):m.value,f(b,E,S);return b.length=E,b}},6651:(t,e,r)=>{var n=r(5599),o=r(3392),i=r(6960),a=function(t){return function(e,r,a){var u=n(e),c=i(u);if(0===c)return!t&&-1;var s,f=o(a,c);if(t&&r!=r){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2867:(t,e,r)=>{var n=r(2914),o=r(4762),i=r(2121),a=r(2347),u=r(6960),c=r(4551),s=o([].push),f=function(t){var e=1===t,r=2===t,o=3===t,f=4===t,l=6===t,v=7===t,p=5===t||l;return function(h,y,d,g){for(var b,m,x=a(h),w=i(x),S=u(w),O=n(y,d),E=0,k=g||c,j=e?k(h,S):r||v?k(h,0):void 0;S>E;E++)if((p||E in w)&&(m=O(b=w[E],E,x),t))if(e)j[E]=m;else if(m)switch(t){case 3:return!0;case 5:return b;case 6:return E;case 2:s(j,b)}else switch(t){case 4:return!1;case 7:s(j,b)}return l?-1:o||f?f:j}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},4595:(t,e,r)=>{var n=r(8473),o=r(1),i=r(6170),a=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},3152:(t,e,r)=>{var n=r(8473);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){return 1},1)}))}},1698:(t,e,r)=>{var n=r(4762);t.exports=n([].slice)},9703:(t,e,r)=>{var n=r(4914),o=r(943),i=r(1704),a=r(1)("species"),u=Array;t.exports=function(t){var e;return n(t)&&(e=t.constructor,(o(e)&&(e===u||n(e.prototype))||i(e)&&null===(e=e[a]))&&(e=void 0)),void 0===e?u:e}},4551:(t,e,r)=>{var n=r(9703);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},8901:(t,e,r)=>{var n=r(2293),o=r(6721);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},1554:(t,e,r)=>{var n=r(1)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){try{if(!e&&!o)return!1}catch(t){return!1}var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},1278:(t,e,r)=>{var n=r(4762),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},6145:(t,e,r)=>{var n=r(4338),o=r(1483),i=r(1278),a=r(1)("toStringTag"),u=Object,c="Arguments"===i(function(){return arguments}());t.exports=n?i:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=u(t),a))?r:c?i(e):"Object"===(n=i(e))&&o(e.callee)?"Arguments":n}},4092:(t,e,r)=>{var n=r(5290),o=r(3864),i=r(2313),a=r(2914),u=r(6021),c=r(5983),s=r(1506),f=r(5662),l=r(5247),v=r(240),p=r(382),h=r(8041).fastKey,y=r(4483),d=y.set,g=y.getterFor;t.exports={getConstructor:function(t,e,r,f){var l=t((function(t,o){u(t,v),d(t,{type:e,index:n(null),first:void 0,last:void 0,size:0}),p||(t.size=0),c(o)||s(o,t[f],{that:t,AS_ENTRIES:r})})),v=l.prototype,y=g(e),b=function(t,e,r){var n,o,i=y(t),a=m(t,e);return a?a.value=r:(i.last=a={index:o=h(e,!0),key:e,value:r,previous:n=i.last,next:void 0,removed:!1},i.first||(i.first=a),n&&(n.next=a),p?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},m=function(t,e){var r,n=y(t),o=h(e);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key===e)return r};return i(v,{clear:function(){for(var t=y(this),e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=void 0),e=e.next;t.first=t.last=void 0,t.index=n(null),p?t.size=0:this.size=0},delete:function(t){var e=this,r=y(e),n=m(e,t);if(n){var o=n.next,i=n.previous;delete r.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),r.first===n&&(r.first=o),r.last===n&&(r.last=i),p?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=y(this),n=a(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!m(this,t)}}),i(v,r?{get:function(t){var e=m(this,t);return e&&e.value},set:function(t,e){return b(this,0===t?0:t,e)}}:{add:function(t){return b(this,t=0===t?0:t,t)}}),p&&o(v,"size",{configurable:!0,get:function(){return y(this).size}}),l},setStrong:function(t,e,r){var n=e+" Iterator",o=g(e),i=g(n);f(t,e,(function(t,e){d(this,{type:n,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=i(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?l("keys"===e?r.key:"values"===e?r.value:[r.key,r.value],!1):(t.target=void 0,l(void 0,!0))}),r?"entries":"values",!r,!0),v(e)}}},7446:(t,e,r)=>{var n=r(8612),o=r(8389),i=r(4762),a=r(8730),u=r(7914),c=r(8041),s=r(1506),f=r(6021),l=r(1483),v=r(5983),p=r(1704),h=r(8473),y=r(1554),d=r(2277),g=r(2429);t.exports=function(t,e,r){var b=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),x=b?"set":"add",w=o[t],S=w&&w.prototype,O=w,E={},k=function(t){var e=i(S[t]);u(S,t,"add"===t?function(t){return e(this,0===t?0:t),this}:"delete"===t?function(t){return!(m&&!p(t))&&e(this,0===t?0:t)}:"get"===t?function(t){return m&&!p(t)?void 0:e(this,0===t?0:t)}:"has"===t?function(t){return!(m&&!p(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(a(t,!l(w)||!(m||S.forEach&&!h((function(){(new w).entries().next()})))))O=r.getConstructor(e,t,b,x),c.enable();else if(a(t,!0)){var j=new O,A=j[x](m?{}:-0,1)!==j,P=h((function(){j.has(1)})),I=y((function(t){new w(t)})),T=!m&&h((function(){for(var t=new w,e=5;e--;)t[x](e,e);return!t.has(-0)}));I||((O=e((function(t,e){f(t,S);var r=g(new w,t,O);return v(e)||s(e,r[x],{that:r,AS_ENTRIES:b}),r}))).prototype=S,S.constructor=O),(P||T)&&(k("delete"),k("has"),b&&k("get")),(T||A)&&k(x),m&&S.clear&&delete S.clear}return E[t]=O,n({global:!0,constructor:!0,forced:O!==w},E),d(O,t),m||r.setStrong(O,t,b),O}},6726:(t,e,r)=>{var n=r(5755),o=r(9497),i=r(4961),a=r(5835);t.exports=function(t,e,r){for(var u=o(e),c=a.f,s=i.f,f=0;f<u.length;f++){var l=u[f];n(t,l)||r&&n(r,l)||c(t,l,s(e,l))}}},4522:(t,e,r)=>{var n=r(1)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},9441:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},5247:t=>{t.exports=function(t,e){return{value:t,done:e}}},9037:(t,e,r)=>{var n=r(382),o=r(5835),i=r(7738);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},7738:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},670:(t,e,r)=>{var n=r(382),o=r(5835),i=r(7738);t.exports=function(t,e,r){n?o.f(t,e,i(0,r)):t[e]=r}},6446:(t,e,r)=>{var n=r(2293),o=r(348),i=TypeError;t.exports=function(t){if(n(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw new i("Incorrect hint");return o(this,t)}},3864:(t,e,r)=>{var n=r(169),o=r(5835);t.exports=function(t,e,r){return r.get&&n(r.get,e,{getter:!0}),r.set&&n(r.set,e,{setter:!0}),o.f(t,e,r)}},7914:(t,e,r)=>{var n=r(1483),o=r(5835),i=r(169),a=r(2095);t.exports=function(t,e,r,u){u||(u={});var c=u.enumerable,s=void 0!==u.name?u.name:e;if(n(r)&&i(r,s,u),u.global)c?t[e]=r:a(e,r);else{try{u.unsafe?t[e]&&(c=!0):delete t[e]}catch(t){}c?t[e]=r:o.f(t,e,{value:r,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return t}},2313:(t,e,r)=>{var n=r(7914);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},2095:(t,e,r)=>{var n=r(8389),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},382:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},3145:(t,e,r)=>{var n=r(8389),o=r(1704),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},1091:t=>{var e=TypeError;t.exports=function(t){if(t>9007199254740991)throw e("Maximum allowed index exceeded");return t}},4842:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},1902:(t,e,r)=>{var n=r(3145)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},9966:t=>{t.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},6170:(t,e,r)=>{var n,o,i=r(8389),a=r(9966),u=i.process,c=i.Deno,s=u&&u.versions||c&&c.version,f=s&&s.v8;f&&(o=(n=f.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},4741:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},8612:(t,e,r)=>{var n=r(8389),o=r(4961).f,i=r(9037),a=r(7914),u=r(2095),c=r(6726),s=r(8730);t.exports=function(t,e){var r,f,l,v,p,h=t.target,y=t.global,d=t.stat;if(r=y?n:d?n[h]||u(h,{}):n[h]&&n[h].prototype)for(f in e){if(v=e[f],l=t.dontCallGetSet?(p=o(r,f))&&p.value:r[f],!s(y?f:h+(d?".":"#")+f,t.forced)&&void 0!==l){if(typeof v==typeof l)continue;c(v,l)}(t.sham||l&&l.sham)&&i(v,"sham",!0),a(r,f,v,t)}}},8473:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},3358:(t,e,r)=>{r(5021);var n=r(1807),o=r(7914),i=r(8865),a=r(8473),u=r(1),c=r(9037),s=u("species"),f=RegExp.prototype;t.exports=function(t,e,r,l){var v=u(t),p=!a((function(){var e={};return e[v]=function(){return 7},7!==""[t](e)})),h=p&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[v]=/./[v]),r.exec=function(){return e=!0,null},r[v](""),!e}));if(!p||!h||r){var y=/./[v],d=e(v,""[t],(function(t,e,r,o,a){var u=e.exec;return u===i||u===f.exec?p&&!a?{done:!0,value:n(y,e,r,o)}:{done:!0,value:n(t,r,e,o)}:{done:!1}}));o(String.prototype,t,d[0]),o(f,v,d[1])}l&&c(f[v],"sham",!0)}},6530:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},3067:(t,e,r)=>{var n=r(274),o=Function.prototype,i=o.apply,a=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},2914:(t,e,r)=>{var n=r(3786),o=r(8120),i=r(274),a=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}}},274:(t,e,r)=>{var n=r(8473);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},2164:(t,e,r)=>{var n=r(4762),o=r(8120),i=r(1704),a=r(5755),u=r(1698),c=r(274),s=Function,f=n([].concat),l=n([].join),v={};t.exports=c?s.bind:function(t){var e=o(this),r=e.prototype,n=u(arguments,1),c=function(){var r=f(n,u(arguments));return this instanceof c?function(t,e,r){if(!a(v,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";v[e]=s("C,a","return new C("+l(n,",")+")")}return v[e](t,r)}(e,r.length,r):e.apply(t,r)};return i(r)&&(c.prototype=r),c}},1807:(t,e,r)=>{var n=r(274),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},2048:(t,e,r)=>{var n=r(382),o=r(5755),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,u=o(i,"name"),c=u&&"something"===function(){}.name,s=u&&(!n||n&&a(i,"name").configurable);t.exports={EXISTS:u,PROPER:c,CONFIGURABLE:s}},680:(t,e,r)=>{var n=r(4762),o=r(8120);t.exports=function(t,e,r){try{return n(o(Object.getOwnPropertyDescriptor(t,e)[r]))}catch(t){}}},3786:(t,e,r)=>{var n=r(1278),o=r(4762);t.exports=function(t){if("Function"===n(t))return o(t)}},4762:(t,e,r)=>{var n=r(274),o=Function.prototype,i=o.call,a=n&&o.bind.bind(i,i);t.exports=n?a:function(t){return function(){return i.apply(t,arguments)}}},1409:(t,e,r)=>{var n=r(8389),o=r(1483);t.exports=function(t,e){return arguments.length<2?(r=n[t],o(r)?r:void 0):n[t]&&n[t][e];var r}},6665:(t,e,r)=>{var n=r(6145),o=r(2564),i=r(5983),a=r(6775),u=r(1)("iterator");t.exports=function(t){if(!i(t))return o(t,u)||o(t,"@@iterator")||a[n(t)]}},4887:(t,e,r)=>{var n=r(1807),o=r(8120),i=r(2293),a=r(8761),u=r(6665),c=TypeError;t.exports=function(t,e){var r=arguments.length<2?u(t):e;if(o(r))return i(n(r,t));throw new c(a(t)+" is not iterable")}},5215:(t,e,r)=>{var n=r(4762),o=r(4914),i=r(1483),a=r(1278),u=r(6261),c=n([].push);t.exports=function(t){if(i(t))return t;if(o(t)){for(var e=t.length,r=[],n=0;n<e;n++){var s=t[n];"string"==typeof s?c(r,s):"number"!=typeof s&&"Number"!==a(s)&&"String"!==a(s)||c(r,u(s))}var f=r.length,l=!0;return function(t,e){if(l)return l=!1,e;if(o(this))return e;for(var n=0;n<f;n++)if(r[n]===t)return e}}}},2564:(t,e,r)=>{var n=r(8120),o=r(5983);t.exports=function(t,e){var r=t[e];return o(r)?void 0:n(r)}},708:(t,e,r)=>{var n=r(4762),o=r(2347),i=Math.floor,a=n("".charAt),u=n("".replace),c=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,f=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,n,l,v){var p=r+t.length,h=n.length,y=f;return void 0!==l&&(l=o(l),y=s),u(v,y,(function(o,u){var s;switch(a(u,0)){case"$":return"$";case"&":return t;case"`":return c(e,0,r);case"'":return c(e,p);case"<":s=l[c(u,1,-1)];break;default:var f=+u;if(0===f)return o;if(f>h){var v=i(f/10);return 0===v?o:v<=h?void 0===n[v-1]?a(u,1):n[v-1]+a(u,1):o}s=n[f-1]}return void 0===s?"":s}))}},8389:function(t,e,r){var n=function(t){return t&&t.Math===Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||n("object"==typeof this&&this)||function(){return this}()||Function("return this")()},5755:(t,e,r)=>{var n=r(4762),o=r(2347),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},1507:t=>{t.exports={}},2811:(t,e,r)=>{var n=r(1409);t.exports=n("document","documentElement")},1799:(t,e,r)=>{var n=r(382),o=r(8473),i=r(3145);t.exports=!n&&!o((function(){return 7!==Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},2121:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1278),a=Object,u=n("".split);t.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(t){return"String"===i(t)?u(t,""):a(t)}:a},2429:(t,e,r)=>{var n=r(1483),o=r(1704),i=r(1953);t.exports=function(t,e,r){var a,u;return i&&n(a=e.constructor)&&a!==r&&o(u=a.prototype)&&u!==r.prototype&&i(t,u),t}},7268:(t,e,r)=>{var n=r(4762),o=r(1483),i=r(1831),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},8041:(t,e,r)=>{var n=r(8612),o=r(4762),i=r(1507),a=r(1704),u=r(5755),c=r(5835).f,s=r(2278),f=r(2020),l=r(706),v=r(1866),p=r(6530),h=!1,y=v("meta"),d=0,g=function(t){c(t,y,{value:{objectID:"O"+d++,weakData:{}}})},b=t.exports={enable:function(){b.enable=function(){},h=!0;var t=s.f,e=o([].splice),r={};r[y]=1,t(r).length&&(s.f=function(r){for(var n=t(r),o=0,i=n.length;o<i;o++)if(n[o]===y){e(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:f.f}))},fastKey:function(t,e){if(!a(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,y)){if(!l(t))return"F";if(!e)return"E";g(t)}return t[y].objectID},getWeakData:function(t,e){if(!u(t,y)){if(!l(t))return!0;if(!e)return!1;g(t)}return t[y].weakData},onFreeze:function(t){return p&&h&&l(t)&&!u(t,y)&&g(t),t}};i[y]=!0},4483:(t,e,r)=>{var n,o,i,a=r(4644),u=r(8389),c=r(1704),s=r(9037),f=r(5755),l=r(1831),v=r(5409),p=r(1507),h="Object already initialized",y=u.TypeError,d=u.WeakMap;if(a||l.state){var g=l.state||(l.state=new d);g.get=g.get,g.has=g.has,g.set=g.set,n=function(t,e){if(g.has(t))throw new y(h);return e.facade=t,g.set(t,e),e},o=function(t){return g.get(t)||{}},i=function(t){return g.has(t)}}else{var b=v("state");p[b]=!0,n=function(t,e){if(f(t,b))throw new y(h);return e.facade=t,s(t,b,e),e},o=function(t){return f(t,b)?t[b]:{}},i=function(t){return f(t,b)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!c(e)||(r=o(e)).type!==t)throw new y("Incompatible receiver, "+t+" required");return r}}}},5299:(t,e,r)=>{var n=r(1),o=r(6775),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},4914:(t,e,r)=>{var n=r(1278);t.exports=Array.isArray||function(t){return"Array"===n(t)}},1483:t=>{var e="object"==typeof document&&document.all;t.exports=void 0===e&&void 0!==e?function(t){return"function"==typeof t||t===e}:function(t){return"function"==typeof t}},943:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1483),a=r(6145),u=r(1409),c=r(7268),s=function(){},f=u("Reflect","construct"),l=/^\s*(?:class|function)\b/,v=n(l.exec),p=!l.test(s),h=function(t){if(!i(t))return!1;try{return f(s,[],t),!0}catch(t){return!1}},y=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return p||!!v(l,c(t))}catch(t){return!0}};y.sham=!0,t.exports=!f||o((function(){var t;return h(h.call)||!h(Object)||!h((function(){t=!0}))||t}))?y:h},8730:(t,e,r)=>{var n=r(8473),o=r(1483),i=/#|\.prototype\./,a=function(t,e){var r=c[u(t)];return r===f||r!==s&&(o(e)?n(e):!!e)},u=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},c=a.data={},s=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},5983:t=>{t.exports=function(t){return null==t}},1704:(t,e,r)=>{var n=r(1483);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},735:(t,e,r)=>{var n=r(1704);t.exports=function(t){return n(t)||null===t}},9557:t=>{t.exports=!1},4786:(t,e,r)=>{var n=r(1704),o=r(1278),i=r(1)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"===o(t))}},1423:(t,e,r)=>{var n=r(1409),o=r(1483),i=r(4815),a=r(5022),u=Object;t.exports=a?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return o(e)&&i(e.prototype,u(t))}},1506:(t,e,r)=>{var n=r(2914),o=r(1807),i=r(2293),a=r(8761),u=r(5299),c=r(6960),s=r(4815),f=r(4887),l=r(6665),v=r(6721),p=TypeError,h=function(t,e){this.stopped=t,this.result=e},y=h.prototype;t.exports=function(t,e,r){var d,g,b,m,x,w,S,O=r&&r.that,E=!(!r||!r.AS_ENTRIES),k=!(!r||!r.IS_RECORD),j=!(!r||!r.IS_ITERATOR),A=!(!r||!r.INTERRUPTED),P=n(e,O),I=function(t){return d&&v(d,"normal",t),new h(!0,t)},T=function(t){return E?(i(t),A?P(t[0],t[1],I):P(t[0],t[1])):A?P(t,I):P(t)};if(k)d=t.iterator;else if(j)d=t;else{if(!(g=l(t)))throw new p(a(t)+" is not iterable");if(u(g)){for(b=0,m=c(t);m>b;b++)if((x=T(t[b]))&&s(y,x))return x;return new h(!1)}d=f(t,g)}for(w=k?t.next:d.next;!(S=o(w,d)).done;){try{x=T(S.value)}catch(t){v(d,"throw",t)}if("object"==typeof x&&x&&s(y,x))return x}return new h(!1)}},6721:(t,e,r)=>{var n=r(1807),o=r(2293),i=r(2564);t.exports=function(t,e,r){var a,u;o(t);try{if(!(a=i(t,"return"))){if("throw"===e)throw r;return r}a=n(a,t)}catch(t){u=!0,a=t}if("throw"===e)throw r;if(u)throw a;return o(a),r}},1040:(t,e,r)=>{var n=r(1851).IteratorPrototype,o=r(5290),i=r(7738),a=r(2277),u=r(6775),c=function(){return this};t.exports=function(t,e,r,s){var f=e+" Iterator";return t.prototype=o(n,{next:i(+!s,r)}),a(t,f,!1,!0),u[f]=c,t}},5662:(t,e,r)=>{var n=r(8612),o=r(1807),i=r(9557),a=r(2048),u=r(1483),c=r(1040),s=r(3181),f=r(1953),l=r(2277),v=r(9037),p=r(7914),h=r(1),y=r(6775),d=r(1851),g=a.PROPER,b=a.CONFIGURABLE,m=d.IteratorPrototype,x=d.BUGGY_SAFARI_ITERATORS,w=h("iterator"),S="keys",O="values",E="entries",k=function(){return this};t.exports=function(t,e,r,a,h,d,j){c(r,e,a);var A,P,I,T=function(t){if(t===h&&D)return D;if(!x&&t&&t in N)return N[t];switch(t){case S:case O:case E:return function(){return new r(this,t)}}return function(){return new r(this)}},C=e+" Iterator",R=!1,N=t.prototype,_=N[w]||N["@@iterator"]||h&&N[h],D=!x&&_||T(h),F="Array"===e&&N.entries||_;if(F&&(A=s(F.call(new t)))!==Object.prototype&&A.next&&(i||s(A)===m||(f?f(A,m):u(A[w])||p(A,w,k)),l(A,C,!0,!0),i&&(y[C]=k)),g&&h===O&&_&&_.name!==O&&(!i&&b?v(N,"name",O):(R=!0,D=function(){return o(_,this)})),h)if(P={values:T(O),keys:d?D:T(S),entries:T(E)},j)for(I in P)(x||R||!(I in N))&&p(N,I,P[I]);else n({target:e,proto:!0,forced:x||R},P);return i&&!j||N[w]===D||p(N,w,D,{name:h}),y[e]=D,P}},1851:(t,e,r)=>{var n,o,i,a=r(8473),u=r(1483),c=r(1704),s=r(5290),f=r(3181),l=r(7914),v=r(1),p=r(9557),h=v("iterator"),y=!1;[].keys&&("next"in(i=[].keys())?(o=f(f(i)))!==Object.prototype&&(n=o):y=!0),!c(n)||a((function(){var t={};return n[h].call(t)!==t}))?n={}:p&&(n=s(n)),u(n[h])||l(n,h,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:y}},6775:t=>{t.exports={}},6960:(t,e,r)=>{var n=r(8324);t.exports=function(t){return n(t.length)}},169:(t,e,r)=>{var n=r(4762),o=r(8473),i=r(1483),a=r(5755),u=r(382),c=r(2048).CONFIGURABLE,s=r(7268),f=r(4483),l=f.enforce,v=f.get,p=String,h=Object.defineProperty,y=n("".slice),d=n("".replace),g=n([].join),b=u&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),m=String(String).split("String"),x=t.exports=function(t,e,r){"Symbol("===y(p(e),0,7)&&(e="["+d(p(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),r&&r.getter&&(e="get "+e),r&&r.setter&&(e="set "+e),(!a(t,"name")||c&&t.name!==e)&&(u?h(t,"name",{value:e,configurable:!0}):t.name=e),b&&r&&a(r,"arity")&&t.length!==r.arity&&h(t,"length",{value:r.arity});try{r&&a(r,"constructor")&&r.constructor?u&&h(t,"prototype",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var n=l(t);return a(n,"source")||(n.source=g(m,"string"==typeof e?e:"")),t};Function.prototype.toString=x((function(){return i(this)&&v(this).source||s(this)}),"toString")},1703:t=>{var e=Math.ceil,r=Math.floor;t.exports=Math.trunc||function(t){var n=+t;return(n>0?r:e)(n)}},4989:(t,e,r)=>{var n=r(4786),o=TypeError;t.exports=function(t){if(n(t))throw new o("The method doesn't accept regular expressions");return t}},5290:(t,e,r)=>{var n,o=r(2293),i=r(5799),a=r(4741),u=r(1507),c=r(2811),s=r(3145),f=r(5409),l="prototype",v="script",p=f("IE_PROTO"),h=function(){},y=function(t){return"<"+v+">"+t+"</"+v+">"},d=function(t){t.write(y("")),t.close();var e=t.parentWindow.Object;return t=null,e},g=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e,r;g="undefined"!=typeof document?document.domain&&n?d(n):(e=s("iframe"),r="java"+v+":",e.style.display="none",c.appendChild(e),e.src=String(r),(t=e.contentWindow.document).open(),t.write(y("document.F=Object")),t.close(),t.F):d(n);for(var o=a.length;o--;)delete g[l][a[o]];return g()};u[p]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h[l]=o(t),r=new h,h[l]=null,r[p]=t):r=g(),void 0===e?r:i.f(r,e)}},5799:(t,e,r)=>{var n=r(382),o=r(3896),i=r(5835),a=r(2293),u=r(5599),c=r(3658);e.f=n&&!o?Object.defineProperties:function(t,e){a(t);for(var r,n=u(e),o=c(e),s=o.length,f=0;s>f;)i.f(t,r=o[f++],n[r]);return t}},5835:(t,e,r)=>{var n=r(382),o=r(1799),i=r(3896),a=r(2293),u=r(3815),c=TypeError,s=Object.defineProperty,f=Object.getOwnPropertyDescriptor,l="enumerable",v="configurable",p="writable";e.f=n?i?function(t,e,r){if(a(t),e=u(e),a(r),"function"==typeof t&&"prototype"===e&&"value"in r&&p in r&&!r[p]){var n=f(t,e);n&&n[p]&&(t[e]=r.value,r={configurable:v in r?r[v]:n[v],enumerable:l in r?r[l]:n[l],writable:!1})}return s(t,e,r)}:s:function(t,e,r){if(a(t),e=u(e),a(r),o)try{return s(t,e,r)}catch(t){}if("get"in r||"set"in r)throw new c("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},4961:(t,e,r)=>{var n=r(382),o=r(1807),i=r(7611),a=r(7738),u=r(5599),c=r(3815),s=r(5755),f=r(1799),l=Object.getOwnPropertyDescriptor;e.f=n?l:function(t,e){if(t=u(t),e=c(e),f)try{return l(t,e)}catch(t){}if(s(t,e))return a(!o(i.f,t,e),t[e])}},2020:(t,e,r)=>{var n=r(1278),o=r(5599),i=r(2278).f,a=r(1698),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"Window"===n(t)?function(t){try{return i(t)}catch(t){return a(u)}}(t):i(o(t))}},2278:(t,e,r)=>{var n=r(6742),o=r(4741).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},4347:(t,e)=>{e.f=Object.getOwnPropertySymbols},3181:(t,e,r)=>{var n=r(5755),o=r(1483),i=r(2347),a=r(5409),u=r(9441),c=a("IE_PROTO"),s=Object,f=s.prototype;t.exports=u?s.getPrototypeOf:function(t){var e=i(t);if(n(e,c))return e[c];var r=e.constructor;return o(r)&&e instanceof r?r.prototype:e instanceof s?f:null}},706:(t,e,r)=>{var n=r(8473),o=r(1704),i=r(1278),a=r(9214),u=Object.isExtensible,c=n((function(){u(1)}));t.exports=c||a?function(t){return!!o(t)&&(!a||"ArrayBuffer"!==i(t))&&(!u||u(t))}:u},4815:(t,e,r)=>{var n=r(4762);t.exports=n({}.isPrototypeOf)},6742:(t,e,r)=>{var n=r(4762),o=r(5755),i=r(5599),a=r(6651).indexOf,u=r(1507),c=n([].push);t.exports=function(t,e){var r,n=i(t),s=0,f=[];for(r in n)!o(u,r)&&o(n,r)&&c(f,r);for(;e.length>s;)o(n,r=e[s++])&&(~a(f,r)||c(f,r));return f}},3658:(t,e,r)=>{var n=r(6742),o=r(4741);t.exports=Object.keys||function(t){return n(t,o)}},7611:(t,e)=>{var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);e.f=o?function(t){var e=n(this,t);return!!e&&e.enumerable}:r},1953:(t,e,r)=>{var n=r(680),o=r(2293),i=r(3852);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.prototype,"__proto__","set"))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),i(n),e?t(r,n):r.__proto__=n,r}}():void 0)},5627:(t,e,r)=>{var n=r(382),o=r(8473),i=r(4762),a=r(3181),u=r(3658),c=r(5599),s=i(r(7611).f),f=i([].push),l=n&&o((function(){var t=Object.create(null);return t[2]=2,!s(t,2)})),v=function(t){return function(e){for(var r,o=c(e),i=u(o),v=l&&null===a(o),p=i.length,h=0,y=[];p>h;)r=i[h++],n&&!(v?r in o:s(o,r))||f(y,t?[r,o[r]]:o[r]);return y}};t.exports={entries:v(!0),values:v(!1)}},5685:(t,e,r)=>{var n=r(4338),o=r(6145);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},348:(t,e,r)=>{var n=r(1807),o=r(1483),i=r(1704),a=TypeError;t.exports=function(t,e){var r,u;if("string"===e&&o(r=t.toString)&&!i(u=n(r,t)))return u;if(o(r=t.valueOf)&&!i(u=n(r,t)))return u;if("string"!==e&&o(r=t.toString)&&!i(u=n(r,t)))return u;throw new a("Can't convert object to primitive value")}},9497:(t,e,r)=>{var n=r(1409),o=r(4762),i=r(2278),a=r(4347),u=r(2293),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(u(t)),r=a.f;return r?c(e,r(t)):e}},6589:(t,e,r)=>{var n=r(8389);t.exports=n},7150:(t,e,r)=>{var n=r(5835).f;t.exports=function(t,e,r){r in t||n(t,r,{configurable:!0,get:function(){return e[r]},set:function(t){e[r]=t}})}},2428:(t,e,r)=>{var n=r(1807),o=r(2293),i=r(1483),a=r(1278),u=r(8865),c=TypeError;t.exports=function(t,e){var r=t.exec;if(i(r)){var s=n(r,t,e);return null!==s&&o(s),s}if("RegExp"===a(t))return n(u,t,e);throw new c("RegExp#exec called on incompatible receiver")}},8865:(t,e,r)=>{var n,o,i=r(1807),a=r(4762),u=r(6261),c=r(6653),s=r(7435),f=r(7255),l=r(5290),v=r(4483).get,p=r(3933),h=r(4528),y=f("native-string-replace",String.prototype.replace),d=RegExp.prototype.exec,g=d,b=a("".charAt),m=a("".indexOf),x=a("".replace),w=a("".slice),S=(o=/b*/g,i(d,n=/a/,"a"),i(d,o,"a"),0!==n.lastIndex||0!==o.lastIndex),O=s.BROKEN_CARET,E=void 0!==/()??/.exec("")[1];(S||E||O||p||h)&&(g=function(t){var e,r,n,o,a,s,f,p=this,h=v(p),k=u(t),j=h.raw;if(j)return j.lastIndex=p.lastIndex,e=i(g,j,k),p.lastIndex=j.lastIndex,e;var A=h.groups,P=O&&p.sticky,I=i(c,p),T=p.source,C=0,R=k;if(P&&(I=x(I,"y",""),-1===m(I,"g")&&(I+="g"),R=w(k,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==b(k,p.lastIndex-1))&&(T="(?: "+T+")",R=" "+R,C++),r=new RegExp("^(?:"+T+")",I)),E&&(r=new RegExp("^"+T+"$(?!\\s)",I)),S&&(n=p.lastIndex),o=i(d,P?r:p,R),P?o?(o.input=w(o.input,C),o[0]=w(o[0],C),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:S&&o&&(p.lastIndex=p.global?o.index+o[0].length:n),E&&o&&o.length>1&&i(y,o[0],r,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&A)for(o.groups=s=l(null),a=0;a<A.length;a++)s[(f=A[a])[0]]=o[f[1]];return o}),t.exports=g},6653:(t,e,r)=>{var n=r(2293);t.exports=function(){var t=n(this),e="";return t.hasIndices&&(e+="d"),t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.unicodeSets&&(e+="v"),t.sticky&&(e+="y"),e}},9736:(t,e,r)=>{var n=r(1807),o=r(5755),i=r(4815),a=r(6653),u=RegExp.prototype;t.exports=function(t){var e=t.flags;return void 0!==e||"flags"in u||o(t,"flags")||!i(u,t)?e:n(a,t)}},7435:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp,i=n((function(){var t=o("a","y");return t.lastIndex=2,null!==t.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),u=i||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!==t.exec("str")}));t.exports={BROKEN_CARET:u,MISSED_STICKY:a,UNSUPPORTED_Y:i}},3933:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.test("\n")&&"s"===t.flags)}))},4528:(t,e,r)=>{var n=r(8473),o=r(8389).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},3312:(t,e,r)=>{var n=r(5983),o=TypeError;t.exports=function(t){if(n(t))throw new o("Can't call method on "+t);return t}},240:(t,e,r)=>{var n=r(1409),o=r(3864),i=r(1),a=r(382),u=i("species");t.exports=function(t){var e=n(t);a&&e&&!e[u]&&o(e,u,{configurable:!0,get:function(){return this}})}},2277:(t,e,r)=>{var n=r(5835).f,o=r(5755),i=r(1)("toStringTag");t.exports=function(t,e,r){t&&!r&&(t=t.prototype),t&&!o(t,i)&&n(t,i,{configurable:!0,value:e})}},5409:(t,e,r)=>{var n=r(7255),o=r(1866),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},1831:(t,e,r)=>{var n=r(9557),o=r(8389),i=r(2095),a="__core-js_shared__",u=t.exports=o[a]||i(a,{});(u.versions||(u.versions=[])).push({version:"3.36.0",mode:n?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.36.0/LICENSE",source:"https://github.com/zloirock/core-js"})},7255:(t,e,r)=>{var n=r(1831);t.exports=function(t,e){return n[t]||(n[t]=e||{})}},9105:(t,e,r)=>{var n=r(4762),o=r(3005),i=r(6261),a=r(3312),u=n("".charAt),c=n("".charCodeAt),s=n("".slice),f=function(t){return function(e,r){var n,f,l=i(a(e)),v=o(r),p=l.length;return v<0||v>=p?t?"":void 0:(n=c(l,v))<55296||n>56319||v+1===p||(f=c(l,v+1))<56320||f>57343?t?u(l,v):n:t?s(l,v,v+2):f-56320+(n-55296<<10)+65536}};t.exports={codeAt:f(!1),charAt:f(!0)}},4544:(t,e,r)=>{var n=r(4762),o=r(3312),i=r(6261),a=r(5870),u=n("".replace),c=RegExp("^["+a+"]+"),s=RegExp("(^|[^"+a+"])["+a+"]+$"),f=function(t){return function(e){var r=i(o(e));return 1&t&&(r=u(r,c,"")),2&t&&(r=u(r,s,"$1")),r}};t.exports={start:f(1),end:f(2),trim:f(3)}},6029:(t,e,r)=>{var n=r(6170),o=r(8473),i=r(8389).String;t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol("symbol detection");return!i(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},8192:(t,e,r)=>{var n=r(1807),o=r(1409),i=r(1),a=r(7914);t.exports=function(){var t=o("Symbol"),e=t&&t.prototype,r=e&&e.valueOf,u=i("toPrimitive");e&&!e[u]&&a(e,u,(function(t){return n(r,this)}),{arity:1})}},3218:(t,e,r)=>{var n=r(6029);t.exports=n&&!!Symbol.for&&!!Symbol.keyFor},2430:(t,e,r)=>{var n=r(4762);t.exports=n(1..valueOf)},3392:(t,e,r)=>{var n=r(3005),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},5599:(t,e,r)=>{var n=r(2121),o=r(3312);t.exports=function(t){return n(o(t))}},3005:(t,e,r)=>{var n=r(1703);t.exports=function(t){var e=+t;return e!=e||0===e?0:n(e)}},8324:(t,e,r)=>{var n=r(3005),o=Math.min;t.exports=function(t){var e=n(t);return e>0?o(e,9007199254740991):0}},2347:(t,e,r)=>{var n=r(3312),o=Object;t.exports=function(t){return o(n(t))}},2355:(t,e,r)=>{var n=r(1807),o=r(1704),i=r(1423),a=r(2564),u=r(348),c=r(1),s=TypeError,f=c("toPrimitive");t.exports=function(t,e){if(!o(t)||i(t))return t;var r,c=a(t,f);if(c){if(void 0===e&&(e="default"),r=n(c,t,e),!o(r)||i(r))return r;throw new s("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},3815:(t,e,r)=>{var n=r(2355),o=r(1423);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},4338:(t,e,r)=>{var n={};n[r(1)("toStringTag")]="z",t.exports="[object z]"===String(n)},6261:(t,e,r)=>{var n=r(6145),o=String;t.exports=function(t){if("Symbol"===n(t))throw new TypeError("Cannot convert a Symbol value to a string");return o(t)}},8761:t=>{var e=String;t.exports=function(t){try{return e(t)}catch(t){return"Object"}}},1866:(t,e,r)=>{var n=r(4762),o=0,i=Math.random(),a=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},5022:(t,e,r)=>{var n=r(6029);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3896:(t,e,r)=>{var n=r(382),o=r(8473);t.exports=n&&o((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},4644:(t,e,r)=>{var n=r(8389),o=r(1483),i=n.WeakMap;t.exports=o(i)&&/native code/.test(String(i))},7849:(t,e,r)=>{var n=r(6589),o=r(5755),i=r(5373),a=r(5835).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},5373:(t,e,r)=>{var n=r(1);e.f=n},1:(t,e,r)=>{var n=r(8389),o=r(7255),i=r(5755),a=r(1866),u=r(6029),c=r(5022),s=n.Symbol,f=o("wks"),l=c?s.for||s:s&&s.withoutSetter||a;t.exports=function(t){return i(f,t)||(f[t]=u&&i(s,t)?s[t]:l("Symbol."+t)),f[t]}},5870:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},4776:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(4914),a=r(1704),u=r(2347),c=r(6960),s=r(1091),f=r(670),l=r(4551),v=r(4595),p=r(1),h=r(6170),y=p("isConcatSpreadable"),d=h>=51||!o((function(){var t=[];return t[y]=!1,t.concat()[0]!==t})),g=function(t){if(!a(t))return!1;var e=t[y];return void 0!==e?!!e:i(t)};n({target:"Array",proto:!0,arity:1,forced:!d||!v("concat")},{concat:function(t){var e,r,n,o,i,a=u(this),v=l(a,0),p=0;for(e=-1,n=arguments.length;e<n;e++)if(g(i=-1===e?a:arguments[e]))for(o=c(i),s(p+o),r=0;r<o;r++,p++)r in i&&f(v,p,i[r]);else s(p+1),f(v,p++,i);return v.length=p,v}})},4382:(t,e,r)=>{var n=r(8612),o=r(2867).filter;n({target:"Array",proto:!0,forced:!r(4595)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9892:(t,e,r)=>{var n=r(8612),o=r(6142);n({target:"Array",stat:!0,forced:!r(1554)((function(t){Array.from(t)}))},{from:o})},6281:(t,e,r)=>{var n=r(8612),o=r(6651).includes,i=r(8473),a=r(7095);n({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),a("includes")},4962:(t,e,r)=>{var n=r(5599),o=r(7095),i=r(6775),a=r(4483),u=r(5835).f,c=r(5662),s=r(5247),f=r(9557),l=r(382),v="Array Iterator",p=a.set,h=a.getterFor(v);t.exports=c(Array,"Array",(function(t,e){p(this,{type:v,target:n(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=void 0,s(void 0,!0);switch(t.kind){case"keys":return s(r,!1);case"values":return s(e[r],!1)}return s([r,e[r]],!1)}),"values");var y=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!f&&l&&"values"!==y.name)try{u(y,"name",{value:"values"})}catch(t){}},6584:(t,e,r)=>{var n=r(8612),o=r(2867).map;n({target:"Array",proto:!0,forced:!r(4595)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9336:(t,e,r)=>{var n=r(8612),o=r(4914),i=r(943),a=r(1704),u=r(3392),c=r(6960),s=r(5599),f=r(670),l=r(1),v=r(4595),p=r(1698),h=v("slice"),y=l("species"),d=Array,g=Math.max;n({target:"Array",proto:!0,forced:!h},{slice:function(t,e){var r,n,l,v=s(this),h=c(v),b=u(t,h),m=u(void 0===e?h:e,h);if(o(v)&&(r=v.constructor,(i(r)&&(r===d||o(r.prototype))||a(r)&&null===(r=r[y]))&&(r=void 0),r===d||void 0===r))return p(v,b,m);for(n=new(void 0===r?d:r)(g(m-b,0)),l=0;b<m;b++,l++)b in v&&f(n,l,v[b]);return n.length=l,n}})},4754:(t,e,r)=>{var n=r(5755),o=r(7914),i=r(6446),a=r(1)("toPrimitive"),u=Date.prototype;n(u,a)||o(u,a,i)},1908:(t,e,r)=>{var n=r(382),o=r(2048).EXISTS,i=r(4762),a=r(3864),u=Function.prototype,c=i(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,f=i(s.exec);n&&!o&&a(u,"name",{configurable:!0,get:function(){try{return f(s,c(this))[1]}catch(t){return""}}})},6184:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(3067),a=r(1807),u=r(4762),c=r(8473),s=r(1483),f=r(1423),l=r(1698),v=r(5215),p=r(6029),h=String,y=o("JSON","stringify"),d=u(/./.exec),g=u("".charAt),b=u("".charCodeAt),m=u("".replace),x=u(1..toString),w=/[\uD800-\uDFFF]/g,S=/^[\uD800-\uDBFF]$/,O=/^[\uDC00-\uDFFF]$/,E=!p||c((function(){var t=o("Symbol")("stringify detection");return"[null]"!==y([t])||"{}"!==y({a:t})||"{}"!==y(Object(t))})),k=c((function(){return'"\\udf06\\ud834"'!==y("\udf06\ud834")||'"\\udead"'!==y("\udead")})),j=function(t,e){var r=l(arguments),n=v(e);if(s(n)||void 0!==t&&!f(t))return r[1]=function(t,e){if(s(n)&&(e=a(n,this,h(t),e)),!f(e))return e},i(y,null,r)},A=function(t,e,r){var n=g(r,e-1),o=g(r,e+1);return d(S,t)&&!d(O,o)||d(O,t)&&!d(S,n)?"\\u"+x(b(t,0),16):t};y&&n({target:"JSON",stat:!0,arity:3,forced:E||k},{stringify:function(t,e,r){var n=l(arguments),o=i(E?j:y,null,n);return k&&"string"==typeof o?m(o,w,A):o}})},94:(t,e,r)=>{var n=r(8612),o=r(9557),i=r(382),a=r(8389),u=r(6589),c=r(4762),s=r(8730),f=r(5755),l=r(2429),v=r(4815),p=r(1423),h=r(2355),y=r(8473),d=r(2278).f,g=r(4961).f,b=r(5835).f,m=r(2430),x=r(4544).trim,w="Number",S=a[w],O=u[w],E=S.prototype,k=a.TypeError,j=c("".slice),A=c("".charCodeAt),P=s(w,!S(" 0o1")||!S("0b1")||S("+0x1")),I=function(t){var e,r=arguments.length<1?0:S(function(t){var e=h(t,"number");return"bigint"==typeof e?e:function(t){var e,r,n,o,i,a,u,c,s=h(t,"number");if(p(s))throw new k("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=x(s),43===(e=A(s,0))||45===e){if(88===(r=A(s,2))||120===r)return NaN}else if(48===e){switch(A(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(a=(i=j(s,2)).length,u=0;u<a;u++)if((c=A(i,u))<48||c>o)return NaN;return parseInt(i,n)}return+s}(e)}(t));return v(E,e=this)&&y((function(){m(e)}))?l(Object(r),this,I):r};I.prototype=E,P&&!o&&(E.constructor=I),n({global:!0,constructor:!0,wrap:!0,forced:P},{Number:I});var T=function(t,e){for(var r,n=i?d(e):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;n.length>o;o++)f(e,r=n[o])&&!f(t,r)&&b(t,r,g(e,r))};o&&O&&T(u[w],O),(P||o)&&T(u[w],S)},7132:(t,e,r)=>{var n=r(8612),o=r(5627).entries;n({target:"Object",stat:!0},{entries:function(t){return o(t)}})},6457:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(5599),a=r(4961).f,u=r(382);n({target:"Object",stat:!0,forced:!u||o((function(){a(1)})),sham:!u},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},8908:(t,e,r)=>{var n=r(8612),o=r(382),i=r(9497),a=r(5599),u=r(4961),c=r(670);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),o=u.f,s=i(n),f={},l=0;s.length>l;)void 0!==(r=o(n,e=s[l++]))&&c(f,e,r);return f}})},7859:(t,e,r)=>{var n=r(8612),o=r(6029),i=r(8473),a=r(4347),u=r(2347);n({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(t){var e=a.f;return e?e(u(t)):[]}})},6437:(t,e,r)=>{var n=r(8612),o=r(8473),i=r(2347),a=r(3181),u=r(9441);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!u},{getPrototypeOf:function(t){return a(i(t))}})},3810:(t,e,r)=>{var n=r(8612),o=r(2347),i=r(3658);n({target:"Object",stat:!0,forced:r(8473)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},2697:(t,e,r)=>{r(8612)({target:"Object",stat:!0},{setPrototypeOf:r(1953)})},8557:(t,e,r)=>{var n=r(4338),o=r(7914),i=r(5685);n||o(Object.prototype,"toString",i,{unsafe:!0})},1359:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(3067),a=r(2164),u=r(2374),c=r(2293),s=r(1704),f=r(5290),l=r(8473),v=o("Reflect","construct"),p=Object.prototype,h=[].push,y=l((function(){function t(){}return!(v((function(){}),[],t)instanceof t)})),d=!l((function(){v((function(){}))})),g=y||d;n({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(t,e){u(t),c(e);var r=arguments.length<3?t:u(arguments[2]);if(d&&!y)return v(t,e,r);if(t===r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return i(h,n,e),new(i(a,t,n))}var o=r.prototype,l=f(s(o)?o:p),g=i(t,l,e);return s(g)?g:l}})},646:(t,e,r)=>{var n=r(382),o=r(8389),i=r(4762),a=r(8730),u=r(2429),c=r(9037),s=r(5290),f=r(2278).f,l=r(4815),v=r(4786),p=r(6261),h=r(9736),y=r(7435),d=r(7150),g=r(7914),b=r(8473),m=r(5755),x=r(4483).enforce,w=r(240),S=r(1),O=r(3933),E=r(4528),k=S("match"),j=o.RegExp,A=j.prototype,P=o.SyntaxError,I=i(A.exec),T=i("".charAt),C=i("".replace),R=i("".indexOf),N=i("".slice),_=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,D=/a/g,F=/a/g,M=new j(D)!==D,L=y.MISSED_STICKY,$=y.UNSUPPORTED_Y;if(a("RegExp",n&&(!M||L||O||E||b((function(){return F[k]=!1,j(D)!==D||j(F)===F||"/a/i"!==String(j(D,"i"))}))))){for(var z=function(t,e){var r,n,o,i,a,f,y=l(A,this),d=v(t),g=void 0===e,b=[],w=t;if(!y&&d&&g&&t.constructor===z)return t;if((d||l(A,t))&&(t=t.source,g&&(e=h(w))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),w=t,O&&"dotAll"in D&&(n=!!e&&R(e,"s")>-1)&&(e=C(e,/s/g,"")),r=e,L&&"sticky"in D&&(o=!!e&&R(e,"y")>-1)&&$&&(e=C(e,/y/g,"")),E&&(i=function(t){for(var e,r=t.length,n=0,o="",i=[],a=s(null),u=!1,c=!1,f=0,l="";n<=r;n++){if("\\"===(e=T(t,n)))e+=T(t,++n);else if("]"===e)u=!1;else if(!u)switch(!0){case"["===e:u=!0;break;case"("===e:I(_,N(t,n+1))&&(n+=2,c=!0),o+=e,f++;continue;case">"===e&&c:if(""===l||m(a,l))throw new P("Invalid capture group name");a[l]=!0,i[i.length]=[l,f],c=!1,l="";continue}c?l+=e:o+=e}return[o,i]}(t),t=i[0],b=i[1]),a=u(j(t,e),y?this:A,z),(n||o||b.length)&&(f=x(a),n&&(f.dotAll=!0,f.raw=z(function(t){for(var e,r=t.length,n=0,o="",i=!1;n<=r;n++)"\\"!==(e=T(t,n))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+T(t,++n);return o}(t),r)),o&&(f.sticky=!0),b.length&&(f.groups=b)),t!==w)try{c(a,"source",""===w?"(?:)":w)}catch(t){}return a},G=f(j),B=0;G.length>B;)d(z,j,G[B++]);A.constructor=z,z.prototype=A,g(o,"RegExp",z,{constructor:!0})}w("RegExp")},5021:(t,e,r)=>{var n=r(8612),o=r(8865);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},3687:(t,e,r)=>{var n=r(2048).PROPER,o=r(7914),i=r(2293),a=r(6261),u=r(8473),c=r(9736),s="toString",f=RegExp.prototype,l=f[s],v=u((function(){return"/a/b"!==l.call({source:"a",flags:"b"})})),p=n&&l.name!==s;(v||p)&&o(f,s,(function(){var t=i(this);return"/"+a(t.source)+"/"+a(c(t))}),{unsafe:!0})},9203:(t,e,r)=>{r(7446)("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(4092))},2745:(t,e,r)=>{r(9203)},9425:(t,e,r)=>{var n=r(8612),o=r(4762),i=r(4989),a=r(3312),u=r(6261),c=r(4522),s=o("".indexOf);n({target:"String",proto:!0,forced:!c("includes")},{includes:function(t){return!!~s(u(a(this)),u(i(t)),arguments.length>1?arguments[1]:void 0)}})},3994:(t,e,r)=>{var n=r(9105).charAt,o=r(6261),i=r(4483),a=r(5662),u=r(5247),c="String Iterator",s=i.set,f=i.getterFor(c);a(String,"String",(function(t){s(this,{type:c,string:o(t),index:0})}),(function(){var t,e=f(this),r=e.string,o=e.index;return o>=r.length?u(void 0,!0):(t=n(r,o),e.index+=t.length,u(t,!1))}))},3062:(t,e,r)=>{var n=r(3067),o=r(1807),i=r(4762),a=r(3358),u=r(8473),c=r(2293),s=r(1483),f=r(5983),l=r(3005),v=r(8324),p=r(6261),h=r(3312),y=r(4419),d=r(2564),g=r(708),b=r(2428),m=r(1)("replace"),x=Math.max,w=Math.min,S=i([].concat),O=i([].push),E=i("".indexOf),k=i("".slice),j="$0"==="a".replace(/./,"$0"),A=!!/./[m]&&""===/./[m]("a","$0");a("replace",(function(t,e,r){var i=A?"$":"$0";return[function(t,r){var n=h(this),i=f(t)?void 0:d(t,m);return i?o(i,t,n,r):o(e,p(n),t,r)},function(t,o){var a=c(this),u=p(t);if("string"==typeof o&&-1===E(o,i)&&-1===E(o,"$<")){var f=r(e,a,u,o);if(f.done)return f.value}var h=s(o);h||(o=p(o));var d,m=a.global;m&&(d=a.unicode,a.lastIndex=0);for(var j,A=[];null!==(j=b(a,u))&&(O(A,j),m);)""===p(j[0])&&(a.lastIndex=y(u,v(a.lastIndex),d));for(var P,I="",T=0,C=0;C<A.length;C++){for(var R,N=p((j=A[C])[0]),_=x(w(l(j.index),u.length),0),D=[],F=1;F<j.length;F++)O(D,void 0===(P=j[F])?P:String(P));var M=j.groups;if(h){var L=S([N],D,_,u);void 0!==M&&O(L,M),R=p(n(o,void 0,L))}else R=g(N,u,_,D,M,o);_>=T&&(I+=k(u,T,_)+R,T=_+N.length)}return I+k(u,T)}]}),!!u((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!j||A)},4062:(t,e,r)=>{var n,o=r(8612),i=r(3786),a=r(4961).f,u=r(8324),c=r(6261),s=r(4989),f=r(3312),l=r(4522),v=r(9557),p=i("".slice),h=Math.min,y=l("startsWith");o({target:"String",proto:!0,forced:!(!v&&!y&&(n=a(String.prototype,"startsWith"),n&&!n.writable)||y)},{startsWith:function(t){var e=c(f(this));s(t);var r=u(h(arguments.length>1?arguments[1]:void 0,e.length)),n=c(t);return p(e,r,r+n.length)===n}})},5443:(t,e,r)=>{var n=r(8612),o=r(8389),i=r(1807),a=r(4762),u=r(9557),c=r(382),s=r(6029),f=r(8473),l=r(5755),v=r(4815),p=r(2293),h=r(5599),y=r(3815),d=r(6261),g=r(7738),b=r(5290),m=r(3658),x=r(2278),w=r(2020),S=r(4347),O=r(4961),E=r(5835),k=r(5799),j=r(7611),A=r(7914),P=r(3864),I=r(7255),T=r(5409),C=r(1507),R=r(1866),N=r(1),_=r(5373),D=r(7849),F=r(8192),M=r(2277),L=r(4483),$=r(2867).forEach,z=T("hidden"),G="Symbol",B="prototype",U=L.set,W=L.getterFor(G),V=Object[B],K=o.Symbol,q=K&&K[B],Y=o.RangeError,X=o.TypeError,H=o.QObject,J=O.f,Q=E.f,Z=w.f,tt=j.f,et=a([].push),rt=I("symbols"),nt=I("op-symbols"),ot=I("wks"),it=!H||!H[B]||!H[B].findChild,at=function(t,e,r){var n=J(V,e);n&&delete V[e],Q(t,e,r),n&&t!==V&&Q(V,e,n)},ut=c&&f((function(){return 7!==b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?at:Q,ct=function(t,e){var r=rt[t]=b(q);return U(r,{type:G,tag:t,description:e}),c||(r.description=e),r},st=function(t,e,r){t===V&&st(nt,e,r),p(t);var n=y(e);return p(r),l(rt,n)?(r.enumerable?(l(t,z)&&t[z][n]&&(t[z][n]=!1),r=b(r,{enumerable:g(0,!1)})):(l(t,z)||Q(t,z,g(1,b(null))),t[z][n]=!0),ut(t,n,r)):Q(t,n,r)},ft=function(t,e){p(t);var r=h(e),n=m(r).concat(ht(r));return $(n,(function(e){c&&!i(lt,r,e)||st(t,e,r[e])})),t},lt=function(t){var e=y(t),r=i(tt,this,e);return!(this===V&&l(rt,e)&&!l(nt,e))&&(!(r||!l(this,e)||!l(rt,e)||l(this,z)&&this[z][e])||r)},vt=function(t,e){var r=h(t),n=y(e);if(r!==V||!l(rt,n)||l(nt,n)){var o=J(r,n);return!o||!l(rt,n)||l(r,z)&&r[z][n]||(o.enumerable=!0),o}},pt=function(t){var e=Z(h(t)),r=[];return $(e,(function(t){l(rt,t)||l(C,t)||et(r,t)})),r},ht=function(t){var e=t===V,r=Z(e?nt:h(t)),n=[];return $(r,(function(t){!l(rt,t)||e&&!l(V,t)||et(n,rt[t])})),n};s||(A(q=(K=function(){if(v(q,this))throw new X("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?d(arguments[0]):void 0,e=R(t),r=function(t){var n=void 0===this?o:this;n===V&&i(r,nt,t),l(n,z)&&l(n[z],e)&&(n[z][e]=!1);var a=g(1,t);try{ut(n,e,a)}catch(t){if(!(t instanceof Y))throw t;at(n,e,a)}};return c&&it&&ut(V,e,{configurable:!0,set:r}),ct(e,t)})[B],"toString",(function(){return W(this).tag})),A(K,"withoutSetter",(function(t){return ct(R(t),t)})),j.f=lt,E.f=st,k.f=ft,O.f=vt,x.f=w.f=pt,S.f=ht,_.f=function(t){return ct(N(t),t)},c&&(P(q,"description",{configurable:!0,get:function(){return W(this).description}}),u||A(V,"propertyIsEnumerable",lt,{unsafe:!0}))),n({global:!0,constructor:!0,wrap:!0,forced:!s,sham:!s},{Symbol:K}),$(m(ot),(function(t){D(t)})),n({target:G,stat:!0,forced:!s},{useSetter:function(){it=!0},useSimple:function(){it=!1}}),n({target:"Object",stat:!0,forced:!s,sham:!c},{create:function(t,e){return void 0===e?b(t):ft(b(t),e)},defineProperty:st,defineProperties:ft,getOwnPropertyDescriptor:vt}),n({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:pt}),F(),M(K,G),C[z]=!0},2733:(t,e,r)=>{var n=r(8612),o=r(382),i=r(8389),a=r(4762),u=r(5755),c=r(1483),s=r(4815),f=r(6261),l=r(3864),v=r(6726),p=i.Symbol,h=p&&p.prototype;if(o&&c(p)&&(!("description"in h)||void 0!==p().description)){var y={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:f(arguments[0]),e=s(h,this)?new p(t):void 0===t?p():p(t);return""===t&&(y[e]=!0),e};v(d,p),d.prototype=h,h.constructor=d;var g="Symbol(description detection)"===String(p("description detection")),b=a(h.valueOf),m=a(h.toString),x=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),S=a("".slice);l(h,"description",{configurable:!0,get:function(){var t=b(this);if(u(y,t))return"";var e=m(t),r=g?S(e,7,-1):w(e,x,"$1");return""===r?void 0:r}}),n({global:!0,constructor:!0,forced:!0},{Symbol:d})}},2484:(t,e,r)=>{var n=r(8612),o=r(1409),i=r(5755),a=r(6261),u=r(7255),c=r(3218),s=u("string-to-symbol-registry"),f=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!c},{for:function(t){var e=a(t);if(i(s,e))return s[e];var r=o("Symbol")(e);return s[e]=r,f[r]=e,r}})},4701:(t,e,r)=>{r(7849)("iterator")},9305:(t,e,r)=>{r(5443),r(2484),r(1894),r(6184),r(7859)},1894:(t,e,r)=>{var n=r(8612),o=r(5755),i=r(1423),a=r(8761),u=r(7255),c=r(3218),s=u("symbol-to-string-registry");n({target:"Symbol",stat:!0,forced:!c},{keyFor:function(t){if(!i(t))throw new TypeError(a(t)+" is not a symbol");if(o(s,t))return s[t]}})},1678:(t,e,r)=>{var n=r(7849),o=r(8192);n("toPrimitive"),o()},3630:(t,e,r)=>{var n=r(8389),o=r(4842),i=r(1902),a=r(4793),u=r(9037),c=function(t){if(t&&t.forEach!==a)try{u(t,"forEach",a)}catch(e){t.forEach=a}};for(var s in o)o[s]&&c(n[s]&&n[s].prototype);c(i)},2367:(t,e,r)=>{var n=r(8389),o=r(4842),i=r(1902),a=r(4962),u=r(9037),c=r(2277),s=r(1)("iterator"),f=a.values,l=function(t,e){if(t){if(t[s]!==f)try{u(t,s,f)}catch(e){t[s]=f}if(c(t,e,!0),o[e])for(var r in a)if(t[r]!==a[r])try{u(t,r,a[r])}catch(e){t[r]=a[r]}}};for(var v in o)l(n[v]&&n[v].prototype,v);l(i,"DOMTokenList")}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{function t(){for(var t=document.cookie.split(";"),e=[],r=new RegExp("^\\s*([^=]+)\\s*=\\s*(.*?)$"),n=0;n<t.length;n++){var o=t[n],i=r.exec(o);null!==i&&e.push({name:i[1],value:i[2]})}return e}function e(t,e,r){var n=t+"=; Max-Age=-99999999;";document.cookie=n,n+=" path="+(e||"/")+";",document.cookie=n,void 0!==r&&(n+=" domain="+r+";",document.cookie=n)}r.r(n),r.d(n,{default:()=>T}),r(9305),r(2733),r(4701),r(1678),r(4776),r(4382),r(9892),r(4962),r(6584),r(9336),r(4754),r(1908),r(94),r(7132),r(6457),r(8908),r(3810),r(8557),r(646),r(5021),r(3687),r(2745),r(3994),r(3062),r(4062),r(3630),r(2367);var o=r(5482);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,e,r){return e=c(e),function(t,e){if(e&&("object"===i(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(t,u()?Reflect.construct(e,r||[],c(t).constructor):e.apply(t,r))}function u(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(u=function(){return!!t})()}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},c(t)}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}function f(t,e){return f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},f(t,e)}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,h(n.key),n)}}function p(t,e,r){return e&&v(t.prototype,e),r&&v(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function h(t){var e=function(t,e){if("object"!=i(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==i(e)?e:String(e)}r(6437),r(2697),r(1359);var y=function(){function t(){l(this,t),this.value=null}return p(t,[{key:"get",value:function(){return this.value}},{key:"set",value:function(t){this.value=t}},{key:"delete",value:function(){this.value=null}}]),t}(),d=function(){function r(t){l(this,r),this.cookieName=t.storageName,this.cookieDomain=t.cookieDomain,this.cookiePath=t.cookiePath,this.cookieExpiresAfterDays=t.cookieExpiresAfterDays}return p(r,[{key:"get",value:function(){var e=function(e){for(var r=t(),n=0;n<r.length;n++)if(r[n].name===e)return r[n];return null}(this.cookieName);return e?e.value:null}},{key:"set",value:function(t){return function(t,e,r,n,o){var i="";if(r){var a=new Date;a.setTime(a.getTime()+24*r*60*60*1e3),i="; expires="+a.toUTCString()}void 0!==n&&(i+="; domain="+n),i+=void 0!==o?"; path="+o:"; path=/",document.cookie=t+"="+(e||"")+i+"; SameSite=Lax"}(this.cookieName,t,this.cookieExpiresAfterDays,this.cookieDomain,this.cookiePath)}},{key:"delete",value:function(){return e(this.cookieName)}}]),r}(),g=function(){function t(e,r){l(this,t),this.key=e.storageName,this.handle=r}return p(t,[{key:"get",value:function(){return this.handle.getItem(this.key)}},{key:"getWithKey",value:function(t){return this.handle.getItem(t)}},{key:"set",value:function(t){return this.handle.setItem(this.key,t)}},{key:"setWithKey",value:function(t,e){return this.handle.setItem(t,e)}},{key:"delete",value:function(){return this.handle.removeItem(this.key)}},{key:"deleteWithKey",value:function(t){return this.handle.removeItem(t)}}]),t}(),b=function(t){function e(t){return l(this,e),a(this,e,[t,localStorage])}return s(e,t),p(e)}(g),m=function(t){function e(t){return l(this,e),a(this,e,[t,sessionStorage])}return s(e,t),p(e)}(g);const x={cookie:d,test:y,localStorage:b,sessionStorage:m};function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function S(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=E(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function O(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,u=[],c=!0,s=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(u.push(n.value),u.length!==e);c=!0);}catch(t){s=!0,o=t}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return u}}(t,e)||E(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(t,e){if(t){if("string"==typeof t)return k(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?k(t,e):void 0}}function k(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function j(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function A(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?j(Object(r),!0).forEach((function(e){var n,o,i;n=t,o=e,i=r[e],(o=I(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):j(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function P(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,I(n.key),n)}}function I(t){var e=function(t,e){if("object"!=w(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!=w(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==w(e)?e:String(e)}var T=function(){function r(t,e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.config=t,this.store=void 0!==e?e:new x[this.storageMethod](this),void 0===this.store&&(this.store=x.cookie),this.auxiliaryStore=void 0!==n?n:new m(this),this.consents=this.defaultConsents,this.confirmed=!1,this.changed=!1,this.states={},this.initialized={},this.executedOnce={},this.watchers=new Set([]),this.loadConsents(),this.applyConsents(),this.savedConsents=A({},this.consents)}var n,i;return n=r,(i=[{key:"storageMethod",get:function(){return this.config.storageMethod||"cookie"}},{key:"storageName",get:function(){return this.config.storageName||this.config.cookieName||"klaro"}},{key:"cookieDomain",get:function(){return this.config.cookieDomain||void 0}},{key:"cookiePath",get:function(){return this.config.cookiePath||void 0}},{key:"cookieExpiresAfterDays",get:function(){return this.config.cookieExpiresAfterDays||120}},{key:"defaultConsents",get:function(){for(var t={},e=0;e<this.config.services.length;e++){var r=this.config.services[e];t[r.name]=this.getDefaultConsent(r)}return t}},{key:"watch",value:function(t){this.watchers.has(t)||this.watchers.add(t)}},{key:"unwatch",value:function(t){this.watchers.has(t)&&this.watchers.delete(t)}},{key:"notify",value:function(t,e){var r=this;this.watchers.forEach((function(n){n.update(r,t,e)}))}},{key:"getService",value:function(t){var e=this.config.services.filter((function(e){return e.name===t}));if(e.length>0)return e[0]}},{key:"getDefaultConsent",value:function(t){var e=t.default||t.required;return void 0===e&&(e=this.config.default),void 0===e&&(e=!1),e}},{key:"changeAll",value:function(t){var e=this,r=0;return this.config.services.filter((function(t){return!t.contextualConsentOnly})).map((function(n){n.required||e.config.required||t?e.updateConsent(n.name,!0)&&r++:e.updateConsent(n.name,!1)&&r++})),r}},{key:"updateConsent",value:function(t,e){var r=(this.consents[t]||!1)!==e;return this.consents[t]=e,this.notify("consents",this.consents),r}},{key:"resetConsents",value:function(){this.consents=this.defaultConsents,this.states={},this.confirmed=!1,this.applyConsents(),this.savedConsents=A({},this.consents),this.store.delete(),this.notify("consents",this.consents)}},{key:"getConsent",value:function(t){return this.consents[t]||!1}},{key:"loadConsents",value:function(){var t=this.store.get();return null!==t&&(this.consents=JSON.parse(decodeURIComponent(t)),this._checkConsents(),this.notify("consents",this.consents)),this.consents}},{key:"saveAndApplyConsents",value:function(t){this.saveConsents(t),this.applyConsents()}},{key:"changedConsents",value:function(){for(var t={},e=0,r=Object.entries(this.consents);e<r.length;e++){var n=O(r[e],2),o=n[0],i=n[1];this.savedConsents[o]!==i&&(t[o]=i)}return t}},{key:"saveConsents",value:function(t){var e=encodeURIComponent(JSON.stringify(this.consents));this.store.set(e),this.confirmed=!0,this.changed=!1;var r=this.changedConsents();this.savedConsents=A({},this.consents),this.notify("saveConsents",{changes:r,consents:this.consents,type:t||"script"})}},{key:"applyConsents",value:function(t,e,r){function n(t,e){if(void 0!==t)return("function"==typeof t?t:new Function("opts",t))(e)}for(var o=0,i=0;i<this.config.services.length;i++){var a=this.config.services[i];if(void 0===r||r===a.name){var u=a.vars||{},c={service:a,config:this.config,vars:u};this.initialized[a.name]||(this.initialized[a.name]=!0,n(a.onInit,c))}}for(var s=0;s<this.config.services.length;s++){var f=this.config.services[s];if(void 0===r||r===f.name){var l=this.states[f.name],v=f.vars||{},p=void 0!==f.optOut?f.optOut:this.config.optOut||!1,h=void 0!==f.required?f.required:this.config.required||!1,y=this.confirmed||p||t||e,d=this.getConsent(f.name)&&y||h,g={service:f,config:this.config,vars:v,consents:this.consents,confirmed:this.confirmed};l!==d&&o++,t||(n(d?f.onAccept:f.onDecline,g),this.updateServiceElements(f,d),this.updateServiceStorage(f,d),void 0!==f.callback&&f.callback(d,f),void 0!==this.config.callback&&this.config.callback(d,f),this.states[f.name]=d)}}return this.notify("applyConsents",o,r),o}},{key:"updateServiceElements",value:function(t,e){if(e){if(t.onlyOnce&&this.executedOnce[t.name])return;this.executedOnce[t.name]=!0}for(var r=document.querySelectorAll("[data-name='"+t.name+"']"),n=0;n<r.length;n++){var i=r[n],a=i.parentElement,u=(0,o.RT)(i),c=u.type,s=u.src,f=u.href,l=["href","src","type"];if("placeholder"!==c)if("IFRAME"===i.tagName){if(e&&i.src===s){console.debug("Skipping ".concat(i.tagName," for service ").concat(t.name,", as it already has the correct type..."));continue}var v,p=document.createElement(i.tagName),h=S(i.attributes);try{for(h.s();!(v=h.n()).done;){var y=v.value;p.setAttribute(y.name,y.value)}}catch(t){h.e(t)}finally{h.f()}p.innerText=i.innerText,p.text=i.text,e?(void 0!==u["original-display"]&&(p.style.display=u["original-display"]),void 0!==u.src&&(p.src=u.src)):(p.src="",void 0!==u["modified-by-klaro"]&&void 0!==u["original-display"]?p.setAttribute("data-original-display",u["original-display"]):(void 0!==i.style.display&&p.setAttribute("data-original-display",i.style.display),p.setAttribute("data-modified-by-klaro","yes")),p.style.display="none"),a.insertBefore(p,i),a.removeChild(i)}else if("SCRIPT"===i.tagName||"LINK"===i.tagName){if(e&&i.type===(c||"")&&i.src===s){console.debug("Skipping ".concat(i.tagName," for service ").concat(t.name,", as it already has the correct type or src..."));continue}var d,g=document.createElement(i.tagName),b=S(i.attributes);try{for(b.s();!(d=b.n()).done;){var m=d.value;g.setAttribute(m.name,m.value)}}catch(t){b.e(t)}finally{b.f()}g.innerText=i.innerText,g.text=i.text,e?(g.type=c||"",void 0!==s&&(g.src=s),void 0!==f&&(g.href=f)):g.type="text/plain",a.insertBefore(g,i),a.removeChild(i)}else{if(e){var x,w=S(l);try{for(w.s();!(x=w.n()).done;){var O=x.value,E=u[O];void 0!==E&&(void 0===u["original-"+O]&&(u["original-"+O]=i[O]),i[O]=E)}}catch(t){w.e(t)}finally{w.f()}void 0!==u.title&&(i.title=u.title),void 0!==u["original-display"]?i.style.display=u["original-display"]:i.style.removeProperty("display")}else{void 0!==u.title&&i.removeAttribute("title"),void 0===u["original-display"]&&void 0!==i.style.display&&(u["original-display"]=i.style.display),i.style.display="none";var k,j=S(l);try{for(j.s();!(k=j.n()).done;){var A=k.value;void 0!==u[A]&&(void 0!==u["original-"+A]?i[A]=u["original-"+A]:i.removeAttribute(A))}}catch(t){j.e(t)}finally{j.f()}}(0,o.X7)(u,i)}else e?(i.style.display="none",u["original-display"]=i.style.display):i.style.display=u["original-display"]||"block"}}},{key:"updateServiceStorage",value:function(r,n){if(!n&&void 0!==r.cookies&&r.cookies.length>0)for(var o=t(),i=0;i<r.cookies.length;i++){var a=r.cookies[i],u=void 0,c=void 0;if(a instanceof Array){var s=O(a,3);a=s[0],u=s[1],c=s[2]}else if(a instanceof Object&&!(a instanceof RegExp)){var f=a;a=f.pattern,u=f.path,c=f.domain}if(void 0!==a){a instanceof RegExp||(a=a.startsWith("^")?new RegExp(a):new RegExp("^"+a.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")+"$"));for(var l=0;l<o.length;l++){var v=o[l];null!==a.exec(v.name)&&(console.debug("Deleting cookie:",v.name,"Matched pattern:",a,"Path:",u,"Domain:",c),e(v.name,u,c),void 0===c&&e(v.name,u,"."+window.location.hostname))}}}}},{key:"_checkConsents",value:function(){for(var t=!0,e=new Set(this.config.services.map((function(t){return t.name}))),r=new Set(Object.keys(this.consents)),n=0,o=Object.keys(this.consents);n<o.length;n++){var i=o[n];e.has(i)||delete this.consents[i]}var a,u=S(this.config.services);try{for(u.s();!(a=u.n()).done;){var c=a.value;r.has(c.name)||(this.consents[c.name]=this.getDefaultConsent(c),t=!1)}}catch(t){u.e(t)}finally{u.f()}this.confirmed=t,t||(this.changed=!0)}}])&&P(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),r}()})(),n})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUIsS0FBSzJ3QixPQUFPaUIsVUFBUSxJQUF6QyxJQUFBd0YsRUFBQTFCLE1BQUF5QixFQUFBQyxFQUFBeGpCLEtBQUFyUyxNQUEwQyxLQUFoQ3N3QixFQUFPc0YsRUFBQTc1QixNQUNSeXpCLEVBQVNqcEIsSUFBSStwQixFQUFRMTBCLFFBQ3RCNkMsS0FBSyt3QixTQUFTYyxFQUFRMTBCLE1BQVE2QyxLQUFLOHhCLGtCQUFrQkQsR0FDckRtRixHQUFXLEVBRW5CLENBQUMsT0FBQXJCLEdBQUF5QixFQUFBcEosRUFBQTJILEVBQUEsU0FBQXlCLEVBQUE3c0IsR0FBQSxDQUNEdkssS0FBS2l4QixVQUFZK0YsRUFDWkEsSUFDRGgzQixLQUFLa3hCLFNBQVUsRUFDdkIsTSxvRUFBQ1IsQ0FBQSxDQW5iOEIsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvY29tcGF0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWpzb24tcmVwbGFjZXItZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvci1jbG9zZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYWtlLWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC10cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm94eS1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZ2V0LWZsYWdzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmZvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi91dGlscy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL3N0b3Jlcy5qcyIsIndlYnBhY2s6Ly8vLi9jb25zZW50LW1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiY21cIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiY21cIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCAoKSA9PiB7XG5yZXR1cm4gIiwiZXhwb3J0IGZ1bmN0aW9uIGN1cnJlbnRTY3JpcHQobmFtZSkge1xuICAgIC8vIG1vc3QgYnJvd3NlciBzdXBwb3J0IHRoaXMgKGJ1dCBhbGFzLCBub3QgSUUxMSlcbiAgICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCAhPT0gbnVsbCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICE9PSB1bmRlZmluZWQpIHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xuICAgIGNvbnN0IHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IHNjcmlwdHNbaV07XG4gICAgICAgIC8vIGlmIHRoZSBzY3JpcHQgc3JjIGluY2x1ZGVzIHRoZSBnaXZlbiBuYW1lIChrbGFybykgd2UgcmV0dXJuXG4gICAgICAgIC8vIHRoZSBzY3JpcHQgYW5kIGhvcGUgZm9yIHRoZSBiZXN0XG4gICAgICAgIGlmIChzY3JpcHQuc3JjLmluY2x1ZGVzKG5hbWUpKSByZXR1cm4gc2NyaXB0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXNldChlbGVtZW50KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGVsZW1lbnQuYXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLnN0YXJ0c1dpdGgoJ2RhdGEtJykpIHtcbiAgICAgICAgICAgIGRhdGFzZXRbYXR0cmlidXRlLm5hbWUuc2xpY2UoNSldID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhc2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlEYXRhc2V0KGRzLCBlbGVtZW50KSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkc1trZXldO1xuICAgICAgICBpZiAoZWxlbWVudFtrZXldID09PSB2YWx1ZSkgY29udGludWU7XG4gICAgICAgIGVsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtleSwgdmFsdWUpO1xuICAgIH1cbn1cblxuLypcblRoaXMgcmVwbGFjZXMgQ1NTIHZhcmlhYmxlcy5cbiovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUNTU1ZhcmlhYmxlcyh2YXJpYWJsZXMpe1xuICAgIGNvbnN0IGtsYXJvU3R5bGVFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2RhdGEtY29udGV4dD1rbGFyby1zdHlsZXNdJylcbiAgICBmb3IoY29uc3QgZWxlbWVudCBvZiBrbGFyb1N0eWxlRWxlbWVudHMpe1xuICAgICAgICBsZXQgY3NzID0gZWxlbWVudC5pbm5lclRleHRcbiAgICAgICAgaWYgKGVsZW1lbnQuc3R5bGVTaGVldCAhPT0gdW5kZWZpbmVkKSAvLyBJRVxuICAgICAgICAgICAgY3NzID0gZWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHRcbiAgICAgICAgZm9yKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YXJpYWJsZXMpKXtcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcIihbYS16MC05LV0rKTpbXjtdKztbXFxcXHNcXFxcbl0qXFxcXDE6XFxcXHMqdmFyXFxcXCgtLVwiK2tleStcIixcXFxccypbXlxcXFwpXStcXFxcKVwiLCAnZycpXG4gICAgICAgICAgICBjc3MgPSBjc3MucmVwbGFjZShyZWdleCwgKF8sIG5hbWUpID0+IGAke25hbWV9OiAke3ZhbHVlfTsgJHtuYW1lfTogdmFyKC0tJHtrZXl9LCAke3ZhbHVlfSlgKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIilcbiAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIilcbiAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRleHRcIiwgXCJrbGFyby1zdHlsZXNcIilcbiAgICAgICAgaWYgKG5ld0VsZW1lbnQuc3R5bGVTaGVldCAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG5ld0VsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdFbGVtZW50LmlubmVyVGV4dCA9IGNzc1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIHJlbW92ZSB0aGUgb2xkIGVsZW1lbnQgYW5kIGluc2VydCB0aGUgbmV3IG9uZVxuICAgICAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudClcbiAgICAgICAgZWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ29uc3RydWN0b3IoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc1Bvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNQb3NzaWJsZVByb3RvdHlwZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyAkU3RyaW5nKGFyZ3VtZW50KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eShBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUHJvdG90eXBlKSB7XG4gIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcigkU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZGMjYtIGJ1ZzogQXJyYXlCdWZmZXJzIGFyZSBub24tZXh0ZW5zaWJsZSwgYnV0IE9iamVjdC5pc0V4dGVuc2libGUgZG9lcyBub3QgcmVwb3J0IGl0XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoOCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUoYnVmZmVyKSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJ1ZmZlciwgJ2EnLCB7IHZhbHVlOiA4IH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT09ICRBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdO1xuICAgIGZvciAoOyEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICByZXN1bHQgPSBJU19DT05TVFJVQ1RPUiA/IG5ldyB0aGlzKGxlbmd0aCkgOiAkQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIGlmIChsZW5ndGggPT09IDApIHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9PSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBmb3JFYWNoLCBtYXAsIGZpbHRlciwgc29tZSwgZXZlcnksIGZpbmQsIGZpbmRJbmRleCwgZmlsdGVyUmVqZWN0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT09IDc7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKHNlbGYpO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgdHJ5IHtcbiAgICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IHJldHVybiBmYWxzZTsgfSAvLyB3b3JrYXJvdW5kIG9mIG9sZCBXZWJLaXQgKyBgZXZhbGAgYnVnXG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT09ICdPYmplY3QnICYmIGlzQ2FsbGFibGUoTy5jYWxsZWUpID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5mYXN0S2V5O1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBQcm90b3R5cGUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGluZGV4OiBjcmVhdGUobnVsbCksXG4gICAgICAgIGZpcnN0OiB1bmRlZmluZWQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgc2l6ZTogMFxuICAgICAgfSk7XG4gICAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGF0LnNpemUgPSAwO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmNsZWFyKClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5jbGVhclxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlLmluZGV4ID0gY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wcmV2aW91cyA9IHByZXY7XG4gICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihQcm90b3R5cGUsICdzaXplJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09PSAna2V5cycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGVudHJ5LmtleSwgZmFsc2UpO1xuICAgICAgaWYgKGtpbmQgPT09ICd2YWx1ZXMnKSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChlbnRyeS52YWx1ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2VudHJ5LmtleSwgZW50cnkudmFsdWVdLCBmYWxzZSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGVbQEBzcGVjaWVzXWAgYWNjZXNzb3JzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLUBAc3BlY2llc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXNldC1AQHNwZWNpZXNcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKE5hdGl2ZVByb3RvdHlwZVtLRVldKTtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgKTtcbiAgfTtcblxuICB2YXIgUkVQTEFDRSA9IGlzRm9yY2VkKFxuICAgIENPTlNUUlVDVE9SX05BTUUsXG4gICAgIWlzQ2FsbGFibGUoTmF0aXZlQ29uc3RydWN0b3IpIHx8ICEoSVNfV0VBSyB8fCBOYXRpdmVQcm90b3R5cGUuZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCkuZW50cmllcygpLm5leHQoKTtcbiAgICB9KSlcbiAgKTtcblxuICBpZiAoUkVQTEFDRSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQ29uc3RydWN0b3IgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgfSBlbHNlIGlmIChpc0ZvcmNlZChDT05TVFJVQ1RPUl9OQU1FLCB0cnVlKSkge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9PSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+IENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgeyBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOyB9KTtcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuXG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBOYXRpdmVQcm90b3R5cGUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gTmF0aXZlUHJvdG90eXBlO1xuICAgICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG5cbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIE5hdGl2ZVByb3RvdHlwZS5jbGVhcikgZGVsZXRlIE5hdGl2ZVByb3RvdHlwZS5jbGVhcjtcbiAgfVxuXG4gIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gQ29uc3RydWN0b3I7XG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IENvbnN0cnVjdG9yICE9PSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3Rba2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBhbk9iamVjdCh0aGlzKTtcbiAgaWYgKGhpbnQgPT09ICdzdHJpbmcnIHx8IGhpbnQgPT09ICdkZWZhdWx0JykgaGludCA9ICdzdHJpbmcnO1xuICBlbHNlIGlmIChoaW50ICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLmdldCwgbmFtZSwgeyBnZXR0ZXI6IHRydWUgfSk7XG4gIGlmIChkZXNjcmlwdG9yLnNldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5zZXQsIG5hbWUsIHsgc2V0dGVyOiB0cnVlIH0pO1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkuZih0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zLmVudW1lcmFibGU7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkgbWFrZUJ1aWx0SW4odmFsdWUsIG5hbWUsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5nbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZUdsb2JhbFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW9wdGlvbnMudW5zYWZlKSBkZWxldGUgT1trZXldO1xuICAgICAgZWxzZSBpZiAoT1trZXldKSBzaW1wbGUgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIW9wdGlvbnMubm9uQ29uZmlndXJhYmxlLFxuICAgICAgd3JpdGFibGU6ICFvcHRpb25zLm5vbldyaXRhYmxlXG4gICAgfSk7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGRlZmluZUJ1aWx0SW4odGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPT0gNztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyAkVHlwZUVycm9yKCdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaW4gb2xkIFdlYktpdCB2ZXJzaW9ucywgYGVsZW1lbnQuY2xhc3NMaXN0YCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgZ2xvYmFsIGBET01Ub2tlbkxpc3RgXG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBjbGFzc0xpc3QgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ3NwYW4nKS5jbGFzc0xpc3Q7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3RvciAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdFByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IERPTVRva2VuTGlzdFByb3RvdHlwZTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIG5hdmlnYXRvciAhPSAndW5kZWZpbmVkJyAmJiBTdHJpbmcobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgJyc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIERlbm8gPSBnbG9iYWwuRGVubztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucyB8fCBEZW5vICYmIERlbm8udmVyc2lvbjtcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICAvLyBpbiBvbGQgQ2hyb21lLCB2ZXJzaW9ucyBvZiBWOCBpc24ndCBWOCA9IENocm9tZSAvIDEwXG4gIC8vIGJ1dCB0aGVpciBjb3JyZWN0IHZlcnNpb25zIGFyZSBub3QgaW50ZXJlc3RpbmcgZm9yIHVzXG4gIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7XG59XG5cbi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYFxuLy8gc28gY2hlY2sgYHVzZXJBZ2VudGAgZXZlbiBpZiBgLnY4YCBleGlzdHMsIGJ1dCAwXG5pZiAoIXZlcnNpb24gJiYgdXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gK21hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbjtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gJiYgZ2xvYmFsW1RBUkdFVF0ucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBleGVjQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IGNhbGwobmF0aXZlUmVnRXhwTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogY2FsbChuYXRpdmVNZXRob2QsIHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9ICRGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgam9pbihsaXN0LCAnLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2FyZ3NMZW5ndGhdKEMsIGFyZ3MpO1xufTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBkZXRlY3Rpb25cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyAkRnVuY3Rpb24uYmluZCA6IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIEYgPSBhQ2FsbGFibGUodGhpcyk7XG4gIHZhciBQcm90b3R5cGUgPSBGLnByb3RvdHlwZTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IGNvbmNhdChwYXJ0QXJncywgYXJyYXlTbGljZShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoRiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogRi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KFByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gUHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0RGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7XG4vLyBhZGRpdGlvbmFsIHByb3RlY3Rpb24gZnJvbSBtaW5pZmllZCAvIG1hbmdsZWQgLyBkcm9wcGVkIGZ1bmN0aW9uIG5hbWVzXG52YXIgUFJPUEVSID0gRVhJU1RTICYmIChmdW5jdGlvbiBzb21ldGhpbmcoKSB7IC8qIGVtcHR5ICovIH0pLm5hbWUgPT09ICdzb21ldGhpbmcnO1xudmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRVhJU1RTOiBFWElTVFMsXG4gIFBST1BFUjogUFJPUEVSLFxuICBDT05GSUdVUkFCTEU6IENPTkZJR1VSQUJMRVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgbWV0aG9kKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHJldHVybiB1bmN1cnJ5VGhpcyhhQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSlbbWV0aG9kXSkpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdCkpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyBuZXcgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVwbGFjZXIpIHtcbiAgaWYgKGlzQ2FsbGFibGUocmVwbGFjZXIpKSByZXR1cm4gcmVwbGFjZXI7XG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJldHVybjtcbiAgdmFyIHJhd0xlbmd0aCA9IHJlcGxhY2VyLmxlbmd0aDtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdMZW5ndGg7IGkrKykge1xuICAgIHZhciBlbGVtZW50ID0gcmVwbGFjZXJbaV07XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09ICdzdHJpbmcnKSBwdXNoKGtleXMsIGVsZW1lbnQpO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50ID09ICdudW1iZXInIHx8IGNsYXNzb2YoZWxlbWVudCkgPT09ICdOdW1iZXInIHx8IGNsYXNzb2YoZWxlbWVudCkgPT09ICdTdHJpbmcnKSBwdXNoKGtleXMsIHRvU3RyaW5nKGVsZW1lbnQpKTtcbiAgfVxuICB2YXIga2V5c0xlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgcm9vdCA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChyb290KSB7XG4gICAgICByb290ID0gZmFsc2U7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHRoaXMpKSByZXR1cm4gdmFsdWU7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzTGVuZ3RoOyBqKyspIGlmIChrZXlzW2pdID09PSBrZXkpIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xuXG4vLyBgR2V0TWV0aG9kYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChWLCBQKSB7XG4gIHZhciBmdW5jID0gVltQXTtcbiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWRvcy9uby12dWxuZXJhYmxlIC0tIHNhZmVcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgY2hlY2sodHlwZW9mIHRoaXMgPT0gJ29iamVjdCcgJiYgdGhpcykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT09IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT09ICdTdHJpbmcnID8gc3BsaXQoaXQsICcnKSA6ICRPYmplY3QoaXQpO1xufSA6ICRPYmplY3Q7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG5cbi8vIG1ha2VzIHN1YmNsYXNzaW5nIHdvcmsgY29ycmVjdCBmb3Igd3JhcHBlZCBidWlsdC1pbnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCR0aGlzLCBkdW1teSwgV3JhcHBlcikge1xuICB2YXIgTmV3VGFyZ2V0LCBOZXdUYXJnZXRQcm90b3R5cGU7XG4gIGlmIChcbiAgICAvLyBpdCBjYW4gd29yayBvbmx5IHdpdGggbmF0aXZlIGBzZXRQcm90b3R5cGVPZmBcbiAgICBzZXRQcm90b3R5cGVPZiAmJlxuICAgIC8vIHdlIGhhdmVuJ3QgY29tcGxldGVseSBjb3JyZWN0IHByZS1FUzYgd2F5IGZvciBnZXR0aW5nIGBuZXcudGFyZ2V0YCwgc28gdXNlIHRoaXNcbiAgICBpc0NhbGxhYmxlKE5ld1RhcmdldCA9IGR1bW15LmNvbnN0cnVjdG9yKSAmJlxuICAgIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJlxuICAgIGlzT2JqZWN0KE5ld1RhcmdldFByb3RvdHlwZSA9IE5ld1RhcmdldC5wcm90b3R5cGUpICYmXG4gICAgTmV3VGFyZ2V0UHJvdG90eXBlICE9PSBXcmFwcGVyLnByb3RvdHlwZVxuICApIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpO1xuICByZXR1cm4gJHRoaXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBSRVFVSVJFRCA9IGZhbHNlO1xudmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7XG52YXIgaWQgPSAwO1xuXG52YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgZGVmaW5lUHJvcGVydHkoaXQsIE1FVEFEQVRBLCB7IHZhbHVlOiB7XG4gICAgb2JqZWN0SUQ6ICdPJyArIGlkKyssIC8vIG9iamVjdCBJRFxuICAgIHdlYWtEYXRhOiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcblxudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gYSBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDtcbn07XG5cbnZhciBnZXRXZWFrRGF0YSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzT3duKGl0LCBNRVRBREFUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YWRhdGEoaXQpO1xuICAvLyByZXR1cm4gdGhlIHN0b3JlIG9mIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTtcbn07XG5cbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWklORyAmJiBSRVFVSVJFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXNPd24oaXQsIE1FVEFEQVRBKSkgc2V0TWV0YWRhdGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG52YXIgZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICBtZXRhLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgUkVRVUlSRUQgPSB0cnVlO1xuICB2YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZjtcbiAgdmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG4gIHZhciB0ZXN0ID0ge307XG4gIHRlc3RbTUVUQURBVEFdID0gMTtcblxuICAvLyBwcmV2ZW50IGV4cG9zaW5nIG9mIG1ldGFkYXRhIGtleVxuICBpZiAoZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0KS5sZW5ndGgpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3VsdFtpXSA9PT0gTUVUQURBVEEpIHtcbiAgICAgICAgICBzcGxpY2UocmVzdWx0LCBpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZS5mXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVuYWJsZTogZW5hYmxlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc3RvcmUuZ2V0ID0gc3RvcmUuZ2V0O1xuICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7XG4gIHN0b3JlLnNldCA9IHN0b3JlLnNldDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAtLSBwcm90b3R5cGUgbWV0aG9kcyBwcm90ZWN0aW9uICovXG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoc3RvcmUuaGFzKGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgc3RvcmUuc2V0KGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0KGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHN0b3JlLmhhcyhpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZ3VtZW50KSB7XG4gIHJldHVybiBjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ0FycmF5Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG52YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBgSXNDYWxsYWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzY2FsbGFibGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXR5cGVvZi11bmRlZmluZWQgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAudGVzdChub29wKTtcblxudmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgW10sIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHtcbiAgICBjYXNlICdBc3luY0Z1bmN0aW9uJzpcbiAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90LWFlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNPYmplY3QoYXJndW1lbnQpIHx8IGFyZ3VtZW50ID09PSBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PT0gJ1JlZ0V4cCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgJFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICByZXR1cm4gaXNDYWxsYWJsZSgkU3ltYm9sKSAmJiBpc1Byb3RvdHlwZU9mKCRTeW1ib2wucHJvdG90eXBlLCAkT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBSZXN1bHRQcm90b3R5cGUgPSBSZXN1bHQucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgdW5ib3VuZEZ1bmN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciB0aGF0ID0gb3B0aW9ucyAmJiBvcHRpb25zLnRoYXQ7XG4gIHZhciBBU19FTlRSSUVTID0gISEob3B0aW9ucyAmJiBvcHRpb25zLkFTX0VOVFJJRVMpO1xuICB2YXIgSVNfUkVDT1JEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX1JFQ09SRCk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0KTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICdub3JtYWwnLCBjb25kaXRpb24pO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfUkVDT1JEKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZS5pdGVyYXRvcjtcbiAgfSBlbHNlIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyBuZXcgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhpdGVyYWJsZSkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoaXRlcmFibGUpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlLCBpdGVyRm4pO1xuICB9XG5cbiAgbmV4dCA9IElTX1JFQ09SRCA/IGl0ZXJhYmxlLm5leHQgOiBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBFTlVNRVJBQkxFX05FWFQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigrIUVOVU1FUkFCTEVfTkVYVCwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLkNPTkZJR1VSQUJMRTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcblxuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNDYWxsYWJsZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICAgICAgICAgIGRlZmluZUJ1aWx0SW4oQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgaWYgKCFJU19QVVJFICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsICduYW1lJywgVkFMVUVTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIGNhbGwobmF0aXZlSXRlcmF0b3IsIHRoaXMpOyB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqL1xuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9ICFpc09iamVjdChJdGVyYXRvclByb3RvdHlwZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICBkZWZpbmVCdWlsdEluKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkNPTkZJR1VSQUJMRTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyICRTdHJpbmcgPSBTdHJpbmc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChzdHJpbmdTbGljZSgkU3RyaW5nKG5hbWUpLCAwLCA3KSA9PT0gJ1N5bWJvbCgnKSB7XG4gICAgbmFtZSA9ICdbJyArIHJlcGxhY2UoJFN0cmluZyhuYW1lKSwgL15TeW1ib2xcXCgoW14pXSopXFwpLiokLywgJyQxJykgKyAnXSc7XG4gIH1cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXIpIG5hbWUgPSAnZ2V0ICcgKyBuYW1lO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNldHRlcikgbmFtZSA9ICdzZXQgJyArIG5hbWU7XG4gIGlmICghaGFzT3duKHZhbHVlLCAnbmFtZScpIHx8IChDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSAmJiB2YWx1ZS5uYW1lICE9PSBuYW1lKSkge1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIGVsc2UgdmFsdWUubmFtZSA9IG5hbWU7XG4gIH1cbiAgaWYgKENPTkZJR1VSQUJMRV9MRU5HVEggJiYgb3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2FyaXR5JykgJiYgdmFsdWUubGVuZ3RoICE9PSBvcHRpb25zLmFyaXR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkodmFsdWUsICdsZW5ndGgnLCB7IHZhbHVlOiBvcHRpb25zLmFyaXR5IH0pO1xuICB9XG4gIHRyeSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdjb25zdHJ1Y3RvcicpICYmIG9wdGlvbnMuY29uc3RydWN0b3IpIHtcbiAgICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkodmFsdWUsICdwcm90b3R5cGUnLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTtcbiAgICAvLyBpbiBWOCB+IENocm9tZSA1MywgcHJvdG90eXBlcyBvZiBzb21lIG1ldGhvZHMsIGxpa2UgYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgLCBhcmUgbm9uLXdyaXRhYmxlXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5wcm90b3R5cGUpIHZhbHVlLnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSk7XG4gIGlmICghaGFzT3duKHN0YXRlLCAnc291cmNlJykpIHtcbiAgICBzdGF0ZS5zb3VyY2UgPSBqb2luKFRFTVBMQVRFLCB0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC10cnVuYyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgudHJ1bmMgfHwgZnVuY3Rpb24gdHJ1bmMoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gKG4gPiAwID8gZmxvb3IgOiBjZWlsKShuKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IG5ldyAkVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhc093bihPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighY2FsbChwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mLCBPLCBQKSwgT1tQXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gYXJyYXlTbGljZSh3aW5kb3dOYW1lcyk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiBjbGFzc29mKGl0KSA9PT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBPYmplY3RQcm90b3R5cGUgPSAkT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mICRPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlIC0tIHNhZmVcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNFeHRlbnNpYmxlKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNleHRlbnNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IChGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSkgPyBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZTtcbn0gOiAkaXNFeHRlbnNpYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIHVuY3VycnlUaGlzQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWFjY2Vzc29yJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IHVuY3VycnlUaGlzQWNjZXNzb3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycsICdzZXQnKTtcbiAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG9iamVjdEdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpLmY7XG5cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHVuY3VycnlUaGlzKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBpbiBzb21lIElFIHZlcnNpb25zLCBgcHJvcGVydHlJc0VudW1lcmFibGVgIHJldHVybnMgaW5jb3JyZWN0IHJlc3VsdCBvbiBpbnRlZ2VyIGtleXNcbi8vIG9mIGBudWxsYCBwcm90b3R5cGUgb2JqZWN0c1xudmFyIElFX0JVRyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1jcmVhdGUgLS0gc2FmZVxuICB2YXIgTyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIE9bMl0gPSAyO1xuICByZXR1cm4gIXByb3BlcnR5SXNFbnVtZXJhYmxlKE8sIDIpO1xufSk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBJRV9XT1JLQVJPVU5EID0gSUVfQlVHICYmIG9iamVjdEdldFByb3RvdHlwZU9mKE8pID09PSBudWxsO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgKElFX1dPUktBUk9VTkQgPyBrZXkgaW4gTyA6IHByb3BlcnR5SXNFbnVtZXJhYmxlKE8sIGtleSkpKSB7XG4gICAgICAgIHB1c2gocmVzdWx0LCBUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVGFyZ2V0LCBTb3VyY2UsIGtleSkge1xuICBrZXkgaW4gVGFyZ2V0IHx8IGRlZmluZVByb3BlcnR5KFRhcmdldCwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU291cmNlW2tleV07IH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgU291cmNlW2tleV0gPSBpdDsgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwLCByZWdleHAvbm8tbGF6eS1lbmRzIC0tIHRlc3RpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby11c2VsZXNzLXF1YW50aWZpZXIgLS0gdGVzdGluZyAqL1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMSwgJ2EnKTtcbiAgY2FsbChuYXRpdmVFeGVjLCByZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cmluZykge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShyZSk7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJhdyA9IHN0YXRlLnJhdztcbiAgICB2YXIgcmVzdWx0LCByZUNvcHksIGxhc3RJbmRleCwgbWF0Y2gsIGksIG9iamVjdCwgZ3JvdXA7XG5cbiAgICBpZiAocmF3KSB7XG4gICAgICByYXcubGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgcmVzdWx0ID0gY2FsbChwYXRjaGVkRXhlYywgcmF3LCBzdHIpO1xuICAgICAgcmUubGFzdEluZGV4ID0gcmF3Lmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwcyA9IHN0YXRlLmdyb3VwcztcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gY2FsbChyZWdleHBGbGFncywgcmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAneScsICcnKTtcbiAgICAgIGlmIChpbmRleE9mKGZsYWdzLCAnZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBzdHJpbmdTbGljZShzdHIsIHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBjaGFyQXQoc3RyLCByZS5sYXN0SW5kZXggLSAxKSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gY2FsbChuYXRpdmVFeGVjLCBzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBzdHJpbmdTbGljZShtYXRjaC5pbnB1dCwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gc3RyaW5nU2xpY2UobWF0Y2hbMF0sIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbid0IHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5oYXNJbmRpY2VzKSByZXN1bHQgKz0gJ2QnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC51bmljb2RlU2V0cykgcmVzdWx0ICs9ICd2JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUikge1xuICB2YXIgZmxhZ3MgPSBSLmZsYWdzO1xuICByZXR1cm4gZmxhZ3MgPT09IHVuZGVmaW5lZCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSAmJiAhaGFzT3duKFIsICdmbGFncycpICYmIGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBSKVxuICAgID8gY2FsbChyZWdFeHBGbGFncywgUikgOiBmbGFncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPT0gbnVsbDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQlJPS0VOX0NBUkVUOiBCUk9LRU5fQ0FSRVQsXG4gIE1JU1NFRF9TVElDS1k6IE1JU1NFRF9TVElDS1ksXG4gIFVOU1VQUE9SVEVEX1k6IFVOU1VQUE9SVEVEX1lcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnLicsICdzJykgLT4gLy4vcyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcuJywgJ3MnKTtcbiAgcmV0dXJuICEocmUuZG90QWxsICYmIHJlLnRlc3QoJ1xcbicpICYmIHJlLmZsYWdzID09PSAncycpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgdGhyb3cgbmV3ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihDb25zdHJ1Y3RvciwgU1BFQ0lFUywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKHRhcmdldCAmJiAhU1RBVElDKSB0YXJnZXQgPSB0YXJnZXQucHJvdG90eXBlO1xuICBpZiAodGFyZ2V0ICYmICFoYXNPd24odGFyZ2V0LCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsVGhpc1tTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pO1xuXG4oc3RvcmUudmVyc2lvbnMgfHwgKHN0b3JlLnZlcnNpb25zID0gW10pKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMzYuMCcsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDI0IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMzYuMC9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlIHx8IHt9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIGx0cmltID0gUmVnRXhwKCdeWycgKyB3aGl0ZXNwYWNlcyArICddKycpO1xudmFyIHJ0cmltID0gUmVnRXhwKCcoXnxbXicgKyB3aGl0ZXNwYWNlcyArICddKVsnICsgd2hpdGVzcGFjZXMgKyAnXSskJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJDEnKTtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbUxlZnQsIHRyaW1TdGFydCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltUmlnaHQsIHRyaW1FbmQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4gIHRyaW06IGNyZWF0ZU1ldGhvZCgzKVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyICRTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgnc3ltYm9sIGRldGVjdGlvbicpO1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzXG4gIC8vIG5iOiBEbyBub3QgY2FsbCBgU3RyaW5nYCBkaXJlY3RseSB0byBhdm9pZCB0aGlzIGJlaW5nIG9wdGltaXplZCBvdXQgdG8gYHN5bWJvbCsnJ2Agd2hpY2ggd2lsbCxcbiAgLy8gb2YgY291cnNlLCBmYWlsLlxuICByZXR1cm4gISRTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gU3ltYm9sICYmIFN5bWJvbC5wcm90b3R5cGU7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlICYmIFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4gIGlmIChTeW1ib2xQcm90b3R5cGUgJiYgIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gICAgLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gICAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICAgIH0sIHsgYXJpdHk6IDEgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSBzYWZlICovXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgISFTeW1ib2xbJ2ZvciddICYmICEhU3ltYm9sLmtleUZvcjtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbGVuID0gdG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCk7XG4gIHJldHVybiBsZW4gPiAwID8gbWluKGxlbiwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuICRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBjYWxsKGV4b3RpY1RvUHJpbSwgaW5wdXQsIHByZWYpO1xuICAgIGlmICghaXNPYmplY3QocmVzdWx0KSB8fCBpc1N5bWJvbChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHRocm93IG5ldyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPT0gNDI7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFN0cmluZyhXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhc093bihTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbFsnZm9yJ10gfHwgU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKVxuICAgICAgPyBTeW1ib2xbbmFtZV1cbiAgICAgIDogY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyJyArXG4gICdcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIGxlbik7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgMSk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmNsdWRlcztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIEZGOTkrIGJ1Z1xudmFyIEJST0tFTl9PTl9TUEFSU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtaW5jbHVkZXMgLS0gZGV0ZWN0aW9uXG4gIHJldHVybiAhQXJyYXkoMSkuaW5jbHVkZXMoKTtcbn0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCUk9LRU5fT05fU1BBUlNFIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZScpO1xudmFyIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB9XG4gIHN3aXRjaCAoc3RhdGUua2luZCkge1xuICAgIGNhc2UgJ2tleXMnOiByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChpbmRleCwgZmFsc2UpO1xuICAgIGNhc2UgJ3ZhbHVlcyc6IHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHRhcmdldFtpbmRleF0sIGZhbHNlKTtcbiAgfSByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBmYWxzZSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3RcbnZhciB2YWx1ZXMgPSBJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuLy8gVjggfiBDaHJvbWUgNDUtIGJ1Z1xuaWYgKCFJU19QVVJFICYmIERFU0NSSVBUT1JTICYmIHZhbHVlcy5uYW1lICE9PSAndmFsdWVzJykgdHJ5IHtcbiAgZGVmaW5lUHJvcGVydHkodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ21hcCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgbmF0aXZlU2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAoaXNDb25zdHJ1Y3RvcihDb25zdHJ1Y3RvcikgJiYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyAkQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGF0ZVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIWhhc093bihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUpKSB7XG4gIGRlZmluZUJ1aWx0SW4oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRlVOQ1RJT05fTkFNRV9FWElTVFMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkVYSVNUUztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZWdFeHBFeGVjKG5hbWVSRSwgZnVuY3Rpb25Ub1N0cmluZyh0aGlzKSlbMV07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgZ2V0UmVwbGFjZXJGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtanNvbi1yZXBsYWNlci1mdW5jdGlvbicpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xuXG52YXIgJFN0cmluZyA9IFN0cmluZztcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgnc3RyaW5naWZ5IGRldGVjdGlvbicpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT09ICdbbnVsbF0nXG4gICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPT0gJ3t9J1xuICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT09ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IGdldFJlcGxhY2VyRnVuY3Rpb24ocmVwbGFjZXIpO1xuICBpZiAoIWlzQ2FsbGFibGUoJHJlcGxhY2VyKSAmJiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgYXJnc1sxXSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgLy8gc29tZSBvbGQgaW1wbGVtZW50YXRpb25zIChsaWtlIFdlYktpdCkgY291bGQgcGFzcyBudW1iZXJzIGFzIGtleXNcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCAkU3RyaW5nKGtleSksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG59O1xuXG52YXIgZml4SWxsRm9ybWVkID0gZnVuY3Rpb24gKG1hdGNoLCBvZmZzZXQsIHN0cmluZykge1xuICB2YXIgcHJldiA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCAtIDEpO1xuICB2YXIgbmV4dCA9IGNoYXJBdChzdHJpbmcsIG9mZnNldCArIDEpO1xuICBpZiAoKGV4ZWMobG93LCBtYXRjaCkgJiYgIWV4ZWMoaGksIG5leHQpKSB8fCAoZXhlYyhoaSwgbWF0Y2gpICYmICFleGVjKGxvdywgcHJldikpKSB7XG4gICAgcmV0dXJuICdcXFxcdScgKyBudW1iZXJUb1N0cmluZyhjaGFyQ29kZUF0KG1hdGNoLCAwKSwgMTYpO1xuICB9IHJldHVybiBtYXRjaDtcbn07XG5cbmlmICgkc3RyaW5naWZ5KSB7XG4gIC8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBhcml0eTogMywgZm9yY2VkOiBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gfHwgSUxMX0ZPUk1FRF9VTklDT0RFIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMpO1xuICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5KFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiA/IHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IDogJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgICByZXR1cm4gSUxMX0ZPUk1FRF9VTklDT0RFICYmIHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXBsYWNlKHJlc3VsdCwgdGVzdGVyLCBmaXhJbGxGb3JtZWQpIDogcmVzdWx0O1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIFB1cmVOdW1iZXJOYW1lc3BhY2UgPSBwYXRoW05VTUJFUl07XG52YXIgTnVtYmVyUHJvdG90eXBlID0gTmF0aXZlTnVtYmVyLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxuLy8gYFRvTnVtZXJpY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtZXJpY1xudmFyIHRvTnVtZXJpYyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJpbVZhbHVlID0gdG9QcmltaXRpdmUodmFsdWUsICdudW1iZXInKTtcbiAgcmV0dXJuIHR5cGVvZiBwcmltVmFsdWUgPT0gJ2JpZ2ludCcgPyBwcmltVmFsdWUgOiB0b051bWJlcihwcmltVmFsdWUpO1xufTtcblxuLy8gYFRvTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1iZXJcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ251bWJlcicpO1xuICB2YXIgZmlyc3QsIHRoaXJkLCByYWRpeCwgbWF4Q29kZSwgZGlnaXRzLCBsZW5ndGgsIGluZGV4LCBjb2RlO1xuICBpZiAoaXNTeW1ib2woaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChpdCwgMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gY2hhckNvZGVBdChpdCwgMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChjaGFyQ29kZUF0KGl0LCAxKSkge1xuICAgICAgICAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDY2OlxuICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgIHJhZGl4ID0gMjtcbiAgICAgICAgICBtYXhDb2RlID0gNDk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBjYXNlIDc5OlxuICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICByYWRpeCA9IDg7XG4gICAgICAgICAgbWF4Q29kZSA9IDU1O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBzdHJpbmdTbGljZShpdCwgMik7XG4gICAgICBsZW5ndGggPSBkaWdpdHMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvZGUgPSBjaGFyQ29kZUF0KGRpZ2l0cywgaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKTtcblxudmFyIGNhbGxlZFdpdGhOZXcgPSBmdW5jdGlvbiAoZHVtbXkpIHtcbiAgLy8gaW5jbHVkZXMgY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gIHJldHVybiBpc1Byb3RvdHlwZU9mKE51bWJlclByb3RvdHlwZSwgZHVtbXkpICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgdGhpc051bWJlclZhbHVlKGR1bW15KTsgfSk7XG59O1xuXG4vLyBgTnVtYmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXItY29uc3RydWN0b3JcbnZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogTmF0aXZlTnVtYmVyKHRvTnVtZXJpYyh2YWx1ZSkpO1xuICByZXR1cm4gY2FsbGVkV2l0aE5ldyh0aGlzKSA/IGluaGVyaXRJZlJlcXVpcmVkKE9iamVjdChuKSwgdGhpcywgTnVtYmVyV3JhcHBlcikgOiBuO1xufTtcblxuTnVtYmVyV3JhcHBlci5wcm90b3R5cGUgPSBOdW1iZXJQcm90b3R5cGU7XG5pZiAoRk9SQ0VEICYmICFJU19QVVJFKSBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBOdW1iZXI6IE51bWJlcldyYXBwZXJcbn0pO1xuXG4vLyBVc2UgYGludGVybmFsL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllc2AgaGVscGVyIGluIGBjb3JlLWpzQDRgXG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixNQVhfU0FGRV9JTlRFR0VSLE1JTl9TQUZFX0lOVEVHRVIsaXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIscGFyc2VGbG9hdCxwYXJzZUludCwnICtcbiAgICAvLyBFU05leHRcbiAgICAnZnJvbVN0cmluZyxyYW5nZSdcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXNPd24oc291cmNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcblxuaWYgKElTX1BVUkUgJiYgUHVyZU51bWJlck5hbWVzcGFjZSkgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhwYXRoW05VTUJFUl0sIFB1cmVOdW1iZXJOYW1lc3BhY2UpO1xuaWYgKEZPUkNFRCB8fCBJU19QVVJFKSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHBhdGhbTlVNQkVSXSwgTmF0aXZlTnVtYmVyKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxuLy8gVjggfiBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRk9SQ0VEID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICB2YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gJGdldE93blByb3BlcnR5U3ltYm9scyh0b09iamVjdChpdCkpIDogW107XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIGRlZmluZUJ1aWx0SW4oT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQ29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmNvbnN0cnVjdFxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEobmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcblxudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhQ29uc3RydWN0b3IoVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhQ29uc3RydWN0b3IoYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICBhcHBseShwdXNoLCAkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kLCBUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3RQcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBhcHBseShUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcHJveHlBY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm94eS1hY2Nlc3NvcicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgU3ludGF4RXJyb3IgPSBnbG9iYWwuU3ludGF4RXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKFJlZ0V4cFByb3RvdHlwZS5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG4vLyBUT0RPOiBVc2Ugb25seSBwcm9wZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxIHx8IE5hdGl2ZVJlZ0V4cChyZTIpID09PSByZTIgfHwgU3RyaW5nKE5hdGl2ZVJlZ0V4cChyZTEsICdpJykpICE9PSAnL2EvaSc7XG4gIH0pKTtcblxudmFyIGhhbmRsZURvdEFsbCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICByZXN1bHQgKz0gY2hyICsgY2hhckF0KHN0cmluZywgKytpbmRleCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKCFicmFja2V0cyAmJiBjaHIgPT09ICcuJykge1xuICAgICAgcmVzdWx0ICs9ICdbXFxcXHNcXFxcU10nO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2hyID09PSAnWycpIHtcbiAgICAgICAgYnJhY2tldHMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaHIgPT09ICddJykge1xuICAgICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgICAgfSByZXN1bHQgKz0gY2hyO1xuICAgIH1cbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyIGhhbmRsZU5DRyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG5hbWVkID0gW107XG4gIHZhciBuYW1lcyA9IGNyZWF0ZShudWxsKTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgKz0gY2hhckF0KHN0cmluZywgKytpbmRleCk7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09ICddJykge1xuICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFicmFja2V0cykgc3dpdGNoICh0cnVlKSB7XG4gICAgICBjYXNlIGNociA9PT0gJ1snOlxuICAgICAgICBicmFja2V0cyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBjaHIgPT09ICcoJzpcbiAgICAgICAgaWYgKGV4ZWMoSVNfTkNHLCBzdHJpbmdTbGljZShzdHJpbmcsIGluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICBuY2cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICAgIGdyb3VwaWQrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIGNociA9PT0gJz4nICYmIG5jZzpcbiAgICAgICAgaWYgKGdyb3VwbmFtZSA9PT0gJycgfHwgaGFzT3duKG5hbWVzLCBncm91cG5hbWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdJbnZhbGlkIGNhcHR1cmUgZ3JvdXAgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzW2dyb3VwbmFtZV0gPSB0cnVlO1xuICAgICAgICBuYW1lZFtuYW1lZC5sZW5ndGhdID0gW2dyb3VwbmFtZSwgZ3JvdXBpZF07XG4gICAgICAgIG5jZyA9IGZhbHNlO1xuICAgICAgICBncm91cG5hbWUgPSAnJztcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChuY2cpIGdyb3VwbmFtZSArPSBjaHI7XG4gICAgZWxzZSByZXN1bHQgKz0gY2hyO1xuICB9IHJldHVybiBbcmVzdWx0LCBuYW1lZF07XG59O1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZCgnUmVnRXhwJywgQkFTRV9GT1JDRUQpKSB7XG4gIHZhciBSZWdFeHBXcmFwcGVyID0gZnVuY3Rpb24gUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSB7XG4gICAgdmFyIHRoaXNJc1JlZ0V4cCA9IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCB0aGlzKTtcbiAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gaXNSZWdFeHAocGF0dGVybik7XG4gICAgdmFyIGZsYWdzQXJlVW5kZWZpbmVkID0gZmxhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgdmFyIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuICAgIHZhciByYXdGbGFncywgZG90QWxsLCBzdGlja3ksIGhhbmRsZWQsIHJlc3VsdCwgc3RhdGU7XG5cbiAgICBpZiAoIXRoaXNJc1JlZ0V4cCAmJiBwYXR0ZXJuSXNSZWdFeHAgJiYgZmxhZ3NBcmVVbmRlZmluZWQgJiYgcGF0dGVybi5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwV3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm5Jc1JlZ0V4cCB8fCBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgcGF0dGVybikpIHtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICAgIGlmIChmbGFnc0FyZVVuZGVmaW5lZCkgZmxhZ3MgPSBnZXRSZWdFeHBGbGFncyhyYXdQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gcGF0dGVybiA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhwYXR0ZXJuKTtcbiAgICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzKTtcbiAgICByYXdQYXR0ZXJuID0gcGF0dGVybjtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ET1RfQUxMICYmICdkb3RBbGwnIGluIHJlMSkge1xuICAgICAgZG90QWxsID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC9zL2csICcnKTtcbiAgICB9XG5cbiAgICByYXdGbGFncyA9IGZsYWdzO1xuXG4gICAgaWYgKE1JU1NFRF9TVElDS1kgJiYgJ3N0aWNreScgaW4gcmUxKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kgJiYgVU5TVVBQT1JURURfWSkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX05DRykge1xuICAgICAgaGFuZGxlZCA9IGhhbmRsZU5DRyhwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBoYW5kbGVkWzBdO1xuICAgICAgZ3JvdXBzID0gaGFuZGxlZFsxXTtcbiAgICB9XG5cbiAgICByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLCB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLCBSZWdFeHBXcmFwcGVyKTtcblxuICAgIGlmIChkb3RBbGwgfHwgc3RpY2t5IHx8IGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUocmVzdWx0KTtcbiAgICAgIGlmIChkb3RBbGwpIHtcbiAgICAgICAgc3RhdGUuZG90QWxsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucmF3ID0gUmVnRXhwV3JhcHBlcihoYW5kbGVEb3RBbGwocGF0dGVybiksIHJhd0ZsYWdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGlja3kpIHN0YXRlLnN0aWNreSA9IHRydWU7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aCkgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuICE9PSByYXdQYXR0ZXJuKSB0cnkge1xuICAgICAgLy8gZmFpbHMgaW4gb2xkIGVuZ2luZXMsIGJ1dCB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyBmb3IgdW5zdXBwb3J0ZWQgcmVnZXggc3ludGF4XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc291cmNlJywgcmF3UGF0dGVybiA9PT0gJycgPyAnKD86KScgOiByYXdQYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVJlZ0V4cCksIGluZGV4ID0gMDsga2V5cy5sZW5ndGggPiBpbmRleDspIHtcbiAgICBwcm94eUFjY2Vzc29yKFJlZ0V4cFdyYXBwZXIsIE5hdGl2ZVJlZ0V4cCwga2V5c1tpbmRleCsrXSk7XG4gIH1cblxuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgZGVmaW5lQnVpbHRJbihnbG9iYWwsICdSZWdFeHAnLCBSZWdFeHBXcmFwcGVyLCB7IGNvbnN0cnVjdG9yOiB0cnVlIH0pO1xufVxuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZXhlY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUuZXhlY1xuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT09ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgbmF0aXZlVG9TdHJpbmcubmFtZSAhPT0gVE9fU1RSSU5HO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChOT1RfR0VORVJJQyB8fCBJTkNPUlJFQ1RfTkFNRSkge1xuICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuID0gJHRvU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgZmxhZ3MgPSAkdG9TdHJpbmcoZ2V0UmVnRXhwRmxhZ3MoUikpO1xuICAgIHJldHVybiAnLycgKyBwYXR0ZXJuICsgJy8nICsgZmxhZ3M7XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYFNldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LW9iamVjdHNcbmNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zZXQuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfnN0cmluZ0luZGV4T2YoXG4gICAgICB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKSxcbiAgICAgIHRvU3RyaW5nKG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKSksXG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocG9pbnQsIGZhbHNlKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIGdldFN1YnN0aXR1dGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgUkVQTEFDRSA9IHdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBJRSA8PSAxMSByZXBsYWNlcyAkMCB3aXRoIHRoZSB3aG9sZSBtYXRjaCwgYXMgaWYgaXQgd2FzICQmXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MDI0NjY2L2dldHRpbmctaWUtdG8tcmVwbGFjZS1hLXJlZ2V4LXdpdGgtdGhlLWxpdGVyYWwtc3RyaW5nLTBcbnZhciBSRVBMQUNFX0tFRVBTXyQwID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9wcmVmZXItZXNjYXBlLXJlcGxhY2VtZW50LWRvbGxhci1jaGFyIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxuLy8gU2FmYXJpIDw9IDEzLjAuMyg/KSBzdWJzdGl0dXRlcyBudGggY2FwdHVyZSB3aGVyZSBuPm0gd2l0aCBhbiBlbXB0eSBzdHJpbmdcbnZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICgvLi9bUkVQTEFDRV0pIHtcbiAgICByZXR1cm4gLy4vW1JFUExBQ0VdKCdhJywgJyQwJykgPT09ICcnO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pKCk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby11c2VsZXNzLWRvbGxhci1yZXBsYWNlbWVudHMgLS0gZmFsc2UgcG9zaXRpdmVcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgZnVuY3Rpb24gKF8sIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgVU5TQUZFX1NVQlNUSVRVVEUgPSBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA/ICckJyA6ICckMCc7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHJlcGxhY2VyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VhcmNoVmFsdWUpID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBSRVBMQUNFKTtcbiAgICAgIHJldHVybiByZXBsYWNlclxuICAgICAgICA/IGNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogY2FsbChuYXRpdmVSZXBsYWNlLCB0b1N0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVwbGFjZVZhbHVlID09ICdzdHJpbmcnICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCBVTlNBRkVfU1VCU1RJVFVURSkgPT09IC0xICYmXG4gICAgICAgIHN0cmluZ0luZGV4T2YocmVwbGFjZVZhbHVlLCAnJDwnKSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVJlcGxhY2UsIHJ4LCBTLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICB2YXIgZnVsbFVuaWNvZGU7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQ7XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgcHVzaChjYXB0dXJlcywgbWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gY29uY2F0KFttYXRjaGVkXSwgY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSBwdXNoKHJlcGxhY2VyQXJncywgbmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RhcnRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgobWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcblxudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2wgJiYgJFN5bWJvbFtQUk9UT1RZUEVdO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBmYWxsYmFja0RlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgdmFyIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCBQKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpIGRlbGV0ZSBPYmplY3RQcm90b3R5cGVbUF07XG4gIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciAmJiBPICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGUsIFAsIE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpO1xuICB9XG59O1xuXG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPT0gNztcbn0pID8gZmFsbGJhY2tEZWZpbmVQcm9wZXJ0eSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5hdGl2ZU9iamVjdENyZWF0ZShudWxsKSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzT3duKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKCRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgcHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9Qcm9wZXJ0eUtleShWKTtcbiAgdmFyIGVudW1lcmFibGUgPSBjYWxsKG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLCB0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywgUCkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzT3duKHRoaXMsIFApIHx8ICFoYXNPd24oQWxsU3ltYm9scywgUCkgfHwgaGFzT3duKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdXG4gICAgPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBkZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xuICBpZiAoZGVzY3JpcHRvciAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhKGhhc093bihpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSB7XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZGVzY3JpcHRvcjtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSkgcHVzaChyZXN1bHQsIGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiAoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhc093bihPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICBwdXNoKHJlc3VsdCwgQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAoaXNQcm90b3R5cGVPZihTeW1ib2xQcm90b3R5cGUsIHRoaXMpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICR0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciAkdGhpcyA9IHRoaXMgPT09IHVuZGVmaW5lZCA/IGdsb2JhbCA6IHRoaXM7XG4gICAgICBpZiAoJHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkgY2FsbChzZXR0ZXIsIE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXNPd24oJHRoaXMsIEhJRERFTikgJiYgaGFzT3duKCR0aGlzW0hJRERFTl0sIHRhZykpICR0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcigkdGhpcywgdGFnLCBkZXNjcmlwdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikpIHRocm93IGVycm9yO1xuICAgICAgICBmYWxsYmFja0RlZmluZVByb3BlcnR5KCR0aGlzLCB0YWcsIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sW1BST1RPVFlQRV07XG5cbiAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgZGVmaW5lQnVpbHRJbigkU3ltYm9sLCAnd2l0aG91dFNldHRlcicsIGZ1bmN0aW9uIChkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB3cmFwKHVpZChkZXNjcmlwdGlvbiksIGRlc2NyaXB0aW9uKTtcbiAgfSk7XG5cbiAgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgZGVmaW5lUHJvcGVydGllc01vZHVsZS5mID0gJGRlZmluZVByb3BlcnRpZXM7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIGRlZmluZUJ1aWx0SW4oT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lc1xufSk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgnZGVzY3JpcHRpb24gZGV0ZWN0aW9uJykpID09PSAnU3ltYm9sKGRlc2NyaXB0aW9uIGRldGVjdGlvbiknO1xuICB2YXIgdGhpc1N5bWJvbFZhbHVlID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnZhbHVlT2YpO1xuICB2YXIgc3ltYm9sRGVzY3JpcHRpdmVTdHJpbmcgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgdmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbiAgdmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSB0aGlzU3ltYm9sVmFsdWUodGhpcyk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nKHN5bWJvbCk7XG4gICAgICB2YXIgZGVzYyA9IE5BVElWRV9TWU1CT0wgPyBzdHJpbmdTbGljZShzdHJpbmcsIDcsIC0xKSA6IHJlcGxhY2Uoc3RyaW5nLCByZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzT3duKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wua2V5LWZvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmtleWZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IG5ldyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoc3ltKSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG52YXIgZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUnKTtcblxuLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvcHJpbWl0aXZlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5kZWZpbmVTeW1ib2xUb1ByaW1pdGl2ZSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59O1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkge1xuICAgIGhhbmRsZVByb3RvdHlwZShnbG9iYWxbQ09MTEVDVElPTl9OQU1FXSAmJiBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXS5wcm90b3R5cGUpO1xuICB9XG59XG5cbmhhbmRsZVByb3RvdHlwZShET01Ub2tlbkxpc3RQcm90b3R5cGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tdG9rZW4tbGlzdC1wcm90b3R5cGUnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG52YXIgaGFuZGxlUHJvdG90eXBlID0gZnVuY3Rpb24gKENvbGxlY3Rpb25Qcm90b3R5cGUsIENPTExFQ1RJT05fTkFNRSkge1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgc2V0VG9TdHJpbmdUYWcoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FLCB0cnVlKTtcbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IGZ1bmN0aW9uIGdldENvb2tpZXMoKSB7XG4gICAgY29uc3QgY29va2llU3RyaW5ncyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgIGNvbnN0IGNvb2tpZXMgPSBbXTtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ15cXFxccyooW149XSspXFxcXHMqPVxcXFxzKiguKj8pJCcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29va2llU3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb29raWVTdHIgPSBjb29raWVTdHJpbmdzW2ldO1xuICAgICAgICBjb25zdCBtYXRjaCA9IHJlZ2V4LmV4ZWMoY29va2llU3RyKTtcbiAgICAgICAgaWYgKG1hdGNoID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgICAgY29va2llcy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgdmFsdWU6IG1hdGNoWzJdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvb2tpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb29raWUobmFtZSkge1xuICAgIGNvbnN0IGNvb2tpZXMgPSBnZXRDb29raWVzKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjb29raWVzW2ldLm5hbWUgPT09IG5hbWUpIHJldHVybiBjb29raWVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDU3MzIyMy9zZXQtY29va2llLWFuZC1nZXQtY29va2llLXdpdGgtamF2YXNjcmlwdFxuZXhwb3J0IGZ1bmN0aW9uIHNldENvb2tpZShuYW1lLCB2YWx1ZSwgZGF5cywgZG9tYWluLCBwYXRoKSB7XG4gICAgbGV0IGV4cGlyZXMgPSAnJztcbiAgICBpZiAoZGF5cykge1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpICsgZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICBleHBpcmVzID0gJzsgZXhwaXJlcz0nICsgZGF0ZS50b1VUQ1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoZG9tYWluICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXhwaXJlcyArPSAnOyBkb21haW49JyArIGRvbWFpbjtcbiAgICB9XG4gICAgaWYgKHBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBleHBpcmVzICs9ICc7IHBhdGg9JyArIHBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXhwaXJlcyArPSAnOyBwYXRoPS8nO1xuICAgIH1cbiAgICBkb2N1bWVudC5jb29raWUgPVxuICAgICAgICBuYW1lICsgJz0nICsgKHZhbHVlIHx8ICcnKSArIGV4cGlyZXMgKyAnOyBTYW1lU2l0ZT1MYXgnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQ29va2llKG5hbWUsIHBhdGgsIGRvbWFpbikge1xuICAgIGxldCBzdHIgPSBuYW1lICsgJz07IE1heC1BZ2U9LTk5OTk5OTk5Oyc7XG4gICAgLy8gdHJ5IHRvIGRlbGV0ZSB0aGUgY29va2llIHdpdGhvdXQgYW55IHBhdGggYW5kIGRvbWFpblxuICAgIGRvY3VtZW50LmNvb2tpZSA9IHN0cjtcbiAgICBzdHIgKz0gJyBwYXRoPScgKyAocGF0aCB8fCAnLycpICsgJzsnO1xuICAgIC8vIHRyeSB0byBkZWxldGUgdGhlIGNvb2tpZSB3aXRoIHBhdGhcbiAgICBkb2N1bWVudC5jb29raWUgPSBzdHI7XG4gICAgaWYgKGRvbWFpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0ciArPSAnIGRvbWFpbj0nICsgZG9tYWluICsgJzsnO1xuICAgICAgICAvLyB0cnkgdG8gZGVsZXRlIHRoZSBjb29raWUgd2l0aCBkb21haW4gYW5kIHBhdGhcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gc3RyO1xuICAgIH1cbn1cbiIsImltcG9ydCB7Z2V0Q29va2llLCBzZXRDb29raWUsIGRlbGV0ZUNvb2tpZX0gZnJvbSAnLi91dGlscy9jb29raWVzJ1xuXG5cbmV4cG9ydCBjbGFzcyBUZXN0U3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsXG4gICAgfVxuXG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVxuICAgIH1cblxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gbnVsbFxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvb2tpZVN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihtYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuY29va2llTmFtZSA9IG1hbmFnZXIuc3RvcmFnZU5hbWVcbiAgICAgICAgdGhpcy5jb29raWVEb21haW4gPSBtYW5hZ2VyLmNvb2tpZURvbWFpblxuICAgICAgICB0aGlzLmNvb2tpZVBhdGggPSBtYW5hZ2VyLmNvb2tpZVBhdGhcbiAgICAgICAgdGhpcy5jb29raWVFeHBpcmVzQWZ0ZXJEYXlzID0gbWFuYWdlci5jb29raWVFeHBpcmVzQWZ0ZXJEYXlzXG4gICAgfVxuXG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBjb29raWUgPSBnZXRDb29raWUodGhpcy5jb29raWVOYW1lKTtcbiAgICAgICAgcmV0dXJuIGNvb2tpZVxuICAgICAgICAgICAgPyBjb29raWUudmFsdWVcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG5cbiAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHNldENvb2tpZSh0aGlzLmNvb2tpZU5hbWUsIHZhbHVlLCB0aGlzLmNvb2tpZUV4cGlyZXNBZnRlckRheXMsIHRoaXMuY29va2llRG9tYWluLCB0aGlzLmNvb2tpZVBhdGgpXG4gICAgfVxuXG4gICAgZGVsZXRlKCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ29va2llKHRoaXMuY29va2llTmFtZSk7XG4gICAgfVxufVxuXG5jbGFzcyBTdG9yYWdlU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIsIGhhbmRsZSkge1xuICAgICAgICB0aGlzLmtleSA9IG1hbmFnZXIuc3RvcmFnZU5hbWU7XG4gICAgICAgIHRoaXMuaGFuZGxlID0gaGFuZGxlXG4gICAgfVxuXG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUuZ2V0SXRlbSh0aGlzLmtleSk7XG4gICAgfVxuXG4gICAgZ2V0V2l0aEtleShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlLmdldEl0ZW0oa2V5KTtcbiAgICB9XG5cbiAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlLnNldEl0ZW0odGhpcy5rZXksIHZhbHVlKVxuICAgIH1cblxuICAgIHNldFdpdGhLZXkoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGUuc2V0SXRlbShrZXksIHZhbHVlKVxuICAgIH1cblxuICAgIGRlbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlLnJlbW92ZUl0ZW0odGhpcy5rZXkpO1xuICAgIH1cblxuICAgIGRlbGV0ZVdpdGhLZXkoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlU3RvcmUgZXh0ZW5kcyBTdG9yYWdlU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKG1hbmFnZXIpe1xuICAgICAgICBzdXBlcihtYW5hZ2VyLCBsb2NhbFN0b3JhZ2UpXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2Vzc2lvblN0b3JhZ2VTdG9yZSBleHRlbmRzIFN0b3JhZ2VTdG9yZSB7XG4gICAgY29uc3RydWN0b3IobWFuYWdlcil7XG4gICAgICAgIHN1cGVyKG1hbmFnZXIsIHNlc3Npb25TdG9yYWdlKVxuICAgIH1cbn1cblxuY29uc3Qgc3RvcmVzID0ge1xuICAgICdjb29raWUnOiBDb29raWVTdG9yZSxcbiAgICAndGVzdCc6IFRlc3RTdG9yZSxcbiAgICAnbG9jYWxTdG9yYWdlJzogTG9jYWxTdG9yYWdlU3RvcmUsXG4gICAgJ3Nlc3Npb25TdG9yYWdlJzogU2Vzc2lvblN0b3JhZ2VTdG9yZSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RvcmVzXG4iLCJpbXBvcnQge2dldENvb2tpZXMsIGRlbGV0ZUNvb2tpZX0gZnJvbSAnLi91dGlscy9jb29raWVzJ1xuaW1wb3J0IHtkYXRhc2V0LCBhcHBseURhdGFzZXR9IGZyb20gJy4vdXRpbHMvY29tcGF0J1xuaW1wb3J0IHN0b3JlcywgeyBTZXNzaW9uU3RvcmFnZVN0b3JlIH0gZnJvbSAnLi9zdG9yZXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnNlbnRNYW5hZ2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZywgc3RvcmUsIGF1eGlsaWFyeVN0b3JlKXtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgLy8gdGhlIGNvbmZpZ3VyYXRpb25cblxuICAgICAgICBpZiAoc3RvcmUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuc3RvcmUgPSBzdG9yZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnN0b3JlID0gbmV3IHN0b3Jlc1t0aGlzLnN0b3JhZ2VNZXRob2RdKHRoaXMpXG5cbiAgICAgICAgLy8gd2UgZmFsbCBiYWNrIHRvIHRoZSBjb29raWUtYmFzZWQgc3RvcmUgaWYgdGhlIHN0b3JlIGlzIHVuZGVmaW5lZFxuICAgICAgICBpZiAodGhpcy5zdG9yZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5zdG9yZSA9IHN0b3Jlc1snY29va2llJ11cblxuICAgICAgICBpZiAoYXV4aWxpYXJ5U3RvcmUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRoaXMuYXV4aWxpYXJ5U3RvcmUgPSBhdXhpbGlhcnlTdG9yZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmF1eGlsaWFyeVN0b3JlID0gbmV3IFNlc3Npb25TdG9yYWdlU3RvcmUodGhpcylcblxuICAgICAgICB0aGlzLmNvbnNlbnRzID0gdGhpcy5kZWZhdWx0Q29uc2VudHMgLy8gdGhlIGNvbnNlbnQgc3RhdGVzIG9mIHRoZSBjb25maWd1cmVkIHNlcnZpY2VzXG4gICAgICAgIHRoaXMuY29uZmlybWVkID0gZmFsc2UgLy8gdHJ1ZSBpZiB0aGUgdXNlciBhY3RpdmVseSBjb25maXJtZWQgaGlzL2hlciBjb25zZW50XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlIC8vIHRydWUgaWYgdGhlIHNlcnZpY2UgY29uZmlnIGNoYW5nZWQgY29tcGFyZWQgdG8gdGhlIGNvb2tpZVxuICAgICAgICB0aGlzLnN0YXRlcyA9IHt9IC8vIGtlZXAgdHJhY2sgb2YgdGhlIGNoYW5nZSAoZW5hYmxlZCwgZGlzYWJsZWQpIG9mIGluZGl2aWR1YWwgc2VydmljZXNcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHt9IC8vIGtlZXAgdHJhY2sgb2Ygd2hpY2ggc2VydmljZXMgaGF2ZSBiZWVuIGluaXRpYWxpemVkIGFscmVhZHlcbiAgICAgICAgdGhpcy5leGVjdXRlZE9uY2UgPSB7fSAvL2tlZXAgdHJhY2sgb2Ygd2hpY2ggc2VydmljZXMgaGF2ZSBiZWVuIGV4ZWN1dGVkIGF0IGxlYXN0IG9uY2VcbiAgICAgICAgdGhpcy53YXRjaGVycyA9IG5ldyBTZXQoW10pXG4gICAgICAgIHRoaXMubG9hZENvbnNlbnRzKClcbiAgICAgICAgdGhpcy5hcHBseUNvbnNlbnRzKClcbiAgICAgICAgdGhpcy5zYXZlZENvbnNlbnRzID0gey4uLnRoaXMuY29uc2VudHN9XG4gICAgfVxuXG4gICAgZ2V0IHN0b3JhZ2VNZXRob2QoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnN0b3JhZ2VNZXRob2QgfHwgJ2Nvb2tpZSdcbiAgICB9XG5cbiAgICBnZXQgc3RvcmFnZU5hbWUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnN0b3JhZ2VOYW1lIHx8IHRoaXMuY29uZmlnLmNvb2tpZU5hbWUgfHwgJ2tsYXJvJyAvLyBkZXByZWNhdGVkOiBjb29raWVOYW1lXG4gICAgfVxuXG4gICAgZ2V0IGNvb2tpZURvbWFpbigpe1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuY29va2llRG9tYWluIHx8IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGdldCBjb29raWVQYXRoKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb29raWVQYXRoIHx8IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGdldCBjb29raWVFeHBpcmVzQWZ0ZXJEYXlzKCl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb29raWVFeHBpcmVzQWZ0ZXJEYXlzIHx8IDEyMFxuICAgIH1cblxuICAgIGdldCBkZWZhdWx0Q29uc2VudHMoKXtcbiAgICAgICAgY29uc3QgY29uc2VudHMgPSB7fVxuICAgICAgICBmb3IobGV0IGk9MDtpPHRoaXMuY29uZmlnLnNlcnZpY2VzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHRoaXMuY29uZmlnLnNlcnZpY2VzW2ldXG4gICAgICAgICAgICBjb25zZW50c1tzZXJ2aWNlLm5hbWVdID0gdGhpcy5nZXREZWZhdWx0Q29uc2VudChzZXJ2aWNlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25zZW50c1xuICAgIH1cblxuICAgIHdhdGNoKHdhdGNoZXIpe1xuICAgICAgICBpZiAoIXRoaXMud2F0Y2hlcnMuaGFzKHdhdGNoZXIpKVxuICAgICAgICAgICAgdGhpcy53YXRjaGVycy5hZGQod2F0Y2hlcilcbiAgICB9XG5cbiAgICB1bndhdGNoKHdhdGNoZXIpe1xuICAgICAgICBpZiAodGhpcy53YXRjaGVycy5oYXMod2F0Y2hlcikpXG4gICAgICAgICAgICB0aGlzLndhdGNoZXJzLmRlbGV0ZSh3YXRjaGVyKVxuICAgIH1cblxuICAgIG5vdGlmeShuYW1lLCBkYXRhKXtcbiAgICAgICAgdGhpcy53YXRjaGVycy5mb3JFYWNoKCh3YXRjaGVyKSA9PiB7XG4gICAgICAgICAgICB3YXRjaGVyLnVwZGF0ZSh0aGlzLCBuYW1lLCBkYXRhKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGdldFNlcnZpY2UobmFtZSl7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nU2VydmljZXMgPSB0aGlzLmNvbmZpZy5zZXJ2aWNlcy5maWx0ZXIoc2VydmljZT0+c2VydmljZS5uYW1lID09PSBuYW1lKVxuICAgICAgICBpZiAobWF0Y2hpbmdTZXJ2aWNlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nU2VydmljZXNbMF1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGdldERlZmF1bHRDb25zZW50KHNlcnZpY2Upe1xuICAgICAgICBsZXQgY29uc2VudCA9IHNlcnZpY2UuZGVmYXVsdCB8fCBzZXJ2aWNlLnJlcXVpcmVkXG4gICAgICAgIGlmIChjb25zZW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjb25zZW50ID0gdGhpcy5jb25maWcuZGVmYXVsdFxuICAgICAgICBpZiAoY29uc2VudCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgY29uc2VudCA9IGZhbHNlXG4gICAgICAgIHJldHVybiBjb25zZW50XG4gICAgfVxuXG4gICAgY2hhbmdlQWxsKHZhbHVlKXtcbiAgICAgICAgbGV0IGNoYW5nZWRTZXJ2aWNlcyA9IDBcbiAgICAgICAgdGhpcy5jb25maWcuc2VydmljZXMuZmlsdGVyKHNlcnZpY2UgPT4gIXNlcnZpY2UuY29udGV4dHVhbENvbnNlbnRPbmx5KS5tYXAoc2VydmljZSA9PiB7XG4gICAgICAgICAgICBpZihzZXJ2aWNlLnJlcXVpcmVkIHx8IHRoaXMuY29uZmlnLnJlcXVpcmVkIHx8IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXBkYXRlQ29uc2VudChzZXJ2aWNlLm5hbWUsIHRydWUpKVxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkU2VydmljZXMrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy51cGRhdGVDb25zZW50KHNlcnZpY2UubmFtZSwgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkU2VydmljZXMrK1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gY2hhbmdlZFNlcnZpY2VzXG4gICAgfVxuXG4gICAgdXBkYXRlQ29uc2VudChuYW1lLCB2YWx1ZSl7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAodGhpcy5jb25zZW50c1tuYW1lXSB8fCBmYWxzZSkgIT09IHZhbHVlXG4gICAgICAgIHRoaXMuY29uc2VudHNbbmFtZV0gPSB2YWx1ZVxuICAgICAgICB0aGlzLm5vdGlmeSgnY29uc2VudHMnLCB0aGlzLmNvbnNlbnRzKVxuICAgICAgICByZXR1cm4gY2hhbmdlZFxuICAgIH1cblxuICAgIHJlc2V0Q29uc2VudHMoKXtcbiAgICAgICAgdGhpcy5jb25zZW50cyA9IHRoaXMuZGVmYXVsdENvbnNlbnRzXG4gICAgICAgIHRoaXMuc3RhdGVzID0ge31cbiAgICAgICAgdGhpcy5jb25maXJtZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLmFwcGx5Q29uc2VudHMoKVxuICAgICAgICB0aGlzLnNhdmVkQ29uc2VudHMgPSB7Li4udGhpcy5jb25zZW50c31cbiAgICAgICAgdGhpcy5zdG9yZS5kZWxldGUoKVxuICAgICAgICB0aGlzLm5vdGlmeSgnY29uc2VudHMnLCB0aGlzLmNvbnNlbnRzKVxuICAgIH1cblxuICAgIGdldENvbnNlbnQobmFtZSl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnNlbnRzW25hbWVdIHx8IGZhbHNlXG4gICAgfVxuXG4gICAgbG9hZENvbnNlbnRzKCl7XG4gICAgICAgIGNvbnN0IGNvbnNlbnREYXRhID0gdGhpcy5zdG9yZS5nZXQoKTtcbiAgICAgICAgaWYgKGNvbnNlbnREYXRhICE9PSBudWxsKXtcbiAgICAgICAgICAgIHRoaXMuY29uc2VudHMgPSBKU09OLnBhcnNlKGRlY29kZVVSSUNvbXBvbmVudChjb25zZW50RGF0YSkpXG4gICAgICAgICAgICB0aGlzLl9jaGVja0NvbnNlbnRzKClcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KCdjb25zZW50cycsIHRoaXMuY29uc2VudHMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc2VudHNcbiAgICB9XG5cbiAgICBzYXZlQW5kQXBwbHlDb25zZW50cyhldmVudFR5cGUpe1xuICAgICAgICB0aGlzLnNhdmVDb25zZW50cyhldmVudFR5cGUpXG4gICAgICAgIHRoaXMuYXBwbHlDb25zZW50cygpXG4gICAgfVxuXG4gICAgY2hhbmdlZENvbnNlbnRzKCl7XG4gICAgICAgIGNvbnN0IGNjID0ge31cbiAgICAgICAgZm9yKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmNvbnNlbnRzKSl7XG4gICAgICAgICAgICBpZiAodGhpcy5zYXZlZENvbnNlbnRzW2tdICE9PSB2KVxuICAgICAgICAgICAgICAgIGNjW2tdID0gdlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjY1xuICAgIH1cblxuICAgIHNhdmVDb25zZW50cyhldmVudFR5cGUpe1xuICAgICAgICBjb25zdCB2ID0gZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHRoaXMuY29uc2VudHMpKVxuICAgICAgICB0aGlzLnN0b3JlLnNldCh2KTtcbiAgICAgICAgdGhpcy5jb25maXJtZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLmNoYW5nZWRDb25zZW50cygpXG4gICAgICAgIHRoaXMuc2F2ZWRDb25zZW50cyA9IHsuLi50aGlzLmNvbnNlbnRzfVxuICAgICAgICB0aGlzLm5vdGlmeSgnc2F2ZUNvbnNlbnRzJywge2NoYW5nZXM6IGNoYW5nZXMsIGNvbnNlbnRzOiB0aGlzLmNvbnNlbnRzLCB0eXBlOiBldmVudFR5cGUgfHwgJ3NjcmlwdCd9KVxuICAgIH1cblxuICAgIGFwcGx5Q29uc2VudHMoZHJ5UnVuLCBpbnRlcmFjdGl2ZSwgc2VydmljZU5hbWUpe1xuXG4gICAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVIYW5kbGVyKGhhbmRsZXIsIG9wdHMpe1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIGxldCBoYW5kbGVyRnVuY3Rpb25cbiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICAgICAgaGFuZGxlckZ1bmN0aW9uID0gaGFuZGxlclxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICAgICAgICAgICBoYW5kbGVyRnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oJ29wdHMnLCBoYW5kbGVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJGdW5jdGlvbihvcHRzKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNoYW5nZWRTZXJ2aWNlcyA9IDBcblxuICAgICAgICAvLyB3ZSBtYWtlIHN1cmUgYWxsIHNlcnZpY2VzIGFyZSBwcm9wZXJseSBpbml0aWFsaXplZFxuICAgICAgICBmb3IobGV0IGk9MDtpPHRoaXMuY29uZmlnLnNlcnZpY2VzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHRoaXMuY29uZmlnLnNlcnZpY2VzW2ldXG4gICAgICAgICAgICBpZiAoc2VydmljZU5hbWUgIT09IHVuZGVmaW5lZCAmJiBzZXJ2aWNlTmFtZSAhPT0gc2VydmljZS5uYW1lKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICBjb25zdCB2YXJzID0gc2VydmljZS52YXJzIHx8IHt9XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyT3B0cyA9IHtzZXJ2aWNlOiBzZXJ2aWNlLCBjb25maWc6IHRoaXMuY29uZmlnLCB2YXJzOiB2YXJzfVxuICAgICAgICAgICAgLy8gd2UgZXhlY3V0ZSB0aGUgaW5pdCBmdW5jdGlvbiBvZiB0aGUgc2VydmljZSAoaWYgaXQgaXMgZGVmaW5lZClcbiAgICAgICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZFtzZXJ2aWNlLm5hbWVdKXtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVkW3NlcnZpY2UubmFtZV0gPSB0cnVlXG4gICAgICAgICAgICAgICAgZXhlY3V0ZUhhbmRsZXIoc2VydmljZS5vbkluaXQsIGhhbmRsZXJPcHRzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpPTA7aTx0aGlzLmNvbmZpZy5zZXJ2aWNlcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLmNvbmZpZy5zZXJ2aWNlc1tpXVxuICAgICAgICAgICAgaWYgKHNlcnZpY2VOYW1lICE9PSB1bmRlZmluZWQgJiYgc2VydmljZU5hbWUgIT09IHNlcnZpY2UubmFtZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlc1tzZXJ2aWNlLm5hbWVdXG4gICAgICAgICAgICBjb25zdCB2YXJzID0gc2VydmljZS52YXJzIHx8IHt9XG4gICAgICAgICAgICBjb25zdCBvcHRPdXQgPSAoc2VydmljZS5vcHRPdXQgIT09IHVuZGVmaW5lZCA/IHNlcnZpY2Uub3B0T3V0IDogKHRoaXMuY29uZmlnLm9wdE91dCB8fCBmYWxzZSkpXG4gICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9IChzZXJ2aWNlLnJlcXVpcmVkICE9PSB1bmRlZmluZWQgPyBzZXJ2aWNlLnJlcXVpcmVkIDogKHRoaXMuY29uZmlnLnJlcXVpcmVkIHx8IGZhbHNlKSlcbiAgICAgICAgICAgIC8vb3B0IG91dCBhbmQgcmVxdWlyZWQgc2VydmljZXMgYXJlIGFsd2F5cyB0cmVhdGVkIGFzIGNvbmZpcm1lZFxuICAgICAgICAgICAgY29uc3QgY29uZmlybWVkID0gdGhpcy5jb25maXJtZWQgfHwgb3B0T3V0IHx8IGRyeVJ1biB8fCBpbnRlcmFjdGl2ZVxuICAgICAgICAgICAgY29uc3QgY29uc2VudCA9ICh0aGlzLmdldENvbnNlbnQoc2VydmljZS5uYW1lKSAmJiBjb25maXJtZWQpIHx8IHJlcXVpcmVkXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyT3B0cyA9IHtzZXJ2aWNlOiBzZXJ2aWNlLCBjb25maWc6IHRoaXMuY29uZmlnLCB2YXJzOiB2YXJzLCBjb25zZW50czogdGhpcy5jb25zZW50cywgY29uZmlybWVkOiB0aGlzLmNvbmZpcm1lZH1cblxuICAgICAgICAgICAgaWYgKHN0YXRlICE9PSBjb25zZW50KVxuICAgICAgICAgICAgICAgIGNoYW5nZWRTZXJ2aWNlcysrXG5cbiAgICAgICAgICAgIGlmIChkcnlSdW4pXG4gICAgICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgLy8gd2UgZXhlY3V0ZSBjdXN0b20gc2VydmljZSBoYW5kbGVycyAoaWYgdGhleSBhcmUgZGVmaW5lZClcbiAgICAgICAgICAgIGV4ZWN1dGVIYW5kbGVyKGNvbnNlbnQgPyBzZXJ2aWNlLm9uQWNjZXB0IDogc2VydmljZS5vbkRlY2xpbmUsIGhhbmRsZXJPcHRzKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZXJ2aWNlRWxlbWVudHMoc2VydmljZSwgY29uc2VudClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VydmljZVN0b3JhZ2Uoc2VydmljZSwgY29uc2VudClcblxuICAgICAgICAgICAgLy8gd2UgZXhlY3V0ZSB0aGUgc2VydmljZSBjYWxsYmFjayAoaWYgb25lIGlzIGRlZmluZWQpXG4gICAgICAgICAgICBpZiAoc2VydmljZS5jYWxsYmFjayAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHNlcnZpY2UuY2FsbGJhY2soY29uc2VudCwgc2VydmljZSlcblxuICAgICAgICAgICAgLy8gd2UgZXhlY3V0ZSB0aGUgZ2xvYmFsIGNhbGxiYWNrIChpZiBvbmUgaXMgZGVmaW5lZClcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5jYWxsYmFjayAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmNhbGxiYWNrKGNvbnNlbnQsIHNlcnZpY2UpXG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGVzW3NlcnZpY2UubmFtZV0gPSBjb25zZW50XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnkoJ2FwcGx5Q29uc2VudHMnLCBjaGFuZ2VkU2VydmljZXMsIHNlcnZpY2VOYW1lKVxuICAgICAgICByZXR1cm4gY2hhbmdlZFNlcnZpY2VzXG4gICAgfVxuXG4gICAgdXBkYXRlU2VydmljZUVsZW1lbnRzKHNlcnZpY2UsIGNvbnNlbnQpe1xuXG4gICAgICAgIC8vIHdlIG1ha2Ugc3VyZSB3ZSBleGVjdXRlIHRoaXMgc2VydmljZSBvbmx5IG9uY2UgaWYgdGhlIG9wdGlvbiBpcyBzZXRcbiAgICAgICAgaWYgKGNvbnNlbnQpe1xuICAgICAgICAgICAgaWYgKHNlcnZpY2Uub25seU9uY2UgJiYgdGhpcy5leGVjdXRlZE9uY2Vbc2VydmljZS5uYW1lXSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZWRPbmNlW3NlcnZpY2UubmFtZV0gPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1uYW1lPSdcIitzZXJ2aWNlLm5hbWUrXCInXVwiKVxuICAgICAgICBmb3IobGV0IGk9MDtpPGVsZW1lbnRzLmxlbmd0aDtpKyspe1xuXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV1cblxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50XG4gICAgICAgICAgICBjb25zdCBkcyA9IGRhdGFzZXQoZWxlbWVudClcbiAgICAgICAgICAgIGNvbnN0IHt0eXBlLCBzcmMsIGhyZWZ9ID0gZHNcbiAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gWydocmVmJywgJ3NyYycsICd0eXBlJ11cblxuICAgICAgICAgICAgLy8gd2UgaGFuZGxlIHBsYWNlaG9sZGVyIGVsZW1lbnRzIGhlcmUuLi5cbiAgICAgICAgICAgIGlmICh0eXBlID09PSAncGxhY2Vob2xkZXInKXtcbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCl7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgZHNbJ29yaWdpbmFsLWRpc3BsYXknXSA9IGVsZW1lbnQuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gZHNbJ29yaWdpbmFsLWRpc3BsYXknXSB8fCAnYmxvY2snO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09PSAnSUZSQU1FJyl7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLCB3ZSBkbyBub3QgdG91Y2ggaXQuLi5cbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCAmJiBlbGVtZW50LnNyYyA9PT0gc3JjKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgU2tpcHBpbmcgJHtlbGVtZW50LnRhZ05hbWV9IGZvciBzZXJ2aWNlICR7c2VydmljZS5uYW1lfSwgYXMgaXQgYWxyZWFkeSBoYXMgdGhlIGNvcnJlY3QgdHlwZS4uLmApXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHdlIGNyZWF0ZSBhIG5ldyBzY3JpcHQgaW5zdGVhZCBvZiB1cGRhdGluZyB0aGUgbm9kZSBpblxuICAgICAgICAgICAgICAgIC8vIHBsYWNlLCBhcyB0aGUgc2NyaXB0IHdvbid0IHN0YXJ0IGNvcnJlY3RseSBvdGhlcndpc2VcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50LnRhZ05hbWUpXG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IGF0dHJpYnV0ZSBvZiBlbGVtZW50LmF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC50ZXh0ID0gZWxlbWVudC50ZXh0XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCl7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkc1snb3JpZ2luYWwtZGlzcGxheSddICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBkc1snb3JpZ2luYWwtZGlzcGxheSddXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcy5zcmMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc3JjID0gZHMuc3JjXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zcmMgPSAnJ1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHNbJ21vZGlmaWVkLWJ5LWtsYXJvJ10gIT09IHVuZGVmaW5lZCAmJiBkc1snb3JpZ2luYWwtZGlzcGxheSddICE9PSB1bmRlZmluZWQpIC8vIHRoaXMgaXMgYWxyZWFkeSBhIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC1kaXNwbGF5JywgZHNbJ29yaWdpbmFsLWRpc3BsYXknXSlcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7Ly8gdGhpcyBpcyBhIG5ldyBlbGVtZW50IHdlIGhhdmVuJ3QgdG91Y2hlZCBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0eWxlLmRpc3BsYXkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC1kaXNwbGF5JywgZWxlbWVudC5zdHlsZS5kaXNwbGF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kaWZpZWQtYnkta2xhcm8nLCAneWVzJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy93ZSByZW1vdmUgdGhlIG9yaWdpbmFsIGVsZW1lbnQgYW5kIGluc2VydCBhIG5ldyBvbmVcbiAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld0VsZW1lbnQsIGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudGFnTmFtZSA9PT0gJ1NDUklQVCcgfHwgZWxlbWVudC50YWdOYW1lID09PSAnTElOSycpe1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSwgd2UgZG8gbm90IHRvdWNoIGl0Li4uXG4gICAgICAgICAgICAgICAgaWYgKGNvbnNlbnQgJiYgZWxlbWVudC50eXBlID09PSAodHlwZSB8fCBcIlwiKSAmJiBlbGVtZW50LnNyYyA9PT0gc3JjKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgU2tpcHBpbmcgJHtlbGVtZW50LnRhZ05hbWV9IGZvciBzZXJ2aWNlICR7c2VydmljZS5uYW1lfSwgYXMgaXQgYWxyZWFkeSBoYXMgdGhlIGNvcnJlY3QgdHlwZSBvciBzcmMuLi5gKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB3ZSBjcmVhdGUgYSBuZXcgc2NyaXB0IGluc3RlYWQgb2YgdXBkYXRpbmcgdGhlIG5vZGUgaW5cbiAgICAgICAgICAgICAgICAvLyBwbGFjZSwgYXMgdGhlIHNjcmlwdCB3b24ndCBzdGFydCBjb3JyZWN0bHkgb3RoZXJ3aXNlXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudC50YWdOYW1lKVxuICAgICAgICAgICAgICAgIGZvcihjb25zdCBhdHRyaWJ1dGUgb2YgZWxlbWVudC5hdHRyaWJ1dGVzKXtcbiAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLm5hbWUsIGF0dHJpYnV0ZS52YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBuZXdFbGVtZW50LmlubmVyVGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC50ZXh0ID0gZWxlbWVudC50ZXh0XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uc2VudCl7XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQudHlwZSA9IHR5cGUgfHwgXCJcIlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50LnNyYyA9IHNyY1xuICAgICAgICAgICAgICAgICAgICBpZiAoaHJlZiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5ocmVmID0gaHJlZlxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQudHlwZSA9ICd0ZXh0L3BsYWluJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3dlIHJlbW92ZSB0aGUgb3JpZ2luYWwgZWxlbWVudCBhbmQgaW5zZXJ0IGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3RWxlbWVudCwgZWxlbWVudClcbiAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYWxsIG90aGVyIGVsZW1lbnRzIChpbWFnZXMgZXRjLikgYXJlIG1vZGlmaWVkIGluIHBsYWNlLi4uXG4gICAgICAgICAgICAgICAgaWYgKGNvbnNlbnQpe1xuICAgICAgICAgICAgICAgICAgICBmb3IoY29uc3QgYXR0ciBvZiBhdHRycyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSBkc1thdHRyXVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJWYWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHNbJ29yaWdpbmFsLScrYXR0cl0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkc1snb3JpZ2luYWwtJythdHRyXSA9IGVsZW1lbnRbYXR0cl1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbYXR0cl0gPSBhdHRyVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHMudGl0bGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudGl0bGUgPSBkcy50aXRsZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZHNbJ29yaWdpbmFsLWRpc3BsYXknXSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRzWydvcmlnaW5hbC1kaXNwbGF5J11cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2Rpc3BsYXknKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkcy50aXRsZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRzWydvcmlnaW5hbC1kaXNwbGF5J10gPT09IHVuZGVmaW5lZCAmJiBlbGVtZW50LnN0eWxlLmRpc3BsYXkgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzWydvcmlnaW5hbC1kaXNwbGF5J10gPSBlbGVtZW50LnN0eWxlLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBhdHRyIG9mIGF0dHJzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJWYWx1ZSA9IGRzW2F0dHJdXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkc1snb3JpZ2luYWwtJythdHRyXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbYXR0cl0gPSBkc1snb3JpZ2luYWwtJythdHRyXVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwbHlEYXRhc2V0KGRzLCBlbGVtZW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB1cGRhdGVTZXJ2aWNlU3RvcmFnZShzZXJ2aWNlLCBjb25zZW50KXtcblxuICAgICAgICBpZiAoY29uc2VudClcbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ2V4U3RyKHN0cikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLVtcXF0ve30oKSorPy5cXFxcXiR8XS9nLCBcIlxcXFwkJlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXJ2aWNlLmNvb2tpZXMgIT09IHVuZGVmaW5lZCAmJiBzZXJ2aWNlLmNvb2tpZXMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICBjb25zdCBjb29raWVzID0gZ2V0Q29va2llcygpXG4gICAgICAgICAgICBmb3IobGV0IGk9MDtpPHNlcnZpY2UuY29va2llcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgICAgICBsZXQgY29va2llUGF0dGVybiA9IHNlcnZpY2UuY29va2llc1tpXVxuICAgICAgICAgICAgICAgIGxldCBjb29raWVQYXRoLCBjb29raWVEb21haW5cbiAgICAgICAgICAgICAgICBpZiAoY29va2llUGF0dGVybiBpbnN0YW5jZW9mIEFycmF5KXtcbiAgICAgICAgICAgICAgICAgICAgW2Nvb2tpZVBhdHRlcm4sIGNvb2tpZVBhdGgsIGNvb2tpZURvbWFpbl0gPSBjb29raWVQYXR0ZXJuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb29raWVQYXR0ZXJuIGluc3RhbmNlb2YgT2JqZWN0ICYmICEoY29va2llUGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcCA9IGNvb2tpZVBhdHRlcm5cbiAgICAgICAgICAgICAgICAgICAgY29va2llUGF0dGVybiA9IGNwLnBhdHRlcm5cbiAgICAgICAgICAgICAgICAgICAgY29va2llUGF0aCA9IGNwLnBhdGhcbiAgICAgICAgICAgICAgICAgICAgY29va2llRG9tYWluID0gY3AuZG9tYWluXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb29raWVQYXR0ZXJuID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgaWYgKCEoY29va2llUGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29va2llUGF0dGVybi5zdGFydHNXaXRoKCdeJykpIC8vIHdlIGFzc3VtZSB0aGlzIGlzIGFscmVhZHkgYSByZWdleFxuICAgICAgICAgICAgICAgICAgICAgICAgY29va2llUGF0dGVybiA9IG5ldyBSZWdFeHAoY29va2llUGF0dGVybilcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAvLyB3ZSBhc3N1bWUgdGhpcyBpcyBhIG5vcm1hbCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZVBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeJytlc2NhcGVSZWdleFN0cihjb29raWVQYXR0ZXJuKSsnJCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8Y29va2llcy5sZW5ndGg7aisrKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29va2llID0gY29va2llc1tqXVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGNvb2tpZVBhdHRlcm4uZXhlYyhjb29raWUubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiRGVsZXRpbmcgY29va2llOlwiLCBjb29raWUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk1hdGNoZWQgcGF0dGVybjpcIiwgY29va2llUGF0dGVybixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBhdGg6XCIsIGNvb2tpZVBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJEb21haW46XCIsIGNvb2tpZURvbWFpbilcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUNvb2tpZShjb29raWUubmFtZSwgY29va2llUGF0aCwgY29va2llRG9tYWluKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm8gY29va2llIGRvbWFpbiBpcyBnaXZlbiwgd2UgYWxzbyB0cnkgdG8gZGVsZXRlIHRoZSBjb29raWUgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9tYWluICcuW2N1cnJlbnQgZG9tYWluXScgYXMgc29tZSBzZXJ2aWNlcyBzZXQgY29va2llcyBmb3IgdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG90dGVkIGRvbWFpbiBleHBsaWNpdGx5IChlLmcuIHRoZSBGYWNlYm9vayBwaXhlbCkuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29va2llRG9tYWluID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQ29va2llKGNvb2tpZS5uYW1lLCBjb29raWVQYXRoLCAnLicrd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NoZWNrQ29uc2VudHMoKXtcbiAgICAgICAgbGV0IGNvbXBsZXRlID0gdHJ1ZVxuICAgICAgICBjb25zdCBzZXJ2aWNlcyA9IG5ldyBTZXQodGhpcy5jb25maWcuc2VydmljZXMubWFwKChzZXJ2aWNlKT0+e3JldHVybiBzZXJ2aWNlLm5hbWV9KSlcbiAgICAgICAgY29uc3QgY29uc2VudHMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuY29uc2VudHMpKVxuICAgICAgICBmb3IoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuY29uc2VudHMpKXtcbiAgICAgICAgICAgIGlmICghc2VydmljZXMuaGFzKGtleSkpe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbnNlbnRzW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IoY29uc3Qgc2VydmljZSBvZiB0aGlzLmNvbmZpZy5zZXJ2aWNlcyl7XG4gICAgICAgICAgICBpZiAoIWNvbnNlbnRzLmhhcyhzZXJ2aWNlLm5hbWUpKXtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnNlbnRzW3NlcnZpY2UubmFtZV0gPSB0aGlzLmdldERlZmF1bHRDb25zZW50KHNlcnZpY2UpXG4gICAgICAgICAgICAgICAgY29tcGxldGUgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uZmlybWVkID0gY29tcGxldGVcbiAgICAgICAgaWYgKCFjb21wbGV0ZSlcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWVcbiAgICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiZGF0YXNldCIsImVsZW1lbnQiLCJpIiwiYXR0cmlidXRlcyIsImxlbmd0aCIsImF0dHJpYnV0ZSIsIm5hbWUiLCJzdGFydHNXaXRoIiwic2xpY2UiLCJ2YWx1ZSIsImFwcGx5RGF0YXNldCIsImRzIiwia2V5cyIsIk9iamVjdCIsImtleSIsInNldEF0dHJpYnV0ZSIsImlzQ2FsbGFibGUiLCJ0cnlUb1N0cmluZyIsIiRUeXBlRXJyb3IiLCJUeXBlRXJyb3IiLCJhcmd1bWVudCIsImlzQ29uc3RydWN0b3IiLCJpc1Bvc3NpYmxlUHJvdG90eXBlIiwiJFN0cmluZyIsIlN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5IiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiY29uZmlndXJhYmxlIiwiY2hhckF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsImlzUHJvdG90eXBlT2YiLCJpdCIsIlByb3RvdHlwZSIsImlzT2JqZWN0IiwiZmFpbHMiLCJBcnJheUJ1ZmZlciIsImJ1ZmZlciIsImlzRXh0ZW5zaWJsZSIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJmb3JFYWNoIiwiY2FsbGJhY2tmbiIsInRoaXMiLCJhcmd1bWVudHMiLCJiaW5kIiwiY2FsbCIsInRvT2JqZWN0IiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImxlbmd0aE9mQXJyYXlMaWtlIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvciIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJEFycmF5IiwiYXJyYXlMaWtlIiwiTyIsIklTX0NPTlNUUlVDVE9SIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwicmVzdWx0Iiwic3RlcCIsIml0ZXJhdG9yIiwibmV4dCIsIml0ZXJhdG9yTWV0aG9kIiwiZG9uZSIsInRvSW5kZXhlZE9iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwiaW5kZXhPZiIsInVuY3VycnlUaGlzIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsInB1c2giLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJ0YXJnZXQiLCJtYXAiLCJmaWx0ZXIiLCJzb21lIiwiZXZlcnkiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyUmVqZWN0IiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJNRVRIT0RfTkFNRSIsImFycmF5IiwiY29uc3RydWN0b3IiLCJmb28iLCJCb29sZWFuIiwibWV0aG9kIiwiaXNBcnJheSIsIm9yaWdpbmFsQXJyYXkiLCJDIiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJhbk9iamVjdCIsIml0ZXJhdG9yQ2xvc2UiLCJmbiIsIkVOVFJJRVMiLCJlcnJvciIsIklURVJBVE9SIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZnJvbSIsImV4ZWMiLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIm9iamVjdCIsInRvU3RyaW5nIiwic3RyaW5nU2xpY2UiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiVE9fU1RSSU5HX1RBRyIsIiRPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsImRlZmluZUJ1aWx0SW5BY2Nlc3NvciIsImRlZmluZUJ1aWx0SW5zIiwiYW5JbnN0YW5jZSIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXRlcmF0ZSIsImRlZmluZUl0ZXJhdG9yIiwiY3JlYXRlSXRlclJlc3VsdE9iamVjdCIsInNldFNwZWNpZXMiLCJERVNDUklQVE9SUyIsImZhc3RLZXkiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwic2V0SW50ZXJuYWxTdGF0ZSIsInNldCIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJnZXR0ZXJGb3IiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQURERVIiLCJDb25zdHJ1Y3RvciIsIml0ZXJhYmxlIiwidHlwZSIsImZpcnN0IiwibGFzdCIsInNpemUiLCJBU19FTlRSSUVTIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsInByZXZpb3VzIiwic3RhdGUiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwicHJldiIsImhhcyIsImdldCIsImFkZCIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsIiQiLCJnbG9iYWwiLCJpc0ZvcmNlZCIsImRlZmluZUJ1aWx0SW4iLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJOYXRpdmVDb25zdHJ1Y3RvciIsIk5hdGl2ZVByb3RvdHlwZSIsImV4cG9ydGVkIiwiZml4TWV0aG9kIiwiS0VZIiwidW5jdXJyaWVkTmF0aXZlTWV0aG9kIiwiZW50cmllcyIsImVuYWJsZSIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiZHVtbXkiLCJmb3JjZWQiLCJoYXNPd24iLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJzb3VyY2UiLCJleGNlcHRpb25zIiwiZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwiZXJyb3IyIiwiRiIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJtYWtlQnVpbHRJbiIsImRlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJkZWZpbmVHbG9iYWxQcm9wZXJ0eSIsIm9wdGlvbnMiLCJzaW1wbGUiLCJ1bnNhZmUiLCJub25Db25maWd1cmFibGUiLCJub25Xcml0YWJsZSIsInNyYyIsImRvY3VtZW50IiwiRVhJU1RTIiwiY3JlYXRlRWxlbWVudCIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJ2ZXJzaW9uIiwicHJvY2VzcyIsIkRlbm8iLCJ2ZXJzaW9ucyIsInY4Iiwic3BsaXQiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJkb250Q2FsbEdldFNldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwiRk9SQ0VEIiwiU0hBTSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJyZSIsImZsYWdzIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwibWV0aG9kcyIsIm5hdGl2ZU1ldGhvZCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsIiRleGVjIiwicHJldmVudEV4dGVuc2lvbnMiLCJOQVRJVkVfQklORCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiRnVuY3Rpb24iLCJhcHBseSIsIlJlZmxlY3QiLCJhQ2FsbGFibGUiLCJ0ZXN0IiwiaGFzT3duUHJvcGVydHkiLCJhcnJheVNsaWNlIiwiJEZ1bmN0aW9uIiwiY29uY2F0Iiwiam9pbiIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiYXJncyIsImFyZ3NMZW5ndGgiLCJsaXN0IiwiY29uc3RydWN0IiwiZ2V0RGVzY3JpcHRvciIsIlBST1BFUiIsIkNPTkZJR1VSQUJMRSIsInVuY3VycnlUaGlzV2l0aEJpbmQiLCJuYW1lc3BhY2UiLCJjbGFzc29mIiwiZ2V0TWV0aG9kIiwiSXRlcmF0b3JzIiwidXNpbmdJdGVyYXRvciIsInJlcGxhY2VyIiwicmF3TGVuZ3RoIiwia2V5c0xlbmd0aCIsImoiLCJWIiwiUCIsImZ1bmMiLCJmbG9vciIsIk1hdGgiLCJyZXBsYWNlIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsIm0iLCJzeW1ib2xzIiwiY2giLCJjYXB0dXJlIiwibiIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJnZXRCdWlsdEluIiwiYSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic2V0UHJvdG90eXBlT2YiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlIiwidWlkIiwiRlJFRVpJTkciLCJSRVFVSVJFRCIsIk1FVEFEQVRBIiwiaWQiLCJzZXRNZXRhZGF0YSIsIm9iamVjdElEIiwid2Vha0RhdGEiLCJtZXRhIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNwbGljZSIsImdldFdlYWtEYXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImRvY3VtZW50QWxsIiwiYWxsIiwibm9vcCIsImNvbnN0cnVjdG9yUmVnRXhwIiwiSU5DT1JSRUNUX1RPX1NUUklORyIsImlzQ29uc3RydWN0b3JNb2Rlcm4iLCJpc0NvbnN0cnVjdG9yTGVnYWN5IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsImRhdGEiLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInN0cmluZyIsInRvTG93ZXJDYXNlIiwiaXNSZWdFeHAiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIiRTeW1ib2wiLCJSZXN1bHQiLCJzdG9wcGVkIiwiUmVzdWx0UHJvdG90eXBlIiwidW5ib3VuZEZ1bmN0aW9uIiwiaXRlckZuIiwiSVNfUkVDT1JEIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsInN0b3AiLCJjb25kaXRpb24iLCJjYWxsRm4iLCJpbm5lclJlc3VsdCIsImlubmVyRXJyb3IiLCJJdGVyYXRvclByb3RvdHlwZSIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiTkFNRSIsIkVOVU1FUkFCTEVfTkVYVCIsIklTX1BVUkUiLCJGdW5jdGlvbk5hbWUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIlBST1BFUl9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiS0VZUyIsIlZBTFVFUyIsIkl0ZXJhYmxlIiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJ2YWx1ZXMiLCJwcm90byIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJ0b0xlbmd0aCIsIm9iaiIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiQ09ORklHVVJBQkxFX0xFTkdUSCIsIlRFTVBMQVRFIiwiYXJpdHkiLCJjZWlsIiwidHJ1bmMiLCJ4IiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllc01vZHVsZSIsImVudW1CdWdLZXlzIiwiaHRtbCIsIlBST1RPVFlQRSIsIlNDUklQVCIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIkpTIiwiZG9tYWluIiwic3R5bGUiLCJkaXNwbGF5IiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIlByb3BlcnRpZXMiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsIm9iamVjdEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJJRThfRE9NX0RFRklORSIsInRvUHJvcGVydHlLZXkiLCIkZGVmaW5lUHJvcGVydHkiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRU5VTUVSQUJMRSIsIldSSVRBQkxFIiwiQXR0cmlidXRlcyIsImN1cnJlbnQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwibmFtZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsInVuY3VycnlUaGlzQWNjZXNzb3IiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIl9fcHJvdG9fXyIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwiSUVfQlVHIiwiVE9fRU5UUklFUyIsIklFX1dPUktBUk9VTkQiLCJpbnB1dCIsInByZWYiLCJ2YWwiLCJ2YWx1ZU9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiVGFyZ2V0IiwiU291cmNlIiwiUiIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInJhdyIsImdyb3VwcyIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaGFzSW5kaWNlcyIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCJ1bmljb2RlU2V0cyIsInJlZ0V4cEZsYWdzIiwiJFJlZ0V4cCIsIk1JU1NFRF9TVElDS1kiLCJUQUciLCJTSEFSRUQiLCJtb2RlIiwiY29weXJpZ2h0IiwibGljZW5zZSIsInRvSW50ZWdlck9ySW5maW5pdHkiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY29kZUF0Iiwid2hpdGVzcGFjZXMiLCJsdHJpbSIsInJ0cmltIiwic3RhcnQiLCJlbmQiLCJ0cmltIiwic3ltYm9sIiwiU3ltYm9sIiwiU3ltYm9sUHJvdG90eXBlIiwiVE9fUFJJTUlUSVZFIiwiTkFUSVZFX1NZTUJPTCIsImtleUZvciIsIm1heCIsIm1pbiIsImludGVnZXIiLCJudW1iZXIiLCJsZW4iLCJpc1N5bWJvbCIsImV4b3RpY1RvUHJpbSIsInRvUHJpbWl0aXZlIiwicG9zdGZpeCIsInJhbmRvbSIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciIsImFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiYXJnIiwiayIsIkUiLCJBIiwiJGZpbHRlciIsIiRpbmNsdWRlcyIsImFkZFRvVW5zY29wYWJsZXMiLCJBUlJBWV9JVEVSQVRPUiIsIkFyZ3VtZW50cyIsIiRtYXAiLCJuYXRpdmVTbGljZSIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJmaW4iLCJkYXRlVG9QcmltaXRpdmUiLCJEYXRlUHJvdG90eXBlIiwiRGF0ZSIsIkZVTkNUSU9OX05BTUVfRVhJU1RTIiwibmFtZVJFIiwicmVnRXhwRXhlYyIsImdldFJlcGxhY2VyRnVuY3Rpb24iLCIkc3RyaW5naWZ5IiwibnVtYmVyVG9TdHJpbmciLCJ0ZXN0ZXIiLCJsb3ciLCJoaSIsIldST05HX1NZTUJPTFNfQ09OVkVSU0lPTiIsIklMTF9GT1JNRURfVU5JQ09ERSIsInN0cmluZ2lmeVdpdGhTeW1ib2xzRml4IiwiJHJlcGxhY2VyIiwiZml4SWxsRm9ybWVkIiwib2Zmc2V0Iiwic3RyaW5naWZ5Iiwic3BhY2UiLCJ0aGlzTnVtYmVyVmFsdWUiLCJOVU1CRVIiLCJOYXRpdmVOdW1iZXIiLCJQdXJlTnVtYmVyTmFtZXNwYWNlIiwiTnVtYmVyUHJvdG90eXBlIiwiTnVtYmVyV3JhcHBlciIsInByaW1WYWx1ZSIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY29kZSIsIk5hTiIsInBhcnNlSW50IiwidG9OdW1iZXIiLCJ0b051bWVyaWMiLCJ3cmFwIiwiTnVtYmVyIiwiJGVudHJpZXMiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwibmF0aXZlS2V5cyIsImFDb25zdHJ1Y3RvciIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJuZXdUYXJnZXQiLCIkYXJncyIsImdldFJlZ0V4cEZsYWdzIiwicHJveHlBY2Nlc3NvciIsIk5hdGl2ZVJlZ0V4cCIsIlN5bnRheEVycm9yIiwic3RyaW5nSW5kZXhPZiIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiUmVnRXhwV3JhcHBlciIsInBhdHRlcm4iLCJyYXdGbGFncyIsImhhbmRsZWQiLCJ0aGlzSXNSZWdFeHAiLCJwYXR0ZXJuSXNSZWdFeHAiLCJmbGFnc0FyZVVuZGVmaW5lZCIsInJhd1BhdHRlcm4iLCJjaHIiLCJuYW1lZCIsImJyYWNrZXRzIiwibmNnIiwiZ3JvdXBpZCIsImdyb3VwbmFtZSIsImhhbmRsZU5DRyIsImhhbmRsZURvdEFsbCIsIiR0b1N0cmluZyIsIlRPX1NUUklORyIsIm5hdGl2ZVRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsImNvbGxlY3Rpb24iLCJpbml0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwic2VhcmNoU3RyaW5nIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsImdldFN1YnN0aXR1dGlvbiIsIlJFUExBQ0UiLCJSRVBMQUNFX0tFRVBTXyQwIiwiUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUiLCJfIiwibWF5YmVDYWxsTmF0aXZlIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJ4IiwicmVzIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwiZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUiLCJISURERU4iLCJSYW5nZUVycm9yIiwiUU9iamVjdCIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwiZmFsbGJhY2tEZWZpbmVQcm9wZXJ0eSIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiZGVzY3JpcHRpb24iLCIkZGVmaW5lUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiTmF0aXZlU3ltYm9sIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInRoaXNTeW1ib2xWYWx1ZSIsInN5bWJvbERlc2NyaXB0aXZlU3RyaW5nIiwiZGVzYyIsIk5BVElWRV9TWU1CT0xfUkVHSVNUUlkiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsInN5bSIsIkRPTUl0ZXJhYmxlcyIsImhhbmRsZVByb3RvdHlwZSIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJDT0xMRUNUSU9OX05BTUUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJlIiwicHJvcCIsInIiLCJ0b1N0cmluZ1RhZyIsImdldENvb2tpZXMiLCJjb29raWVTdHJpbmdzIiwiY29va2llIiwiY29va2llcyIsInJlZ2V4IiwiY29va2llU3RyIiwiZGVsZXRlQ29va2llIiwiVGVzdFN0b3JlIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwiQ29va2llU3RvcmUiLCJtYW5hZ2VyIiwiY29va2llTmFtZSIsInN0b3JhZ2VOYW1lIiwiY29va2llRG9tYWluIiwiY29va2llUGF0aCIsImNvb2tpZUV4cGlyZXNBZnRlckRheXMiLCJnZXRDb29raWUiLCJkYXlzIiwiZXhwaXJlcyIsImRhdGUiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInRvVVRDU3RyaW5nIiwic2V0Q29va2llIiwiU3RvcmFnZVN0b3JlIiwiaGFuZGxlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiTG9jYWxTdG9yYWdlU3RvcmUiLCJfU3RvcmFnZVN0b3JlIiwiX2NhbGxTdXBlciIsImxvY2FsU3RvcmFnZSIsIl9pbmhlcml0cyIsIlNlc3Npb25TdG9yYWdlU3RvcmUiLCJfU3RvcmFnZVN0b3JlMiIsInNlc3Npb25TdG9yYWdlIiwiQ29uc2VudE1hbmFnZXIiLCJjb25maWciLCJhdXhpbGlhcnlTdG9yZSIsInN0b3JlcyIsInN0b3JhZ2VNZXRob2QiLCJjb25zZW50cyIsImRlZmF1bHRDb25zZW50cyIsImNvbmZpcm1lZCIsImNoYW5nZWQiLCJzdGF0ZXMiLCJpbml0aWFsaXplZCIsImV4ZWN1dGVkT25jZSIsIndhdGNoZXJzIiwiU2V0IiwibG9hZENvbnNlbnRzIiwiYXBwbHlDb25zZW50cyIsInNhdmVkQ29uc2VudHMiLCJfb2JqZWN0U3ByZWFkIiwic2VydmljZXMiLCJzZXJ2aWNlIiwiZ2V0RGVmYXVsdENvbnNlbnQiLCJ3YXRjaGVyIiwiZGVsZXRlIiwiX3RoaXMiLCJ1cGRhdGUiLCJtYXRjaGluZ1NlcnZpY2VzIiwiY29uc2VudCIsImRlZmF1bHQiLCJyZXF1aXJlZCIsIl90aGlzMiIsImNoYW5nZWRTZXJ2aWNlcyIsImNvbnRleHR1YWxDb25zZW50T25seSIsInVwZGF0ZUNvbnNlbnQiLCJub3RpZnkiLCJjb25zZW50RGF0YSIsIkpTT04iLCJwYXJzZSIsImRlY29kZVVSSUNvbXBvbmVudCIsIl9jaGVja0NvbnNlbnRzIiwiZXZlbnRUeXBlIiwic2F2ZUNvbnNlbnRzIiwiY2MiLCJfaSIsIl9PYmplY3QkZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsIl9zbGljZWRUb0FycmF5IiwidiIsImVuY29kZVVSSUNvbXBvbmVudCIsImNoYW5nZXMiLCJjaGFuZ2VkQ29uc2VudHMiLCJkcnlSdW4iLCJpbnRlcmFjdGl2ZSIsInNlcnZpY2VOYW1lIiwiZXhlY3V0ZUhhbmRsZXIiLCJoYW5kbGVyIiwib3B0cyIsInZhcnMiLCJoYW5kbGVyT3B0cyIsIm9uSW5pdCIsIm9wdE91dCIsImdldENvbnNlbnQiLCJvbkFjY2VwdCIsIm9uRGVjbGluZSIsInVwZGF0ZVNlcnZpY2VFbGVtZW50cyIsInVwZGF0ZVNlcnZpY2VTdG9yYWdlIiwiY2FsbGJhY2siLCJvbmx5T25jZSIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJocmVmIiwiYXR0cnMiLCJ0YWdOYW1lIiwiY29uc29sZSIsImRlYnVnIiwiX3N0ZXAiLCJuZXdFbGVtZW50IiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJzIiwiZXJyIiwiaW5uZXJUZXh0IiwidGV4dCIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJhdHRyIiwiYXR0clZhbHVlIiwidGl0bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJjb29raWVQYXR0ZXJuIiwiX2Nvb2tpZVBhdHRlcm4yIiwiY3AiLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiY29tcGxldGUiLCJfaTMiLCJfT2JqZWN0JGtleXMiLCJfc3RlcDUiLCJfaXRlcmF0b3I1Il0sInNvdXJjZVJvb3QiOiIifQ==